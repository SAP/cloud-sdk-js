import { Destination, DestinationNameAndJwt } from '../scp-cf';
import { buildAxiosRequestConfig } from '../http-client';

type FunctionReturnType<ApiT, FnT extends keyof ApiT> = ApiT[FnT] extends (
  ...args: any
) => any
  ? UnPromisify<ReturnType<ApiT[FnT]>>
  : never;
type UnPromisify<T> = T extends Promise<infer U> ? U : T;
type ConstructorType<T> = new (...args: any[]) => T;

/**
 * Generic request builder for building and executing REST request requests based on apis generated by the OpenAPI generator.
 * @typeparam ApiT Interface of the generated api. All properties of the interface will be treated as functions.
 */
export class RestRequestBuilder<ApiT> {
  private customHeaders: Record<string, string> = {};
  private args: any[];
  constructor(
    private apiConstructor: ConstructorType<ApiT>,
    private fn: keyof ApiT,
    ...args: any[]
  ) {
    this.args = args;
  }

  /**
   * Add custom headers to the request.
   *
   * @param headers Key-value pairs denoting additional custom headers
   * @returns The request builder itself, to facilitate method chaining
   */
  withCustomHeaders(headers: Record<string, string>): this {
    Object.entries(headers).forEach(([key, value]) => {
      this.customHeaders[key.toLowerCase()] = value;
    });
    return this;
  }

  /**
   * Execute request.
   * @param destination  Destination to execute the request against.
   * @param options Options to employ when fetching destinations.
   * @returns A promise resolving to the requested return type.
   */
  async execute(
    destination: Destination | DestinationNameAndJwt
  ): Promise<FunctionReturnType<ApiT, keyof ApiT>> {
    const requestConfig = await buildAxiosRequestConfig(destination, {
      headers: this.customHeaders
    });

    const api = new this.apiConstructor(requestConfig);
    const fn = api[this.fn];

    if (typeof fn === 'function') {
      return fn.apply(api, this.args);
    }

    throw new Error(
      `'${this.fn}' is not a function of ${this.apiConstructor.name}`
    );
  }
}
