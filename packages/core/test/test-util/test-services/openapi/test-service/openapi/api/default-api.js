"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Test API
 * Test API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("../base");
/**
 * DefaultApi - axios parameter creator
 * @export
 */
var DefaultApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Count entities
         * @summary Count entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countEntities: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/entities/count";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    queryParameters = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        queryParameters.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        queryParameters.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Create entity
         * @summary Create entity
         * @param {TestEntity} [testEntity] Entity to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntity: function (testEntity, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_a) {
                    localVarPath = "/entities";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    queryParameters = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        queryParameters.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        queryParameters.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    nonString = typeof testEntity !== 'string';
                    needsSerialization = nonString && configuration && configuration.isJsonMime
                        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                        : nonString;
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(testEntity !== undefined ? testEntity : {})
                        : (testEntity || "");
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {Array<string>} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntity: function (requestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_a) {
                    localVarPath = "/entities";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    queryParameters = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        queryParameters.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        queryParameters.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    nonString = typeof requestBody !== 'string';
                    needsSerialization = nonString && configuration && configuration.isJsonMime
                        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                        : nonString;
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(requestBody !== undefined ? requestBody : {})
                        : (requestBody || "");
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/test-cases/duplicate-operation-ids";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    queryParameters = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        queryParameters.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        queryParameters.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId1: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/test-cases/duplicate-operation-ids";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    queryParameters = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        queryParameters.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        queryParameters.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId2: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/test-cases/duplicate-operation-ids";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    queryParameters = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        queryParameters.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        queryParameters.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId3: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/test-cases/duplicate-operation-ids";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    queryParameters = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        queryParameters.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        queryParameters.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get all entities
         * @summary Get entities
         * @param {string} [stringParameter] A parameter of type string
         * @param {number} [integerParameter] A parameter of type integer
         * @param {string} [$dollarParameter] A parameter that contains $
         * @param {string} [dotParameter] A parameter that contains . in the middle
         * @param {'value1' | 'value2'} [enumStringParameter] A parameter of type enum with string
         * @param {1 | 2} [enumInt32Parameter] A parameter of type enum with int 32
         * @param {1 | 2} [enumDoubleParameter] A parameter of type enum with double
         * @param {boolean} [enumBooleanParameter] A parameter of type enum with boolean
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntities: function (stringParameter, integerParameter, $dollarParameter, dotParameter, enumStringParameter, enumInt32Parameter, enumDoubleParameter, enumBooleanParameter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/entities";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (stringParameter !== undefined) {
                        localVarQueryParameter['stringParameter'] = stringParameter;
                    }
                    if (integerParameter !== undefined) {
                        localVarQueryParameter['integerParameter'] = integerParameter;
                    }
                    if ($dollarParameter !== undefined) {
                        localVarQueryParameter['$dollarParameter'] = $dollarParameter;
                    }
                    if (dotParameter !== undefined) {
                        localVarQueryParameter['dot.parameter'] = dotParameter;
                    }
                    if (enumStringParameter !== undefined) {
                        localVarQueryParameter['enumStringParameter'] = enumStringParameter;
                    }
                    if (enumInt32Parameter !== undefined) {
                        localVarQueryParameter['enumInt32Parameter'] = enumInt32Parameter;
                    }
                    if (enumDoubleParameter !== undefined) {
                        localVarQueryParameter['enumDoubleParameter'] = enumDoubleParameter;
                    }
                    if (enumBooleanParameter !== undefined) {
                        localVarQueryParameter['enumBooleanParameter'] = enumBooleanParameter;
                    }
                    queryParameters = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        queryParameters.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        queryParameters.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get entity by id
         * @summary Get entity by id
         * @param {string} entityId Key property of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityByKey: function (entityId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'entityId' is not null or undefined
                    if (entityId === null || entityId === undefined) {
                        throw new base_1.RequiredError('entityId', 'Required parameter entityId was null or undefined when calling getEntityByKey.');
                    }
                    localVarPath = "/entities/{entityId}"
                        .replace("{" + "entityId" + "}", encodeURIComponent(String(entityId)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    queryParameters = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        queryParameters.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        queryParameters.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestCasesNoOperationId: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/test-cases/no-operation-id";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    queryParameters = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        queryParameters.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        queryParameters.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} duplicateParam
         * @param {string} duplicateParam2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCaseGetDuplicateParameters: function (duplicateParam, duplicateParam2, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'duplicateParam' is not null or undefined
                    if (duplicateParam === null || duplicateParam === undefined) {
                        throw new base_1.RequiredError('duplicateParam', 'Required parameter duplicateParam was null or undefined when calling testCaseGetDuplicateParameters.');
                    }
                    // verify required parameter 'duplicateParam2' is not null or undefined
                    if (duplicateParam2 === null || duplicateParam2 === undefined) {
                        throw new base_1.RequiredError('duplicateParam2', 'Required parameter duplicateParam2 was null or undefined when calling testCaseGetDuplicateParameters.');
                    }
                    localVarPath = "/test-cases/parameters/{duplicateParam}"
                        .replace("{" + "duplicateParam" + "}", encodeURIComponent(String(duplicateParam2)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (duplicateParam !== undefined) {
                        localVarQueryParameter['duplicateParam'] = duplicateParam;
                    }
                    queryParameters = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        queryParameters.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        queryParameters.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} requiredPathItemQueryParam
         * @param {string} requiredPathItemPathParam
         * @param {string} requiredQueryParam
         * @param {string} [optionalQueryParam]
         * @param {string} [optionalPathItemQueryParam] Overrides original path item query parameter.
         * @param {SimpleTestEntity} [simpleTestEntity]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCaseGetRequiredParameters: function (requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, optionalQueryParam, optionalPathItemQueryParam, simpleTestEntity, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'requiredPathItemQueryParam' is not null or undefined
                    if (requiredPathItemQueryParam === null || requiredPathItemQueryParam === undefined) {
                        throw new base_1.RequiredError('requiredPathItemQueryParam', 'Required parameter requiredPathItemQueryParam was null or undefined when calling testCaseGetRequiredParameters.');
                    }
                    // verify required parameter 'requiredPathItemPathParam' is not null or undefined
                    if (requiredPathItemPathParam === null || requiredPathItemPathParam === undefined) {
                        throw new base_1.RequiredError('requiredPathItemPathParam', 'Required parameter requiredPathItemPathParam was null or undefined when calling testCaseGetRequiredParameters.');
                    }
                    // verify required parameter 'requiredQueryParam' is not null or undefined
                    if (requiredQueryParam === null || requiredQueryParam === undefined) {
                        throw new base_1.RequiredError('requiredQueryParam', 'Required parameter requiredQueryParam was null or undefined when calling testCaseGetRequiredParameters.');
                    }
                    localVarPath = "/test-cases/parameters/required-parameters/{requiredPathItemPathParam}"
                        .replace("{" + "requiredPathItemPathParam" + "}", encodeURIComponent(String(requiredPathItemPathParam)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (requiredPathItemQueryParam !== undefined) {
                        localVarQueryParameter['requiredPathItemQueryParam'] = requiredPathItemQueryParam;
                    }
                    if (optionalQueryParam !== undefined) {
                        localVarQueryParameter['optionalQueryParam'] = optionalQueryParam;
                    }
                    if (requiredQueryParam !== undefined) {
                        localVarQueryParameter['requiredQueryParam'] = requiredQueryParam;
                    }
                    if (optionalPathItemQueryParam !== undefined) {
                        localVarQueryParameter['optionalPathItemQueryParam'] = optionalPathItemQueryParam;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    queryParameters = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        queryParameters.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        queryParameters.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    nonString = typeof simpleTestEntity !== 'string';
                    needsSerialization = nonString && configuration && configuration.isJsonMime
                        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                        : nonString;
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(simpleTestEntity !== undefined ? simpleTestEntity : {})
                        : (simpleTestEntity || "");
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} requiredPathItemQueryParam
         * @param {string} requiredPathItemPathParam
         * @param {string} requiredQueryParam
         * @param {SimpleTestEntity} simpleTestEntity
         * @param {string} [optionalPathItemQueryParam]
         * @param {string} [optionalQueryParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasePostRequiredParameters: function (requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, simpleTestEntity, optionalPathItemQueryParam, optionalQueryParam, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'requiredPathItemQueryParam' is not null or undefined
                    if (requiredPathItemQueryParam === null || requiredPathItemQueryParam === undefined) {
                        throw new base_1.RequiredError('requiredPathItemQueryParam', 'Required parameter requiredPathItemQueryParam was null or undefined when calling testCasePostRequiredParameters.');
                    }
                    // verify required parameter 'requiredPathItemPathParam' is not null or undefined
                    if (requiredPathItemPathParam === null || requiredPathItemPathParam === undefined) {
                        throw new base_1.RequiredError('requiredPathItemPathParam', 'Required parameter requiredPathItemPathParam was null or undefined when calling testCasePostRequiredParameters.');
                    }
                    // verify required parameter 'requiredQueryParam' is not null or undefined
                    if (requiredQueryParam === null || requiredQueryParam === undefined) {
                        throw new base_1.RequiredError('requiredQueryParam', 'Required parameter requiredQueryParam was null or undefined when calling testCasePostRequiredParameters.');
                    }
                    // verify required parameter 'simpleTestEntity' is not null or undefined
                    if (simpleTestEntity === null || simpleTestEntity === undefined) {
                        throw new base_1.RequiredError('simpleTestEntity', 'Required parameter simpleTestEntity was null or undefined when calling testCasePostRequiredParameters.');
                    }
                    localVarPath = "/test-cases/parameters/required-parameters/{requiredPathItemPathParam}"
                        .replace("{" + "requiredPathItemPathParam" + "}", encodeURIComponent(String(requiredPathItemPathParam)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (optionalPathItemQueryParam !== undefined) {
                        localVarQueryParameter['optionalPathItemQueryParam'] = optionalPathItemQueryParam;
                    }
                    if (requiredPathItemQueryParam !== undefined) {
                        localVarQueryParameter['requiredPathItemQueryParam'] = requiredPathItemQueryParam;
                    }
                    if (optionalQueryParam !== undefined) {
                        localVarQueryParameter['optionalQueryParam'] = optionalQueryParam;
                    }
                    if (requiredQueryParam !== undefined) {
                        localVarQueryParameter['requiredQueryParam'] = requiredQueryParam;
                    }
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    queryParameters = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        queryParameters.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        queryParameters.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    nonString = typeof simpleTestEntity !== 'string';
                    needsSerialization = nonString && configuration && configuration.isJsonMime
                        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                        : nonString;
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(simpleTestEntity !== undefined ? simpleTestEntity : {})
                        : (simpleTestEntity || "");
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntity: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_a) {
                    localVarPath = "/entities";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    queryParameters = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        queryParameters.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        queryParameters.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    nonString = typeof body !== 'string';
                    needsSerialization = nonString && configuration && configuration.isJsonMime
                        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                        : nonString;
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(body !== undefined ? body : {})
                        : (body || "");
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {Array<TestEntity>} [testEntity]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWithPut: function (testEntity, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, queryParameters, key, key, headersFromBaseOptions, nonString, needsSerialization;
                return __generator(this, function (_a) {
                    localVarPath = "/entities";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    queryParameters = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        queryParameters.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        queryParameters.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    nonString = typeof testEntity !== 'string';
                    needsSerialization = nonString && configuration && configuration.isJsonMime
                        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                        : nonString;
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(testEntity !== undefined ? testEntity : {})
                        : (testEntity || "");
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.DefaultApiAxiosParamCreator = DefaultApiAxiosParamCreator;
/**
 * DefaultApi - functional programming interface
 * @export
 */
var DefaultApiFp = function (configuration) {
    return {
        /**
         * Count entities
         * @summary Count entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countEntities: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DefaultApiAxiosParamCreator(configuration).countEntities(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Create entity
         * @summary Create entity
         * @param {TestEntity} [testEntity] Entity to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntity: function (testEntity, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DefaultApiAxiosParamCreator(configuration).createEntity(testEntity, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {Array<string>} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntity: function (requestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DefaultApiAxiosParamCreator(configuration).deleteEntity(requestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DefaultApiAxiosParamCreator(configuration).duplicateOperationId(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId1: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DefaultApiAxiosParamCreator(configuration).duplicateOperationId1(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId2: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DefaultApiAxiosParamCreator(configuration).duplicateOperationId2(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId3: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DefaultApiAxiosParamCreator(configuration).duplicateOperationId3(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Get all entities
         * @summary Get entities
         * @param {string} [stringParameter] A parameter of type string
         * @param {number} [integerParameter] A parameter of type integer
         * @param {string} [$dollarParameter] A parameter that contains $
         * @param {string} [dotParameter] A parameter that contains . in the middle
         * @param {'value1' | 'value2'} [enumStringParameter] A parameter of type enum with string
         * @param {1 | 2} [enumInt32Parameter] A parameter of type enum with int 32
         * @param {1 | 2} [enumDoubleParameter] A parameter of type enum with double
         * @param {boolean} [enumBooleanParameter] A parameter of type enum with boolean
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntities: function (stringParameter, integerParameter, $dollarParameter, dotParameter, enumStringParameter, enumInt32Parameter, enumDoubleParameter, enumBooleanParameter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DefaultApiAxiosParamCreator(configuration).getAllEntities(stringParameter, integerParameter, $dollarParameter, dotParameter, enumStringParameter, enumInt32Parameter, enumDoubleParameter, enumBooleanParameter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * Get entity by id
         * @summary Get entity by id
         * @param {string} entityId Key property of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityByKey: function (entityId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DefaultApiAxiosParamCreator(configuration).getEntityByKey(entityId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestCasesNoOperationId: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DefaultApiAxiosParamCreator(configuration).getTestCasesNoOperationId(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} duplicateParam
         * @param {string} duplicateParam2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCaseGetDuplicateParameters: function (duplicateParam, duplicateParam2, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DefaultApiAxiosParamCreator(configuration).testCaseGetDuplicateParameters(duplicateParam, duplicateParam2, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} requiredPathItemQueryParam
         * @param {string} requiredPathItemPathParam
         * @param {string} requiredQueryParam
         * @param {string} [optionalQueryParam]
         * @param {string} [optionalPathItemQueryParam] Overrides original path item query parameter.
         * @param {SimpleTestEntity} [simpleTestEntity]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCaseGetRequiredParameters: function (requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, optionalQueryParam, optionalPathItemQueryParam, simpleTestEntity, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DefaultApiAxiosParamCreator(configuration).testCaseGetRequiredParameters(requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, optionalQueryParam, optionalPathItemQueryParam, simpleTestEntity, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} requiredPathItemQueryParam
         * @param {string} requiredPathItemPathParam
         * @param {string} requiredQueryParam
         * @param {SimpleTestEntity} simpleTestEntity
         * @param {string} [optionalPathItemQueryParam]
         * @param {string} [optionalQueryParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasePostRequiredParameters: function (requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, simpleTestEntity, optionalPathItemQueryParam, optionalQueryParam, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DefaultApiAxiosParamCreator(configuration).testCasePostRequiredParameters(requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, simpleTestEntity, optionalPathItemQueryParam, optionalQueryParam, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntity: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DefaultApiAxiosParamCreator(configuration).updateEntity(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {Array<TestEntity>} [testEntity]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWithPut: function (testEntity, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.DefaultApiAxiosParamCreator(configuration).updateEntityWithPut(testEntity, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
    };
};
exports.DefaultApiFp = DefaultApiFp;
/**
 * DefaultApi - factory interface
 * @export
 */
var DefaultApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Count entities
         * @summary Count entities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countEntities: function (options) {
            return exports.DefaultApiFp(configuration).countEntities(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create entity
         * @summary Create entity
         * @param {TestEntity} [testEntity] Entity to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntity: function (testEntity, options) {
            return exports.DefaultApiFp(configuration).createEntity(testEntity, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {Array<string>} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntity: function (requestBody, options) {
            return exports.DefaultApiFp(configuration).deleteEntity(requestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId: function (options) {
            return exports.DefaultApiFp(configuration).duplicateOperationId(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId1: function (options) {
            return exports.DefaultApiFp(configuration).duplicateOperationId1(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId2: function (options) {
            return exports.DefaultApiFp(configuration).duplicateOperationId2(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId3: function (options) {
            return exports.DefaultApiFp(configuration).duplicateOperationId3(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get all entities
         * @summary Get entities
         * @param {string} [stringParameter] A parameter of type string
         * @param {number} [integerParameter] A parameter of type integer
         * @param {string} [$dollarParameter] A parameter that contains $
         * @param {string} [dotParameter] A parameter that contains . in the middle
         * @param {'value1' | 'value2'} [enumStringParameter] A parameter of type enum with string
         * @param {1 | 2} [enumInt32Parameter] A parameter of type enum with int 32
         * @param {1 | 2} [enumDoubleParameter] A parameter of type enum with double
         * @param {boolean} [enumBooleanParameter] A parameter of type enum with boolean
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntities: function (stringParameter, integerParameter, $dollarParameter, dotParameter, enumStringParameter, enumInt32Parameter, enumDoubleParameter, enumBooleanParameter, options) {
            return exports.DefaultApiFp(configuration).getAllEntities(stringParameter, integerParameter, $dollarParameter, dotParameter, enumStringParameter, enumInt32Parameter, enumDoubleParameter, enumBooleanParameter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get entity by id
         * @summary Get entity by id
         * @param {string} entityId Key property of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityByKey: function (entityId, options) {
            return exports.DefaultApiFp(configuration).getEntityByKey(entityId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestCasesNoOperationId: function (options) {
            return exports.DefaultApiFp(configuration).getTestCasesNoOperationId(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} duplicateParam
         * @param {string} duplicateParam2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCaseGetDuplicateParameters: function (duplicateParam, duplicateParam2, options) {
            return exports.DefaultApiFp(configuration).testCaseGetDuplicateParameters(duplicateParam, duplicateParam2, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} requiredPathItemQueryParam
         * @param {string} requiredPathItemPathParam
         * @param {string} requiredQueryParam
         * @param {string} [optionalQueryParam]
         * @param {string} [optionalPathItemQueryParam] Overrides original path item query parameter.
         * @param {SimpleTestEntity} [simpleTestEntity]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCaseGetRequiredParameters: function (requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, optionalQueryParam, optionalPathItemQueryParam, simpleTestEntity, options) {
            return exports.DefaultApiFp(configuration).testCaseGetRequiredParameters(requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, optionalQueryParam, optionalPathItemQueryParam, simpleTestEntity, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} requiredPathItemQueryParam
         * @param {string} requiredPathItemPathParam
         * @param {string} requiredQueryParam
         * @param {SimpleTestEntity} simpleTestEntity
         * @param {string} [optionalPathItemQueryParam]
         * @param {string} [optionalQueryParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasePostRequiredParameters: function (requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, simpleTestEntity, optionalPathItemQueryParam, optionalQueryParam, options) {
            return exports.DefaultApiFp(configuration).testCasePostRequiredParameters(requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, simpleTestEntity, optionalPathItemQueryParam, optionalQueryParam, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntity: function (body, options) {
            return exports.DefaultApiFp(configuration).updateEntity(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {Array<TestEntity>} [testEntity]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWithPut: function (testEntity, options) {
            return exports.DefaultApiFp(configuration).updateEntityWithPut(testEntity, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DefaultApiFactory = DefaultApiFactory;
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
var DefaultApi = /** @class */ (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Count entities
     * @summary Count entities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.countEntities = function (options) {
        var _this = this;
        return exports.DefaultApiFp(this.configuration).countEntities(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create entity
     * @summary Create entity
     * @param {TestEntity} [testEntity] Entity to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.createEntity = function (testEntity, options) {
        var _this = this;
        return exports.DefaultApiFp(this.configuration).createEntity(testEntity, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.deleteEntity = function (requestBody, options) {
        var _this = this;
        return exports.DefaultApiFp(this.configuration).deleteEntity(requestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.duplicateOperationId = function (options) {
        var _this = this;
        return exports.DefaultApiFp(this.configuration).duplicateOperationId(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.duplicateOperationId1 = function (options) {
        var _this = this;
        return exports.DefaultApiFp(this.configuration).duplicateOperationId1(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.duplicateOperationId2 = function (options) {
        var _this = this;
        return exports.DefaultApiFp(this.configuration).duplicateOperationId2(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.duplicateOperationId3 = function (options) {
        var _this = this;
        return exports.DefaultApiFp(this.configuration).duplicateOperationId3(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get all entities
     * @summary Get entities
     * @param {string} [stringParameter] A parameter of type string
     * @param {number} [integerParameter] A parameter of type integer
     * @param {string} [$dollarParameter] A parameter that contains $
     * @param {string} [dotParameter] A parameter that contains . in the middle
     * @param {'value1' | 'value2'} [enumStringParameter] A parameter of type enum with string
     * @param {1 | 2} [enumInt32Parameter] A parameter of type enum with int 32
     * @param {1 | 2} [enumDoubleParameter] A parameter of type enum with double
     * @param {boolean} [enumBooleanParameter] A parameter of type enum with boolean
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.getAllEntities = function (stringParameter, integerParameter, $dollarParameter, dotParameter, enumStringParameter, enumInt32Parameter, enumDoubleParameter, enumBooleanParameter, options) {
        var _this = this;
        return exports.DefaultApiFp(this.configuration).getAllEntities(stringParameter, integerParameter, $dollarParameter, dotParameter, enumStringParameter, enumInt32Parameter, enumDoubleParameter, enumBooleanParameter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get entity by id
     * @summary Get entity by id
     * @param {string} entityId Key property of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.getEntityByKey = function (entityId, options) {
        var _this = this;
        return exports.DefaultApiFp(this.configuration).getEntityByKey(entityId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.getTestCasesNoOperationId = function (options) {
        var _this = this;
        return exports.DefaultApiFp(this.configuration).getTestCasesNoOperationId(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} duplicateParam
     * @param {string} duplicateParam2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.testCaseGetDuplicateParameters = function (duplicateParam, duplicateParam2, options) {
        var _this = this;
        return exports.DefaultApiFp(this.configuration).testCaseGetDuplicateParameters(duplicateParam, duplicateParam2, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} requiredPathItemQueryParam
     * @param {string} requiredPathItemPathParam
     * @param {string} requiredQueryParam
     * @param {string} [optionalQueryParam]
     * @param {string} [optionalPathItemQueryParam] Overrides original path item query parameter.
     * @param {SimpleTestEntity} [simpleTestEntity]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.testCaseGetRequiredParameters = function (requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, optionalQueryParam, optionalPathItemQueryParam, simpleTestEntity, options) {
        var _this = this;
        return exports.DefaultApiFp(this.configuration).testCaseGetRequiredParameters(requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, optionalQueryParam, optionalPathItemQueryParam, simpleTestEntity, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} requiredPathItemQueryParam
     * @param {string} requiredPathItemPathParam
     * @param {string} requiredQueryParam
     * @param {SimpleTestEntity} simpleTestEntity
     * @param {string} [optionalPathItemQueryParam]
     * @param {string} [optionalQueryParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.testCasePostRequiredParameters = function (requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, simpleTestEntity, optionalPathItemQueryParam, optionalQueryParam, options) {
        var _this = this;
        return exports.DefaultApiFp(this.configuration).testCasePostRequiredParameters(requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, simpleTestEntity, optionalPathItemQueryParam, optionalQueryParam, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.updateEntity = function (body, options) {
        var _this = this;
        return exports.DefaultApiFp(this.configuration).updateEntity(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {Array<TestEntity>} [testEntity]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    DefaultApi.prototype.updateEntityWithPut = function (testEntity, options) {
        var _this = this;
        return exports.DefaultApiFp(this.configuration).updateEntityWithPut(testEntity, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DefaultApi;
}(base_1.BaseAPI));
exports.DefaultApi = DefaultApi;
//# sourceMappingURL=default-api.js.map