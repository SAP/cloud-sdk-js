/* tslint:disable */
/* eslint-disable */
/**
 * Test API
 * Test API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SimpleTestEntity } from '../model';
/**
 * TestCaseApi - axios parameter creator
 * @export
 */
export const TestCaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/test-cases/duplicate-operation-ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/test-cases/duplicate-operation-ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId2: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/test-cases/duplicate-operation-ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId3: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/test-cases/duplicate-operation-ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestCasesNoOperationId: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/test-cases/no-operation-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} duplicateParam 
         * @param {string} duplicateParam2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCaseGetDuplicateParameters: async (duplicateParam: string, duplicateParam2: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'duplicateParam' is not null or undefined
            if (duplicateParam === null || duplicateParam === undefined) {
                throw new RequiredError('duplicateParam','Required parameter duplicateParam was null or undefined when calling testCaseGetDuplicateParameters.');
            }
            // verify required parameter 'duplicateParam2' is not null or undefined
            if (duplicateParam2 === null || duplicateParam2 === undefined) {
                throw new RequiredError('duplicateParam2','Required parameter duplicateParam2 was null or undefined when calling testCaseGetDuplicateParameters.');
            }
            const localVarPath = `/test-cases/parameters/{duplicateParam}`
                .replace(`{${"duplicateParam"}}`, encodeURIComponent(String(duplicateParam2)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (duplicateParam !== undefined) {
                localVarQueryParameter['duplicateParam'] = duplicateParam;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} requiredPathItemQueryParam 
         * @param {string} requiredPathItemPathParam 
         * @param {string} requiredQueryParam 
         * @param {string} [optionalQueryParam] 
         * @param {string} [optionalPathItemQueryParam] Overrides original path item query parameter.
         * @param {SimpleTestEntity} [simpleTestEntity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCaseGetRequiredParameters: async (requiredPathItemQueryParam: string, requiredPathItemPathParam: string, requiredQueryParam: string, optionalQueryParam?: string, optionalPathItemQueryParam?: string, simpleTestEntity?: SimpleTestEntity, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requiredPathItemQueryParam' is not null or undefined
            if (requiredPathItemQueryParam === null || requiredPathItemQueryParam === undefined) {
                throw new RequiredError('requiredPathItemQueryParam','Required parameter requiredPathItemQueryParam was null or undefined when calling testCaseGetRequiredParameters.');
            }
            // verify required parameter 'requiredPathItemPathParam' is not null or undefined
            if (requiredPathItemPathParam === null || requiredPathItemPathParam === undefined) {
                throw new RequiredError('requiredPathItemPathParam','Required parameter requiredPathItemPathParam was null or undefined when calling testCaseGetRequiredParameters.');
            }
            // verify required parameter 'requiredQueryParam' is not null or undefined
            if (requiredQueryParam === null || requiredQueryParam === undefined) {
                throw new RequiredError('requiredQueryParam','Required parameter requiredQueryParam was null or undefined when calling testCaseGetRequiredParameters.');
            }
            const localVarPath = `/test-cases/parameters/required-parameters/{requiredPathItemPathParam}`
                .replace(`{${"requiredPathItemPathParam"}}`, encodeURIComponent(String(requiredPathItemPathParam)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (requiredPathItemQueryParam !== undefined) {
                localVarQueryParameter['requiredPathItemQueryParam'] = requiredPathItemQueryParam;
            }

            if (optionalQueryParam !== undefined) {
                localVarQueryParameter['optionalQueryParam'] = optionalQueryParam;
            }

            if (requiredQueryParam !== undefined) {
                localVarQueryParameter['requiredQueryParam'] = requiredQueryParam;
            }

            if (optionalPathItemQueryParam !== undefined) {
                localVarQueryParameter['optionalPathItemQueryParam'] = optionalPathItemQueryParam;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof simpleTestEntity !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(simpleTestEntity !== undefined ? simpleTestEntity : {})
                : (simpleTestEntity || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} requiredPathItemQueryParam 
         * @param {string} requiredPathItemPathParam 
         * @param {string} requiredQueryParam 
         * @param {SimpleTestEntity} simpleTestEntity 
         * @param {string} [optionalPathItemQueryParam] 
         * @param {string} [optionalQueryParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasePostRequiredParameters: async (requiredPathItemQueryParam: string, requiredPathItemPathParam: string, requiredQueryParam: string, simpleTestEntity: SimpleTestEntity, optionalPathItemQueryParam?: string, optionalQueryParam?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requiredPathItemQueryParam' is not null or undefined
            if (requiredPathItemQueryParam === null || requiredPathItemQueryParam === undefined) {
                throw new RequiredError('requiredPathItemQueryParam','Required parameter requiredPathItemQueryParam was null or undefined when calling testCasePostRequiredParameters.');
            }
            // verify required parameter 'requiredPathItemPathParam' is not null or undefined
            if (requiredPathItemPathParam === null || requiredPathItemPathParam === undefined) {
                throw new RequiredError('requiredPathItemPathParam','Required parameter requiredPathItemPathParam was null or undefined when calling testCasePostRequiredParameters.');
            }
            // verify required parameter 'requiredQueryParam' is not null or undefined
            if (requiredQueryParam === null || requiredQueryParam === undefined) {
                throw new RequiredError('requiredQueryParam','Required parameter requiredQueryParam was null or undefined when calling testCasePostRequiredParameters.');
            }
            // verify required parameter 'simpleTestEntity' is not null or undefined
            if (simpleTestEntity === null || simpleTestEntity === undefined) {
                throw new RequiredError('simpleTestEntity','Required parameter simpleTestEntity was null or undefined when calling testCasePostRequiredParameters.');
            }
            const localVarPath = `/test-cases/parameters/required-parameters/{requiredPathItemPathParam}`
                .replace(`{${"requiredPathItemPathParam"}}`, encodeURIComponent(String(requiredPathItemPathParam)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (optionalPathItemQueryParam !== undefined) {
                localVarQueryParameter['optionalPathItemQueryParam'] = optionalPathItemQueryParam;
            }

            if (requiredPathItemQueryParam !== undefined) {
                localVarQueryParameter['requiredPathItemQueryParam'] = requiredPathItemQueryParam;
            }

            if (optionalQueryParam !== undefined) {
                localVarQueryParameter['optionalQueryParam'] = optionalQueryParam;
            }

            if (requiredQueryParam !== undefined) {
                localVarQueryParameter['requiredQueryParam'] = requiredQueryParam;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof simpleTestEntity !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data =  needsSerialization
                ? JSON.stringify(simpleTestEntity !== undefined ? simpleTestEntity : {})
                : (simpleTestEntity || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestCaseApi - functional programming interface
 * @export
 */
export const TestCaseApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async duplicateOperationId(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TestCaseApiAxiosParamCreator(configuration).duplicateOperationId(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async duplicateOperationId1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TestCaseApiAxiosParamCreator(configuration).duplicateOperationId1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async duplicateOperationId2(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TestCaseApiAxiosParamCreator(configuration).duplicateOperationId2(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async duplicateOperationId3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TestCaseApiAxiosParamCreator(configuration).duplicateOperationId3(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestCasesNoOperationId(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TestCaseApiAxiosParamCreator(configuration).getTestCasesNoOperationId(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} duplicateParam 
         * @param {string} duplicateParam2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testCaseGetDuplicateParameters(duplicateParam: string, duplicateParam2: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TestCaseApiAxiosParamCreator(configuration).testCaseGetDuplicateParameters(duplicateParam, duplicateParam2, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} requiredPathItemQueryParam 
         * @param {string} requiredPathItemPathParam 
         * @param {string} requiredQueryParam 
         * @param {string} [optionalQueryParam] 
         * @param {string} [optionalPathItemQueryParam] Overrides original path item query parameter.
         * @param {SimpleTestEntity} [simpleTestEntity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testCaseGetRequiredParameters(requiredPathItemQueryParam: string, requiredPathItemPathParam: string, requiredQueryParam: string, optionalQueryParam?: string, optionalPathItemQueryParam?: string, simpleTestEntity?: SimpleTestEntity, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TestCaseApiAxiosParamCreator(configuration).testCaseGetRequiredParameters(requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, optionalQueryParam, optionalPathItemQueryParam, simpleTestEntity, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} requiredPathItemQueryParam 
         * @param {string} requiredPathItemPathParam 
         * @param {string} requiredQueryParam 
         * @param {SimpleTestEntity} simpleTestEntity 
         * @param {string} [optionalPathItemQueryParam] 
         * @param {string} [optionalQueryParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testCasePostRequiredParameters(requiredPathItemQueryParam: string, requiredPathItemPathParam: string, requiredQueryParam: string, simpleTestEntity: SimpleTestEntity, optionalPathItemQueryParam?: string, optionalQueryParam?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TestCaseApiAxiosParamCreator(configuration).testCasePostRequiredParameters(requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, simpleTestEntity, optionalPathItemQueryParam, optionalQueryParam, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TestCaseApi - factory interface
 * @export
 */
export const TestCaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId(options?: any): AxiosPromise<void> {
            return TestCaseApiFp(configuration).duplicateOperationId(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId1(options?: any): AxiosPromise<void> {
            return TestCaseApiFp(configuration).duplicateOperationId1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId2(options?: any): AxiosPromise<void> {
            return TestCaseApiFp(configuration).duplicateOperationId2(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateOperationId3(options?: any): AxiosPromise<void> {
            return TestCaseApiFp(configuration).duplicateOperationId3(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestCasesNoOperationId(options?: any): AxiosPromise<void> {
            return TestCaseApiFp(configuration).getTestCasesNoOperationId(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} duplicateParam 
         * @param {string} duplicateParam2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCaseGetDuplicateParameters(duplicateParam: string, duplicateParam2: string, options?: any): AxiosPromise<void> {
            return TestCaseApiFp(configuration).testCaseGetDuplicateParameters(duplicateParam, duplicateParam2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} requiredPathItemQueryParam 
         * @param {string} requiredPathItemPathParam 
         * @param {string} requiredQueryParam 
         * @param {string} [optionalQueryParam] 
         * @param {string} [optionalPathItemQueryParam] Overrides original path item query parameter.
         * @param {SimpleTestEntity} [simpleTestEntity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCaseGetRequiredParameters(requiredPathItemQueryParam: string, requiredPathItemPathParam: string, requiredQueryParam: string, optionalQueryParam?: string, optionalPathItemQueryParam?: string, simpleTestEntity?: SimpleTestEntity, options?: any): AxiosPromise<void> {
            return TestCaseApiFp(configuration).testCaseGetRequiredParameters(requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, optionalQueryParam, optionalPathItemQueryParam, simpleTestEntity, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} requiredPathItemQueryParam 
         * @param {string} requiredPathItemPathParam 
         * @param {string} requiredQueryParam 
         * @param {SimpleTestEntity} simpleTestEntity 
         * @param {string} [optionalPathItemQueryParam] 
         * @param {string} [optionalQueryParam] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCasePostRequiredParameters(requiredPathItemQueryParam: string, requiredPathItemPathParam: string, requiredQueryParam: string, simpleTestEntity: SimpleTestEntity, optionalPathItemQueryParam?: string, optionalQueryParam?: string, options?: any): AxiosPromise<void> {
            return TestCaseApiFp(configuration).testCasePostRequiredParameters(requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, simpleTestEntity, optionalPathItemQueryParam, optionalQueryParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestCaseApi - object-oriented interface
 * @export
 * @class TestCaseApi
 * @extends {BaseAPI}
 */
export class TestCaseApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    public duplicateOperationId(options?: any) {
        return TestCaseApiFp(this.configuration).duplicateOperationId(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    public duplicateOperationId1(options?: any) {
        return TestCaseApiFp(this.configuration).duplicateOperationId1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    public duplicateOperationId2(options?: any) {
        return TestCaseApiFp(this.configuration).duplicateOperationId2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    public duplicateOperationId3(options?: any) {
        return TestCaseApiFp(this.configuration).duplicateOperationId3(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    public getTestCasesNoOperationId(options?: any) {
        return TestCaseApiFp(this.configuration).getTestCasesNoOperationId(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} duplicateParam 
     * @param {string} duplicateParam2 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    public testCaseGetDuplicateParameters(duplicateParam: string, duplicateParam2: string, options?: any) {
        return TestCaseApiFp(this.configuration).testCaseGetDuplicateParameters(duplicateParam, duplicateParam2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} requiredPathItemQueryParam 
     * @param {string} requiredPathItemPathParam 
     * @param {string} requiredQueryParam 
     * @param {string} [optionalQueryParam] 
     * @param {string} [optionalPathItemQueryParam] Overrides original path item query parameter.
     * @param {SimpleTestEntity} [simpleTestEntity] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    public testCaseGetRequiredParameters(requiredPathItemQueryParam: string, requiredPathItemPathParam: string, requiredQueryParam: string, optionalQueryParam?: string, optionalPathItemQueryParam?: string, simpleTestEntity?: SimpleTestEntity, options?: any) {
        return TestCaseApiFp(this.configuration).testCaseGetRequiredParameters(requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, optionalQueryParam, optionalPathItemQueryParam, simpleTestEntity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} requiredPathItemQueryParam 
     * @param {string} requiredPathItemPathParam 
     * @param {string} requiredQueryParam 
     * @param {SimpleTestEntity} simpleTestEntity 
     * @param {string} [optionalPathItemQueryParam] 
     * @param {string} [optionalQueryParam] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestCaseApi
     */
    public testCasePostRequiredParameters(requiredPathItemQueryParam: string, requiredPathItemPathParam: string, requiredQueryParam: string, simpleTestEntity: SimpleTestEntity, optionalPathItemQueryParam?: string, optionalQueryParam?: string, options?: any) {
        return TestCaseApiFp(this.configuration).testCasePostRequiredParameters(requiredPathItemQueryParam, requiredPathItemPathParam, requiredQueryParam, simpleTestEntity, optionalPathItemQueryParam, optionalQueryParam, options).then((request) => request(this.axios, this.basePath));
    }
}
