import {resolve, join, parse} from 'path';
import { promises } from 'fs';
import {
  codeBlock,
  createLogger,
  ErrorWithCause,
  unixEOL
} from '@sap-cloud-sdk/util';
import prettier, {BuiltInParserName, Options as PrettierOptions} from 'prettier';
import { getCopyrightHeader } from '../util';

const { writeFile, readFile } = promises;
const logger = createLogger('create-file');

/**
 * Options for the creation of a file.
 * @internal
 */
export interface CreateFileOptions {
  /**
   * Flag to indicate if the file is overwritten.
   */
  overwrite?: boolean;
  /**
   * Flag to indicate if copy write header is added.
   */
  withCopyright?: boolean;
  /**
   * Path to the prettier config with respect to the process.cwd().
   */
  prettierConfigPath?: string;
}

/**
 * @internal
 */
export const defaultPrettierConfig: PrettierOptions = {
  singleQuote: true,
  trailingComma: 'none',
  arrowParens: 'avoid',
  endOfLine: 'lf'
};

let prettierConfigCache: PrettierOptions | undefined;

/**
 * @internal
 */
export function clearPrettierConfigCache(): void {
  prettierConfigCache = undefined;
}

async function readPrettierConfig(
  prettierConfigPath: string | undefined
): Promise<PrettierOptions> {
  if (prettierConfigCache) {
    return prettierConfigCache;
  }

  if (prettierConfigPath) {
    const resolved = resolve(process.cwd(), prettierConfigPath);
    try {
      const config = await readFile(resolved, { encoding: 'utf-8' });
      prettierConfigCache = JSON.parse(config);
    } catch (e) {
      logger.warn(
        `Prettier config file not found: ${resolved} - default is used.`
      );
      prettierConfigCache = defaultPrettierConfig;
    }
  }

  return prettierConfigCache || defaultPrettierConfig;
}

const fileParserMap:Record<string,BuiltInParserName>= {
  '.ts':'typescript',
  '.md':'markdown',
  '.json': 'json',
  '.js' : 'espree',
  '.mdx' : 'mdx',
  '.yml' : 'yaml',
  '.yaml': 'yaml'
}


async function formatWithPrettier(
    fileName:string,
  content: string,
  prettierConfigPath: string | undefined
) {
  const prettierConfig = await readPrettierConfig(prettierConfigPath);
  const fileType = parse(fileName).ext.toLowerCase()
  const parser : BuiltInParserName | undefined = fileParserMap[fileType]

  if(parser){
    return prettier.format(content,{...prettierConfig,parser})
  }
  logger.info(`No prettier-parser configured for file ${fileName} - skip prettier.`)
  return content
}

function addCopyrightHeader(content: string, withCopyright: boolean): string {
  if (!withCopyright) {
    return content;
  }
  return (
    codeBlock`
${getCopyrightHeader()}
${content}
` + unixEOL
  );
}

/**
 * Write a file generated by the SAP Cloud SDK for JavaScript.
 * @param directoryPath - Path of the directory to write to.
 * @param fileName - Name of the file to write
 * @param content - Content to be written to the file. A copyright statement will be added to this.
 * @param overwrite - Whether or not existing files should be overwritten.
 * @param withCopyright - Whether the generated file contains the copyright information.
 * @internal
 */
export async function createFile(
  directoryPath: string,
  fileName: string,
  content: string,
  options?: CreateFileOptions
): Promise<void> {
  const {
    overwrite = false,
    withCopyright = true,
    prettierConfigPath = undefined
  } = options || {};
  try {
    let adjusted = addCopyrightHeader(content, withCopyright);
    adjusted = await formatWithPrettier(fileName,adjusted, prettierConfigPath);

    return await writeFile(join(directoryPath, fileName), adjusted, {
      encoding: 'utf8',
      flag: overwrite ? 'w' : 'wx'
    });
  } catch (err) {
    const recommendation =
      err.code === 'EEXIST' && !overwrite
        ? ' File already exists. If you want to allow overwriting files, enable the `overwrite` flag.'
        : '';
    throw new ErrorWithCause(
      `Could not write file "${fileName}".${recommendation}`,
      err
    );
  }
}
