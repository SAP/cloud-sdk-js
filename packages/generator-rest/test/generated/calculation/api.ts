// tslint:disable
/**
 * Calculation
 * You use the Calculation service for SAP Omnichannel Promotion Pricing in your sales channel application to determine the effective sales prices by applying promotional rules in the relevant customer context. The service can be called for a single product or for an entire shopping cart. The calculation is based on the data you uploaded to the cloud environment, and sends back prices and additional information about customer rewards to the calling application.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError
} from './base';

/**
 * Contains basic information for the request or the response.
 * @export
 * @interface ARTSCommonHeaderType
 */
export interface ARTSCommonHeaderType {
  /**
   *
   * @type {MessageID}
   * @memberof ARTSCommonHeaderType
   */
  MessageID: MessageID;
  /**
   * The date and time when the request was created. Although this is an array, only 1 entry is allowed.
   * @type {Array<HeaderDateTime>}
   * @memberof ARTSCommonHeaderType
   */
  DateTime?: Array<HeaderDateTime>;
  /**
   *
   * @type {Response}
   * @memberof ARTSCommonHeaderType
   */
  Response?: Response;
  /**
   * Identifies the agent which sent this message.
   * @type {string}
   * @memberof ARTSCommonHeaderType
   */
  Requestor?: string;
  /**
   * Business unit for which prices and promotions should be determined. Although this is an array, only 1 entry is allowed.
   * @type {Array<BusinessUnitCommonData>}
   * @memberof ARTSCommonHeaderType
   */
  BusinessUnit: Array<BusinessUnitCommonData>;
  /**
   *
   * @type {WorkstationIDCommonData}
   * @memberof ARTSCommonHeaderType
   */
  WorkstationID?: WorkstationIDCommonData;
  /**
   * Uppercase ISO code of the language in which language-dependent texts like a promotion description should be returned. Uppercase representation. RequestedLanguage is not applied in conjunction with RequestedMultiLanguage. If not set, any language found will be used with Client API version 1.0. As of Client API version 2.0, use RequestedMultiLanguage instead.
   * @type {string}
   * @memberof ARTSCommonHeaderType
   */
  RequestedLanguage?: string;
  /**
   * Uppercase ISO codes of the languages in which language dependent-texts like a promotion description should be returned. Not to be used in conjunction with RequestedLanguage. Requires at least API version 2.0. If not set, all languages found will be used.
   * @type {Array<string>}
   * @memberof ARTSCommonHeaderType
   */
  RequestedMultiLanguage?: Array<string>;
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof ARTSCommonHeaderType
   */
  any?: Array<object>;
  /**
   * Part of the compound key for items, item hierarchy nodes and business units. Each price record and each promotion refers to exactly one master data source system. Supported with Client API version 2.1 or higher. This field is required when using the cloud version of the price calculation.
   * @type {string}
   * @memberof ARTSCommonHeaderType
   */
  MasterDataSourceSystemID: string;
  /**
   * Describes what to do with the provided data.
   * @type {string}
   * @memberof ARTSCommonHeaderType
   */
  ActionCode: ARTSCommonHeaderTypeActionCodeEnum;
  /**
   * Defines whether this is a calculation request or a calculation response if the consumer only sends type \"Request\".
   * @type {string}
   * @memberof ARTSCommonHeaderType
   */
  MessageType: ARTSCommonHeaderTypeMessageTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum ARTSCommonHeaderTypeActionCodeEnum {
  Calculate = 'Calculate'
}
/**
 * @export
 * @enum {string}
 */
export enum ARTSCommonHeaderTypeMessageTypeEnum {
  Request = 'Request',
  Response = 'Response'
}

/**
 * Action to be performed for a monetary amount.
 * @export
 * @interface Amount
 */
export interface Amount {
  /**
   *
   * @type {number}
   * @memberof Amount
   */
  value?: number;
  /**
   * Uppercase currency is expected in uppercase ISO format.
   * @type {string}
   * @memberof Amount
   */
  Currency?: string;
  /**
   *
   * @type {string}
   * @memberof Amount
   */
  Action: AmountActionEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum AmountActionEnum {
  Add = 'Add',
  Subtract = 'Subtract'
}

/**
 * Monetary value plus currency.
 * @export
 * @interface AmountCommonData
 */
export interface AmountCommonData {
  /**
   *
   * @type {number}
   * @memberof AmountCommonData
   */
  value?: number;
  /**
   * Uppercase currency is expected in uppercase ISO format.
   * @type {string}
   * @memberof AmountCommonData
   */
  Currency?: string;
}
/**
 * Additional information for the consumer about issues during the price calculation.
 * @export
 * @interface BusinessError
 */
export interface BusinessError {
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof BusinessError
   */
  any?: Array<object>;
  /**
   * Can be used for client side checks. For a complete list of possible error codes see the Troubleshooting section in the service guide for SAP Omnichannel Promotion Pricing under https://help.sap.com/viewer/ace37badc0774b4a8e540fdc7f56a802/Cloud/en-US.
   * @type {string}
   * @memberof BusinessError
   */
  ErrorID?: string;
  /**
   *
   * @type {DescriptionCommonData}
   * @memberof BusinessError
   */
  Description?: DescriptionCommonData;
  /**
   * Issues with severity error or higher lead to an HTTP response code 400.
   * @type {string}
   * @memberof BusinessError
   */
  Severity?: BusinessErrorSeverityEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum BusinessErrorSeverityEnum {
  Information = 'Information',
  Warning = 'Warning',
  Error = 'Error'
}

/**
 * An entity for which prices or promotions are valid.
 * @export
 * @interface BusinessUnitCommonData
 */
export interface BusinessUnitCommonData {
  /**
   * Identifies the business unit in combination with business unit type and master data source system identifier.
   * @type {string}
   * @memberof BusinessUnitCommonData
   */
  value: string;
  /**
   * Specifies the type of a business unit. There may be several business units with the same identifier but different types. Default value is RetailStore.
   * @type {string}
   * @memberof BusinessUnitCommonData
   */
  TypeCode?: BusinessUnitCommonDataTypeCodeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum BusinessUnitCommonDataTypeCodeEnum {
  RetailStore = 'RetailStore',
  Customer = 'Customer',
  Factory = 'Factory',
  DistributionCenter = 'DistributionCenter',
  Vendor = 'Vendor'
}

/**
 * A flavor of a line item whereby customers purchase an unavailable item. The store places a special order on behalf of this purchase, and the item is to be delivered as soon as available. The customer may, or may not pay for the item at the time of the order placement.
 * @export
 * @interface CustomerOrderForDeliveryBase
 */
export interface CustomerOrderForDeliveryBase {
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof CustomerOrderForDeliveryBase
   */
  any?: Array<object>;
  /**
   * Although this is an array, only 1 entry is supported.
   * @type {Array<ItemID>}
   * @memberof CustomerOrderForDeliveryBase
   */
  ItemID?: Array<ItemID>;
  /**
   * For information purposes only. The relevant list of hierarchy nodes is expected on the level of LineItemDomainSpecific.
   * @type {Array<MerchandiseHierarchyCommonData>}
   * @memberof CustomerOrderForDeliveryBase
   */
  MerchandiseHierarchy?: Array<MerchandiseHierarchyCommonData>;
  /**
   *
   * @type {UnitPriceCommonData}
   * @memberof CustomerOrderForDeliveryBase
   */
  RegularSalesUnitPrice?: UnitPriceCommonData;
  /**
   *
   * @type {ExtendedAmountType}
   * @memberof CustomerOrderForDeliveryBase
   */
  ExtendedAmount?: ExtendedAmountType;
  /**
   *
   * @type {AmountCommonData}
   * @memberof CustomerOrderForDeliveryBase
   */
  ExtendedDiscountAmount?: AmountCommonData;
  /**
   * The quantity of this line item. Although this is an array, only 1 entry is allowed.
   * @type {Array<QuantityCommonData>}
   * @memberof CustomerOrderForDeliveryBase
   */
  Quantity?: Array<QuantityCommonData>;
  /**
   * The list of modifiers of the sales price triggered by applied price derivation rules.
   * @type {Array<RetailPriceModifierDomainSpecific>}
   * @memberof CustomerOrderForDeliveryBase
   */
  RetailPriceModifier?: Array<RetailPriceModifierDomainSpecific>;
  /**
   * Reserved for future use.
   * @type {Array<ItemLink>}
   * @memberof CustomerOrderForDeliveryBase
   */
  ItemLink?: Array<ItemLink>;
  /**
   * Reserved for future use.
   * @type {string}
   * @memberof CustomerOrderForDeliveryBase
   */
  ItemType?: CustomerOrderForDeliveryBaseItemTypeEnum;
  /**
   * Specifies whether this line item may be discounted or not. If set to true, the line item may still be used as an eligibility for promotions. However, such an item does not contribute to fulfill the amount or quantity threshold that is needed for a promotion to become effective.
   * @type {boolean}
   * @memberof CustomerOrderForDeliveryBase
   */
  NonDiscountableFlag?: boolean;
  /**
   * If set to true, the price calculation uses the provided value of RegularSalesUnitPrice as regular price and does not perform a price lookup for this line item.
   * @type {boolean}
   * @memberof CustomerOrderForDeliveryBase
   */
  FixedPriceFlag?: boolean;
  /**
   * Reserved for future use.
   * @type {boolean}
   * @memberof CustomerOrderForDeliveryBase
   */
  TaxIncludedInPriceFlag?: boolean;
  /**
   * Set this flag to true, if the specified quantity has a different dimension than \"piece\", for example, if fractional quantities are possible.
   * @type {boolean}
   * @memberof CustomerOrderForDeliveryBase
   */
  NonPieceGoodFlag?: boolean;
  /**
   * Set this flag to true if the corresponding line item is eligible for receiving loyalty points.
   * @type {boolean}
   * @memberof CustomerOrderForDeliveryBase
   */
  FrequentShopperPointsEligibilityFlag?: boolean;
  /**
   * Reserved for future use.
   * @type {string}
   * @memberof CustomerOrderForDeliveryBase
   */
  DiscountTypeCode?: string;
  /**
   * Reserved for future use. Value 00 corresponds to \"regular price\".
   * @type {string}
   * @memberof CustomerOrderForDeliveryBase
   */
  PriceTypeCode?: CustomerOrderForDeliveryBasePriceTypeCodeEnum;
  /**
   * Determines if the price calculation should consider the line item as a trigger. This information is needed if another process (e.g. a return regarding to an existing transaction) applies rules for the line item that should not be applied. Assuming that the line item is discountable in general, the line item does not trigger a line-item-releated price derivation rule, get discount or get bonus points, if you set this flag to true. However, it can do so for a transaction-related price derivation rule.
   * @type {boolean}
   * @memberof CustomerOrderForDeliveryBase
   */
  NotConsideredByPriceEngineFlag?: boolean;
  /**
   * The list of modifiers for loyalty points determined by applied price rules.
   * @type {Array<FrequentShopperPointsModifierType>}
   * @memberof CustomerOrderForDeliveryBase
   */
  FrequentShopperPointsModifier?: Array<FrequentShopperPointsModifierType>;
  /**
   * The list of promotions for which the corresponding line item contributed as an eligibility.
   * @type {Array<PromotionPriceDerivationRuleReferenceType>}
   * @memberof CustomerOrderForDeliveryBase
   */
  PromotionPriceDerivationRuleReference?: Array<
    PromotionPriceDerivationRuleReferenceType
  >;
  /**
   * Manual triggers created by the client in order to make the transaction eligible for promotions that contain eligibilities of type manual trigger.
   * @type {Array<PromotionManualTriggerType>}
   * @memberof CustomerOrderForDeliveryBase
   */
  PromotionManualTrigger?: Array<PromotionManualTriggerType>;
}

/**
 * @export
 * @enum {string}
 */
export enum CustomerOrderForDeliveryBaseItemTypeEnum {
  Stock = 'Stock',
  GiftCertificate = 'GiftCertificate'
}
/**
 * @export
 * @enum {string}
 */
export enum CustomerOrderForDeliveryBasePriceTypeCodeEnum {
  _00 = '00',
  _01 = '01'
}

/**
 * A flavor of a line item whereby customers purchase an unavailable item. The store places a special order on behalf of this purchase, and the customers pick up the item when available. The customer may, or may not pay for the item at the time of the order placement. CustomerOrderForPickup is currently not supported.
 * @export
 * @interface CustomerOrderForPickupBase
 */
export interface CustomerOrderForPickupBase {
  /**
   * Currently not supported.
   * @type {Array<object>}
   * @memberof CustomerOrderForPickupBase
   */
  any?: Array<object>;
  /**
   *
   * @type {Array<ItemID>}
   * @memberof CustomerOrderForPickupBase
   */
  ItemID?: Array<ItemID>;
  /**
   *
   * @type {Array<MerchandiseHierarchyCommonData>}
   * @memberof CustomerOrderForPickupBase
   */
  MerchandiseHierarchy?: Array<MerchandiseHierarchyCommonData>;
  /**
   *
   * @type {UnitPriceCommonData}
   * @memberof CustomerOrderForPickupBase
   */
  RegularSalesUnitPrice?: UnitPriceCommonData;
  /**
   *
   * @type {ExtendedAmountType}
   * @memberof CustomerOrderForPickupBase
   */
  ExtendedAmount?: ExtendedAmountType;
  /**
   *
   * @type {AmountCommonData}
   * @memberof CustomerOrderForPickupBase
   */
  ExtendedDiscountAmount?: AmountCommonData;
  /**
   *
   * @type {Array<QuantityCommonData>}
   * @memberof CustomerOrderForPickupBase
   */
  Quantity?: Array<QuantityCommonData>;
  /**
   *
   * @type {Array<RetailPriceModifierDomainSpecific>}
   * @memberof CustomerOrderForPickupBase
   */
  RetailPriceModifier?: Array<RetailPriceModifierDomainSpecific>;
  /**
   *
   * @type {Array<ItemLink>}
   * @memberof CustomerOrderForPickupBase
   */
  ItemLink?: Array<ItemLink>;
  /**
   *
   * @type {string}
   * @memberof CustomerOrderForPickupBase
   */
  ItemType?: string;
  /**
   *
   * @type {boolean}
   * @memberof CustomerOrderForPickupBase
   */
  NonDiscountableFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CustomerOrderForPickupBase
   */
  FixedPriceFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CustomerOrderForPickupBase
   */
  TaxIncludedInPriceFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CustomerOrderForPickupBase
   */
  NonPieceGoodFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CustomerOrderForPickupBase
   */
  FrequentShopperPointsEligibilityFlag?: boolean;
  /**
   *
   * @type {string}
   * @memberof CustomerOrderForPickupBase
   */
  DiscountTypeCode?: string;
  /**
   *
   * @type {string}
   * @memberof CustomerOrderForPickupBase
   */
  PriceTypeCode?: string;
  /**
   *
   * @type {boolean}
   * @memberof CustomerOrderForPickupBase
   */
  NotConsideredByPriceEngineFlag?: boolean;
  /**
   *
   * @type {Array<FrequentShopperPointsModifierType>}
   * @memberof CustomerOrderForPickupBase
   */
  FrequentShopperPointsModifier?: Array<FrequentShopperPointsModifierType>;
  /**
   *
   * @type {Array<PromotionPriceDerivationRuleReferenceType>}
   * @memberof CustomerOrderForPickupBase
   */
  PromotionPriceDerivationRuleReference?: Array<
    PromotionPriceDerivationRuleReferenceType
  >;
  /**
   *
   * @type {Array<PromotionManualTriggerType>}
   * @memberof CustomerOrderForPickupBase
   */
  PromotionManualTrigger?: Array<PromotionManualTriggerType>;
}
/**
 * When used as pricing date, time zones are not considered.
 * @export
 * @interface DateTimeCommonData
 */
export interface DateTimeCommonData {
  /**
   * In format yyyy-MM-dd HH:mm:ss.SSS
   * @type {string}
   * @memberof DateTimeCommonData
   */
  value?: string;
}
/**
 * Language-dependent description.
 * @export
 * @interface DescriptionCommonData
 */
export interface DescriptionCommonData {
  /**
   *
   * @type {string}
   * @memberof DescriptionCommonData
   */
  value?: string;
  /**
   * Provided in format ISO 639 as uppercase.
   * @type {string}
   * @memberof DescriptionCommonData
   */
  Language?: string;
}
/**
 * Generated during the price calculation as a separate line item.
 * @export
 * @interface DiscountBase
 */
export interface DiscountBase {
  /**
   * Although this is an array, onyl exactly 1 entry is suppored
   * @type {Array<PriceDerivationRuleBase>}
   * @memberof DiscountBase
   */
  PriceDerivationRule: Array<PriceDerivationRuleBase>;
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof DiscountBase
   */
  any?: Array<object>;
  /**
   * The sequence number for the trigger that allows more than one trigger to be assigned to a single RetailPriceModifier. It references the ManualTriggerSequenceNumber of PromotionManualTriggerType that triggered this price modifier.
   * @type {number}
   * @memberof DiscountBase
   */
  ManualTriggerSequenceNumber?: number;
  /**
   *
   * @type {AmountCommonData}
   * @memberof DiscountBase
   */
  ExtraAmount?: AmountCommonData;
  /**
   * Determines if this discount was created by an external system. If yes, it must not be changed, but its own modifications with higher sequence may be applied. Default value is false.
   * @type {boolean}
   * @memberof DiscountBase
   */
  ExternalSystemOriginatorFlag?: boolean;
  /**
   * Identifies this retail price modifier in the corresponding line item.
   * @type {number}
   * @memberof DiscountBase
   */
  SequenceNumber: number;
  /**
   *
   * @type {Amount}
   * @memberof DiscountBase
   */
  Amount?: Amount;
  /**
   *
   * @type {Percent}
   * @memberof DiscountBase
   */
  Percent?: Percent;
  /**
   *
   * @type {PreviousPrice}
   * @memberof DiscountBase
   */
  PreviousPrice?: PreviousPrice;
  /**
   *
   * @type {NewPrice}
   * @memberof DiscountBase
   */
  NewPrice?: NewPrice;
  /**
   *
   * @type {PromotionID}
   * @memberof DiscountBase
   */
  PromotionID?: PromotionID;
  /**
   * The link to the discount line item that triggered the creation of this RetailPriceModifier in order to keep the prorated transaction-related discount for the current line item. Is not used in the context of the modification of the price of a single line item (item-related discount). Although this is an array, it contains at most one entry.
   * @type {Array<number>}
   * @memberof DiscountBase
   */
  ItemLink?: Array<number>;
  /**
   *
   * @type {QuantityCommonData}
   * @memberof DiscountBase
   */
  Quantity?: QuantityCommonData;
  /**
   *
   * @type {RoundingCommonData}
   * @memberof DiscountBase
   */
  Rounding?: RoundingCommonData;
  /**
   *
   * @type {AmountCommonData}
   * @memberof DiscountBase
   */
  ComputationBaseAmount?: AmountCommonData;
  /**
   * Specifies whether the discount amount applies to the whole transaction or is prorated to the discountable line items of the transaction. Currently always true.
   * @type {boolean}
   * @memberof DiscountBase
   */
  ProratedFlag?: boolean;
}
/**
 * The total value of this line item, considering quantity and discounts.
 * @export
 * @interface ExtendedAmountType
 */
export interface ExtendedAmountType {
  /**
   *
   * @type {number}
   * @memberof ExtendedAmountType
   */
  value?: number;
  /**
   * Uppercase currency is expected in uppercase ISO format.
   * @type {string}
   * @memberof ExtendedAmountType
   */
  Currency?: string;
}
/**
 * Specifies the value of an external action parameter if the applied price derivation rule has type \"External Action\".
 * @export
 * @interface ExternalActionParameterType
 */
export interface ExternalActionParameterType {
  /**
   * The value as stored in the promotion master data.
   * @type {string}
   * @memberof ExternalActionParameterType
   */
  value?: string;
  /**
   * Identifier as stored in the promotion master data.
   * @type {string}
   * @memberof ExternalActionParameterType
   */
  ID: string;
}
/**
 * Specifies the value of an external action text if the applied price derivation rule has type \"External Action\".
 * @export
 * @interface ExternalActionTextType
 */
export interface ExternalActionTextType {
  /**
   *
   * @type {string}
   * @memberof ExternalActionTextType
   */
  value?: string;
  /**
   * Provided in format ISO 639 as uppercase.
   * @type {string}
   * @memberof ExternalActionTextType
   */
  Language?: string;
  /**
   * Identifies this text.
   * @type {string}
   * @memberof ExternalActionTextType
   */
  ID: string;
}
/**
 * Contains all information specified by a price derivation rule of type \"External Action\".
 * @export
 * @interface ExternalActionType
 */
export interface ExternalActionType {
  /**
   *
   * @type {Array<ExternalActionTextType>}
   * @memberof ExternalActionType
   */
  Text?: Array<ExternalActionTextType>;
  /**
   *
   * @type {Array<ExternalActionParameterType>}
   * @memberof ExternalActionType
   */
  Parameter?: Array<ExternalActionParameterType>;
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof ExternalActionType
   */
  any?: Array<object>;
  /**
   * Defines the external action.
   * @type {string}
   * @memberof ExternalActionType
   */
  ID: string;
}
/**
 * Information about changes to loyalty points triggered by applied price rules.
 * @export
 * @interface FrequentShopperPointsModifierType
 */
export interface FrequentShopperPointsModifierType {
  /**
   * Identifies the promotion that triggered the loyalty reward. Decimal representation of a 64 bit integer value.
   * @type {string}
   * @memberof FrequentShopperPointsModifierType
   */
  PromotionID: string;
  /**
   * The number of points awarded by the line item.
   * @type {Array<PointsAwarded>}
   * @memberof FrequentShopperPointsModifierType
   */
  PointsAwarded?: Array<PointsAwarded>;
  /**
   * The sequence number for the trigger to be assigned to a single LoyaltyReward. It references the ManualTriggerSequenceNumber of PromotionManualTriggerType that triggered this reward.
   * @type {number}
   * @memberof FrequentShopperPointsModifierType
   */
  ManualTriggerSequenceNumber?: number;
  /**
   *
   * @type {AmountCommonData}
   * @memberof FrequentShopperPointsModifierType
   */
  PointsAwardedAmount?: AmountCommonData;
  /**
   *
   * @type {AmountCommonData}
   * @memberof FrequentShopperPointsModifierType
   */
  ComputationBaseAmount?: AmountCommonData;
  /**
   * Determines if this LoyaltyReward was created by an external system. If yes, it must not be changed, but its own modifications with higher sequence may be applied.
   * @type {boolean}
   * @memberof FrequentShopperPointsModifierType
   */
  ExternalSystemOriginatorFlag?: boolean;
  /**
   *
   * @type {PriceDerivationRuleBase}
   * @memberof FrequentShopperPointsModifierType
   */
  PriceDerivationRule?: PriceDerivationRuleBase;
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof FrequentShopperPointsModifierType
   */
  any?: Array<object>;
  /**
   * Type code of the loyalty reward
   * @type {string}
   * @memberof FrequentShopperPointsModifierType
   */
  TypeCode?: FrequentShopperPointsModifierTypeTypeCodeEnum;
  /**
   * Identifies this loyalty points modifier in the current line item.
   * @type {number}
   * @memberof FrequentShopperPointsModifierType
   */
  SequenceNumber: number;
  /**
   * The line item quantity contributing to this modifier.
   * @type {number}
   * @memberof FrequentShopperPointsModifierType
   */
  AppliedQuantity?: number;
  /**
   * Link to the LoyaltyReward line item that forced the creation of this FrequentShopperPointsPriceModifier in order to keep the share of the prorated transaction-related points for the current line item. It is not used in the context of modifying points for a dedicated line item.
   * @type {number}
   * @memberof FrequentShopperPointsModifierType
   */
  ItemLink?: number;
}

/**
 * @export
 * @enum {string}
 */
export enum FrequentShopperPointsModifierTypeTypeCodeEnum {
  Award = 'Award'
}

/**
 * Defines the timestamp of the request or the response. It is not used as pricing date.
 * @export
 * @interface HeaderDateTime
 */
export interface HeaderDateTime {
  /**
   * In format yyyy-MM-dd HH:mm:ss.SSS
   * @type {string}
   * @memberof HeaderDateTime
   */
  value?: string;
}
/**
 * Meaning depends on the referencing field.
 * @export
 * @interface IDCommonData
 */
export interface IDCommonData {
  /**
   *
   * @type {string}
   * @memberof IDCommonData
   */
  value?: string;
}
/**
 * Identifes an item. Unique in combination with the master data source system identifier.
 * @export
 * @interface ItemID
 */
export interface ItemID {
  /**
   *
   * @type {string}
   * @memberof ItemID
   */
  value?: string;
}
/**
 * Sequence number of a line item that contains a linked reward. Usually, a transaction discount that is prorated to the other line items. In this case, the line item with the transaction discount includes links to the line items that receive a prorated share of this discount. Vice versa, the receiving line items include an link to the discount line item from which they received a prorated discount.
 * @export
 * @interface ItemLink
 */
export interface ItemLink {
  /**
   *
   * @type {number}
   * @memberof ItemLink
   */
  value?: number;
}
/**
 * Depending on the type of the line item, one of the contained elements like Sales, SaleForDelivery must be filled.
 * @export
 * @interface LineItemDomainSpecific
 */
export interface LineItemDomainSpecific {
  /**
   * This is currently not supported
   * @type {object}
   * @memberof LineItemDomainSpecific
   */
  any?: object;
  /**
   *
   * @type {SaleBase}
   * @memberof LineItemDomainSpecific
   */
  Sale?: SaleBase;
  /**
   *
   * @type {SaleForDeliveryBase}
   * @memberof LineItemDomainSpecific
   */
  SaleForDelivery?: SaleForDeliveryBase;
  /**
   *
   * @type {SaleForPickupBase}
   * @memberof LineItemDomainSpecific
   */
  SaleForPickup?: SaleForPickupBase;
  /**
   *
   * @type {ReturnBase}
   * @memberof LineItemDomainSpecific
   */
  Return?: ReturnBase;
  /**
   *
   * @type {ReturnForDeliveryBase}
   * @memberof LineItemDomainSpecific
   */
  ReturnForDelivery?: ReturnForDeliveryBase;
  /**
   *
   * @type {ReturnForPickupBase}
   * @memberof LineItemDomainSpecific
   */
  ReturnForPickup?: ReturnForPickupBase;
  /**
   *
   * @type {CustomerOrderForDeliveryBase}
   * @memberof LineItemDomainSpecific
   */
  CustomerOrderForDelivery?: CustomerOrderForDeliveryBase;
  /**
   *
   * @type {CustomerOrderForPickupBase}
   * @memberof LineItemDomainSpecific
   */
  CustomerOrderForPickup?: CustomerOrderForPickupBase;
  /**
   *
   * @type {DiscountBase}
   * @memberof LineItemDomainSpecific
   */
  Discount?: DiscountBase;
  /**
   *
   * @type {LoyaltyRewardBase}
   * @memberof LineItemDomainSpecific
   */
  LoyaltyReward?: LoyaltyRewardBase;
  /**
   *
   * @type {TenderCouponBase}
   * @memberof LineItemDomainSpecific
   */
  Coupon?: TenderCouponBase;
  /**
   *
   * @type {PromotionManualTriggerType}
   * @memberof LineItemDomainSpecific
   */
  PromotionManualTrigger?: PromotionManualTriggerType;
  /**
   *
   * @type {PromotionExternalTriggerType}
   * @memberof LineItemDomainSpecific
   */
  PromotionExternalTrigger?: PromotionExternalTriggerType;
  /**
   * Identifies the line item. Although this is an array, exactly 1 entry is required.
   * @type {Array<number>}
   * @memberof LineItemDomainSpecific
   */
  SequenceNumber?: Array<number>;
  /**
   * This information is taken for checking eligibilities on item hierarchy level.
   * @type {Array<MerchandiseHierarchyCommonData>}
   * @memberof LineItemDomainSpecific
   */
  MerchandiseHierarchy?: Array<MerchandiseHierarchyCommonData>;
}
/**
 *
 * @export
 * @interface LoyaltyAccountCommonData
 */
export interface LoyaltyAccountCommonData {
  /**
   * Identifies the customer of the loyalty account. Must be set, but currently the value is not used.
   * @type {string}
   * @memberof LoyaltyAccountCommonData
   */
  CustomerID?: string;
  /**
   * List of loyalty programs to which this customer is assigned for this loyalty account.
   * @type {Array<LoyaltyAccountType>}
   * @memberof LoyaltyAccountCommonData
   */
  LoyaltyProgram?: Array<LoyaltyAccountType>;
  /**
   * Indicates if the specified customer is also an employee. Currently not used.
   * @type {boolean}
   * @memberof LoyaltyAccountCommonData
   */
  CustomerIsEmployeeFlag?: boolean;
}
/**
 *
 * @export
 * @interface LoyaltyAccountType
 */
export interface LoyaltyAccountType {
  /**
   * List
   * @type {Array<LoyaltyProgramIDType>}
   * @memberof LoyaltyAccountType
   */
  LoyaltyProgramID?: Array<LoyaltyProgramIDType>;
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof LoyaltyAccountType
   */
  any?: Array<object>;
}
/**
 * Corresponds to a customer group identifer of a customer group eligibility.
 * @export
 * @interface LoyaltyProgramIDType
 */
export interface LoyaltyProgramIDType {
  /**
   *
   * @type {string}
   * @memberof LoyaltyProgramIDType
   */
  value?: string;
}
/**
 * Loyalty reward on transaction level for the customercrediting. The crediting of a customer loyalty account with points is the only supported for reward type.
 * @export
 * @interface LoyaltyRewardBase
 */
export interface LoyaltyRewardBase {
  /**
   * Identifies the promotion that triggered the loyalty reward. Decimal representation of a 64 bit integer value.
   * @type {string}
   * @memberof LoyaltyRewardBase
   */
  PromotionID: string;
  /**
   * The number of points awarded by the line item.
   * @type {Array<PointsAwarded>}
   * @memberof LoyaltyRewardBase
   */
  PointsAwarded?: Array<PointsAwarded>;
  /**
   * The sequence number for the trigger to be assigned to a single LoyaltyReward. It references the ManualTriggerSequenceNumber of PromotionManualTriggerType that triggered this reward.
   * @type {number}
   * @memberof LoyaltyRewardBase
   */
  ManualTriggerSequenceNumber?: number;
  /**
   *
   * @type {AmountCommonData}
   * @memberof LoyaltyRewardBase
   */
  PointsAwardedAmount?: AmountCommonData;
  /**
   *
   * @type {AmountCommonData}
   * @memberof LoyaltyRewardBase
   */
  ComputationBaseAmount?: AmountCommonData;
  /**
   * Determines if this LoyaltyReward was created by an external system. If yes, it must not be changed, but its own modifications with higher sequence may be applied.
   * @type {boolean}
   * @memberof LoyaltyRewardBase
   */
  ExternalSystemOriginatorFlag?: boolean;
  /**
   *
   * @type {PriceDerivationRuleBase}
   * @memberof LoyaltyRewardBase
   */
  PriceDerivationRule?: PriceDerivationRuleBase;
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof LoyaltyRewardBase
   */
  any?: Array<object>;
  /**
   * Type code of the loyalty reward
   * @type {string}
   * @memberof LoyaltyRewardBase
   */
  TypeCode?: LoyaltyRewardBaseTypeCodeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum LoyaltyRewardBaseTypeCodeEnum {
  Award = 'Award'
}

/**
 * Unique in combination with the master data source system ID.
 * @export
 * @interface MerchandiseHierarchyCommonData
 */
export interface MerchandiseHierarchyCommonData {
  /**
   * Requires ID field to be unique.
   * @type {string}
   * @memberof MerchandiseHierarchyCommonData
   */
  value?: string;
  /**
   * Several hierarchies may exist in parallel. In one request, at the most 2 different hierarchy identifiers can be specified.
   * @type {string}
   * @memberof MerchandiseHierarchyCommonData
   */
  ID?: string;
}
/**
 * Defines a price calculation message.
 * @export
 * @interface MessageID
 */
export interface MessageID {
  /**
   *
   * @type {string}
   * @memberof MessageID
   */
  value?: string;
}
/**
 * Monetary Amount
 * @export
 * @interface MonetaryAmountCommonData
 */
export interface MonetaryAmountCommonData {
  /**
   *
   * @type {number}
   * @memberof MonetaryAmountCommonData
   */
  value?: number;
  /**
   * Uppercase currency is expected in uppercase ISO format.
   * @type {string}
   * @memberof MonetaryAmountCommonData
   */
  Currency?: string;
}
/**
 * The price of the line item after the price derivation rule was applied.
 * @export
 * @interface NewPrice
 */
export interface NewPrice {
  /**
   *
   * @type {number}
   * @memberof NewPrice
   */
  value?: number;
  /**
   * Uppercase currency is expected in uppercase ISO format.
   * @type {string}
   * @memberof NewPrice
   */
  Currency?: string;
}
/**
 * Percentage discount and the action how it was applied.
 * @export
 * @interface Percent
 */
export interface Percent {
  /**
   * The value that is, for example, used for a percentage discount. It has to be a positive number.
   * @type {number}
   * @memberof Percent
   */
  value?: number;
  /**
   * Specifies whether the percentage was added or subtracted.
   * @type {string}
   * @memberof Percent
   */
  Action: PercentActionEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum PercentActionEnum {
  Add = 'Add',
  Subtract = 'Subtract'
}

/**
 * Specifies how many points were used by the price derivation rule.
 * @export
 * @interface PointsAwarded
 */
export interface PointsAwarded {
  /**
   * Number of points
   * @type {number}
   * @memberof PointsAwarded
   */
  value?: number;
  /**
   * Specifies whether the points were earned or something else.
   * @type {string}
   * @memberof PointsAwarded
   */
  Type?: PointsAwardedTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum PointsAwardedTypeEnum {
  PointsEarned = 'PointsEarned'
}

/**
 * The price of the line item before the price derivation rule was applied.
 * @export
 * @interface PreviousPrice
 */
export interface PreviousPrice {
  /**
   *
   * @type {number}
   * @memberof PreviousPrice
   */
  value?: number;
  /**
   * Uppercase currency is expected in uppercase ISO format.
   * @type {string}
   * @memberof PreviousPrice
   */
  Currency?: string;
}
/**
 * Request sent by the client. Contains all relevant information for the price calculation.
 * @export
 * @interface PriceCalculate
 */
export interface PriceCalculate {
  /**
   *
   * @type {ARTSCommonHeaderType}
   * @memberof PriceCalculate
   */
  ARTSHeader: ARTSCommonHeaderType;
  /**
   * Contains the items for which a price calculation should be performed and additional information about how it is performed.
   * @type {Array<PriceCalculateBase>}
   * @memberof PriceCalculate
   */
  PriceCalculateBody: Array<PriceCalculateBase>;
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof PriceCalculate
   */
  any?: Array<object>;
  /**
   * Major version of the Client API version to be used. For Client API version X.Y, this field corresponds to the X part. Currently allowed versions of the Client API are 1.0, 2.0, 2.1. and 3.0. In a cloud environment, only version 2.1 or higher may be used.
   * @type {number}
   * @memberof PriceCalculate
   */
  InternalMajorVersion: number;
  /**
   * Minor version of the Client API version to be used. For Client API version X.Y, this field corresponds to the Y part.
   * @type {number}
   * @memberof PriceCalculate
   */
  InternalMinorVersion?: number;
}
/**
 * Contains relevant information for the price calculation like the items, date and time, and more.
 * @export
 * @interface PriceCalculateBase
 */
export interface PriceCalculateBase {
  /**
   *
   * @type {IDCommonData}
   * @memberof PriceCalculateBase
   */
  TransactionID?: IDCommonData;
  /**
   *
   * @type {DateTimeCommonData}
   * @memberof PriceCalculateBase
   */
  DateTime?: DateTimeCommonData;
  /**
   * Refers to the end customer.
   * @type {Array<LoyaltyAccountCommonData>}
   * @memberof PriceCalculateBase
   */
  Loyalty?: Array<LoyaltyAccountCommonData>;
  /**
   *
   * @type {ShoppingBasketBase}
   * @memberof PriceCalculateBase
   */
  ShoppingBasket: ShoppingBasketBase;
  /**
   *
   * @type {RoundingRuleType}
   * @memberof PriceCalculateBase
   */
  RegularSalesUnitPriceRoundingRule?: RoundingRuleType;
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof PriceCalculateBase
   */
  any?: Array<object>;
  /**
   * Indicates whether in this transaction items are sold or returned.
   * @type {string}
   * @memberof PriceCalculateBase
   */
  TransactionType?: PriceCalculateBaseTransactionTypeEnum;
  /**
   * If set to true, the net regular prices are used for the price calculation. Otherwise, the gross prices are considered.
   * @type {boolean}
   * @memberof PriceCalculateBase
   */
  NetPriceFlag: boolean;
  /**
   * Controls if the items of the ShoppingBasket element are considered as part of a shared basket (\"Basket\") or if they are treated as separate items (\"LineItem\"). If not specified, \"Basket\" is used as default.
   * @type {string}
   * @memberof PriceCalculateBase
   */
  CalculationMode?: PriceCalculateBaseCalculationModeEnum;
  /**
   * Controls which price derivation rules are used for the price calculation. This is defined by the transaction control break code/price rule control code and the point in time for the application of price derivation rules (immediately or after subtotal).  For the calculation scheme type “CalcAll”, all transaction control break codes/price rule control codes can be applied (PC, PO, SP, SU). For the calculation scheme type \"CalcForItem\", only rules with transaction control break code/price rule control code PO and SP can be applied. If not specified, \"CalcAll\" is used as default. The calculation scheme is available as of version 4.0.
   * @type {string}
   * @memberof PriceCalculateBase
   */
  CalculationScheme?: PriceCalculateBaseCalculationSchemeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum PriceCalculateBaseTransactionTypeEnum {
  SaleTransaction = 'SaleTransaction'
}
/**
 * @export
 * @enum {string}
 */
export enum PriceCalculateBaseCalculationModeEnum {
  Basket = 'Basket',
  LineItem = 'LineItem'
}
/**
 * @export
 * @enum {string}
 */
export enum PriceCalculateBaseCalculationSchemeEnum {
  CalcAll = 'CalcAll',
  CalcForItem = 'CalcForItem'
}

/**
 * Contains the response of the price calculation returned by the server.
 * @export
 * @interface PriceCalculateResponse
 */
export interface PriceCalculateResponse {
  /**
   *
   * @type {ARTSCommonHeaderType}
   * @memberof PriceCalculateResponse
   */
  ARTSHeader?: ARTSCommonHeaderType;
  /**
   * Contains the items for which a price calculation should be performed and additional information about how the it is performed.
   * @type {Array<PriceCalculateBase>}
   * @memberof PriceCalculateResponse
   */
  PriceCalculateBody?: Array<PriceCalculateBase>;
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof PriceCalculateResponse
   */
  any?: Array<object>;
  /**
   * The same value as contained in the request.
   * @type {number}
   * @memberof PriceCalculateResponse
   */
  InternalMajorVersion: number;
  /**
   * The same value as contained in the request.
   * @type {number}
   * @memberof PriceCalculateResponse
   */
  InternalMinorVersion?: number;
}
/**
 * Contains information of an applied price derivation rule.
 * @export
 * @interface PriceDerivationRuleBase
 */
export interface PriceDerivationRuleBase {
  /**
   * Identifies the price derivation rule. Decimal representation of a 64 bit integer value
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  PriceDerivationRuleID: string;
  /**
   * Only relevant for of coupon eligibilities. Each coupon that is used results in a separate eligibility element.
   * @type {Array<PriceDerivationRuleEligibility>}
   * @memberof PriceDerivationRuleBase
   */
  Eligibility?: Array<PriceDerivationRuleEligibility>;
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof PriceDerivationRuleBase
   */
  any?: Array<object>;
  /**
   * Exists for compatibility reasons with earlier versions of the Client API (1.0). As of Client API 2.0, use PromotionDescriptionMultiLanguage instead of PromotionDescription.
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  PromotionDescription?: string;
  /**
   * Promotion descriptions in the languages requested by the client via RequestedMultiLanguage in the ARTSHeader. Only provided with Client API version 2.0 or higher.
   * @type {Array<DescriptionCommonData>}
   * @memberof PriceDerivationRuleBase
   */
  PromotionDescriptionMultiLanguage?: Array<DescriptionCommonData>;
  /**
   * This is specified in the promotion master data and controls in which order rules are applied. Line-item-related price derivation rules and transaction-related price derivation rules are treated independently (all line-item-related promotions are applied first).
   * @type {number}
   * @memberof PriceDerivationRuleBase
   */
  PromotionPriceDerivationRuleSequence?: number;
  /**
   * This is specified in the promotion master data and controls which rule is applied if several rules have the same sequence value. If there are price derivation rules with an identical sequence number and identical highest resolution, the service tries to perform a best-price calculation. It is not guaranteed that this will succeed.
   * @type {number}
   * @memberof PriceDerivationRuleBase
   */
  PromotionPriceDerivationRuleResolution?: number;
  /**
   * Holds the condition type if this promotion discount should be mapped into an SAP ERP or SAP S/4 HANA condition record.
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  PromotionPriceDerivationRuleTypeCode?: string;
  /**
   * Indicates whether this is a line-item-related price derivation rule (PO/PC) or a transaction-related price derivation rule (SU/SP).
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  TransactionControlBreakCode?: PriceDerivationRuleBaseTransactionControlBreakCodeEnum;
  /**
   * Reserved for future use.
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  PriceDerivationRuleDescription?: string;
  /**
   * Contains information about the origin of the promotion as specifed in the promotion master data.
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  PromotionOriginatorTypeCode?: string;
  /**
   * The total quantity that needs to be purchased in order to trigger the price derivation rule.
   * @type {number}
   * @memberof PriceDerivationRuleBase
   */
  TriggerQuantity?: number;
  /**
   * Determines how the discount impacts the calculation of the transaction. Possible values are: 00 - The discount reduces the transaction total. 01 - The discount does not influence the transaction total or the amount that the customer has to pay. However, the customer gets a gift certificate for the discount amount that he can use to pay for the next purchase. 02 - The discount is used as a tender for the current transaction, for example it reduces the remaining amount that the customer has to pay. 03 - The discount reduces the transaction total but is counterbalanced by some gift certificate sale. 04 - A coupon is given to the customer instead of a discount. Transaction total is not reduced.
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  DiscountMethodCode?: string;
  /**
   * Determines whether a discount (false) or loyalty points (true) are granted by the price derivation rule
   * @type {boolean}
   * @memberof PriceDerivationRuleBase
   */
  FrequentShopperPointsFlag?: boolean;
  /**
   * Reserved for future use.
   * @type {number}
   * @memberof PriceDerivationRuleBase
   */
  CustomerGroupLoyaltyPointsDefaultQuantity?: number;
  /**
   * Determines if the result of the applied price derivation rule is to be suppressed on displays and accordingly not printed on the receipt. If this element is missing in the request, the default value is set to false and the applied price derivation is printed on the receipt.
   * @type {boolean}
   * @memberof PriceDerivationRuleBase
   */
  ProhibitPrintFlag?: boolean;
  /**
   * Type code of the tender. This value is needed only for DiscountMethodCode = 02.
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  TenderTypeCode?: string;
  /**
   *
   * @type {AmountCommonData}
   * @memberof PriceDerivationRuleBase
   */
  PointsConversionAmount?: AmountCommonData;
  /**
   * Determines whether applying this price derivation rule influences the calculation base of subsequent price derivation rules (false) or not (true). This is only relevant for line-item-related monetary price derivation rules.
   * @type {boolean}
   * @memberof PriceDerivationRuleBase
   */
  NoEffectOnSubsequentPriceDerivationRulesFlag?: boolean;
  /**
   * Determines whether applying this price derivation rule influences the calculation base of subsequent transaction-related price derivation rules (false) or not (true). This is only relevant for line-item-related monetary price derivation rules.
   * @type {boolean}
   * @memberof PriceDerivationRuleBase
   */
  ProhibitTransactionRelatedPriceDerivationRulesFlag?: boolean;
  /**
   * Determines whether this price derivation rule is an exclusive one. This impacts the application of further price derivation rules with a higher sequence.
   * @type {boolean}
   * @memberof PriceDerivationRuleBase
   */
  ExclusiveFlag?: boolean;
  /**
   * This is currently not supported.
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  ConcurrenceControlVector?: string;
  /**
   * Describes how often the current price derivation rule was applied.
   * @type {number}
   * @memberof PriceDerivationRuleBase
   */
  AppliedCount?: number;
  /**
   * Exists for compatibility reasons with earlier versions of the Client API (1.0). As of Client API 2.0, use ReceiptLineMultiLanguage instead of ReceiptLine.
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  ReceiptLine?: string;
  /**
   * The texts to be printed on the receipt in the languages requested by the client via RequestedMultiLanguage in the ARTSHeader. Only provided with Client API version 2.0 or higher.
   * @type {Array<DescriptionCommonData>}
   * @memberof PriceDerivationRuleBase
   */
  ReceiptLineMultiLanguage?: Array<DescriptionCommonData>;
  /**
   * Identifies an external promotion that was the origin for the corresponding OPP promotion.
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  ExternalPromotionID?: string;
  /**
   * Decimal representation of a 64 bit integer value. Not used.
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  ExternalPriceDerivationRuleID?: string;
  /**
   * The coupon number of the printout coupon. Only relevant for DiscountMethodCode = 04.
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  CouponPrintoutID?: string;
  /**
   * Describes how the printout of the coupon is to be done. Only relevant for DiscountMethodCode = 04. Possible values are: 00 - A separate receipt is to be printed. 01 - The coupon is to be printed at the end of the receipt of the current transaction.
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  CouponPrintoutRule?: string;
  /**
   * The (formatted) text to be printed. Only relevant for DiscountMethodCode = 04.
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  CouponPrintoutText?: string;
  /**
   * Describes for how many days the coupon will be valid. Only relevant for DiscountMethodCode = 04.
   * @type {number}
   * @memberof PriceDerivationRuleBase
   */
  PrintoutValidityPeriod?: number;
  /**
   * Reserved for future use.
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  GiftCertificateExpirationDate?: string;
  /**
   *
   * @type {ExternalActionType}
   * @memberof PriceDerivationRuleBase
   */
  ExternalAction?: ExternalActionType;
  /**
   * Texts shown to the operator in the languages requested by the client via RequestedMultiLanguage in the ARTSHeader. Only provided with Client API version 2.0 or higher.
   * @type {Array<DescriptionCommonData>}
   * @memberof PriceDerivationRuleBase
   */
  OperatorDisplayText?: Array<DescriptionCommonData>;
  /**
   * Texts shown to the customer in the languages requested by the client via RequestedMultiLanguage in the ARTSHeader. Only provided with Client API version 2.0 or higher.
   * @type {Array<DescriptionCommonData>}
   * @memberof PriceDerivationRuleBase
   */
  CustomerDisplayText?: Array<DescriptionCommonData>;
  /**
   * Can be used to control further processing on client side. Only provided with Client API version 2.0 or higher.
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  PromotionType?: string;
  /**
   * The sequence value of the price derivation rule of which the result is taken as the basis for this price derivation rule. Only provided with Client API version 2.0 or higher. The type of this element is a string although its content has a numeric value. It could also contain a negative value. In that case the corresponding sign is reflected as a postfix. For example value  \"-1\" is reflected in this element by type string as follows: \"1-\".
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  CalculationBaseSequence?: string;
  /**
   * Describes the type of the applied price derivation rule.
   * @type {string}
   * @memberof PriceDerivationRuleBase
   */
  ApplicationType?: PriceDerivationRuleBaseApplicationTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum PriceDerivationRuleBaseTransactionControlBreakCodeEnum {
  PO = 'PO',
  SU = 'SU',
  PC = 'PC',
  SP = 'SP'
}
/**
 * @export
 * @enum {string}
 */
export enum PriceDerivationRuleBaseApplicationTypeEnum {
  FixedPrice = 'FixedPrice',
  FixPriceTotal = 'FixPriceTotal',
  DiscountSingle = 'DiscountSingle',
  DiscountTotal = 'DiscountTotal',
  DiscountPercent = 'DiscountPercent',
  DiscountPercentTotal = 'DiscountPercentTotal',
  SetPriceTotal = 'SetPriceTotal',
  MixMatch = 'MixMatch',
  ExternalAction = 'ExternalAction',
  Manual = 'Manual'
}

/**
 * Contains information about the consumed eligibility if this was a coupon eligibility.
 * @export
 * @interface PriceDerivationRuleEligibility
 */
export interface PriceDerivationRuleEligibility {
  /**
   * Contains the coupon code for a coupon eligibility.
   * @type {string}
   * @memberof PriceDerivationRuleEligibility
   */
  ReferenceID?: string;
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof PriceDerivationRuleEligibility
   */
  any?: Array<object>;
  /**
   * The sequence number of the line item containing the coupon for a coupon eligibility.
   * @type {number}
   * @memberof PriceDerivationRuleEligibility
   */
  ReferenceSequenceNumber?: number;
  /**
   *
   * @type {string}
   * @memberof PriceDerivationRuleEligibility
   */
  Type: PriceDerivationRuleEligibilityTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum PriceDerivationRuleEligibilityTypeEnum {
  StoreCoupon = 'StoreCoupon'
}

/**
 * Reserved for future use.
 * @export
 * @interface PromotionExternalTriggerType
 */
export interface PromotionExternalTriggerType {
  /**
   *
   * @type {string}
   * @memberof PromotionExternalTriggerType
   */
  ExternalTriggerType: string;
  /**
   *
   * @type {AmountCommonData}
   * @memberof PromotionExternalTriggerType
   */
  ExternalTriggerAmount: AmountCommonData;
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof PromotionExternalTriggerType
   */
  any?: Array<object>;
}
/**
 * Identifies a promotion. Decimal representation of a 64 bit integer value
 * @export
 * @interface PromotionID
 */
export interface PromotionID {
  /**
   *
   * @type {string}
   * @memberof PromotionID
   */
  value?: string;
}
/**
 * Information provided by the client for a manual promotion that is to be calculated. Contains eligibility relevant information and protentially also the specification of a discount (depending on the privilege type).
 * @export
 * @interface PromotionManualTriggerType
 */
export interface PromotionManualTriggerType {
  /**
   * Identifies the manual trigger per line item. Must be a positive small integer.
   * @type {number}
   * @memberof PromotionManualTriggerType
   */
  ManualTriggerSequenceNumber: number;
  /**
   * Type of the manual trigger as defined in the promotion master data. This type is to be set by the client and used to determine relevant promotions.
   * @type {string}
   * @memberof PromotionManualTriggerType
   */
  ManualTriggerType: string;
  /**
   * Value for the manual trigger as defined in the promotion master data. This value is to be set by the client and used to determine relevant promotions.
   * @type {string}
   * @memberof PromotionManualTriggerType
   */
  ManualTriggerValue: string;
  /**
   * Specifies the type of the price adjustment. Valid values are: Absolute discount (RS), percentage discount (RP), new price (PS) or the reduction specified in the promotion master data (AM).
   * @type {string}
   * @memberof PromotionManualTriggerType
   */
  PrivilegeType: PromotionManualTriggerTypePrivilegeTypeEnum;
  /**
   *
   * @type {AmountCommonData}
   * @memberof PromotionManualTriggerType
   */
  PrivilegeValue: AmountCommonData;
  /**
   * A value that is to be added to the sequence of the promotion price derivation rule. This allows to apply multiple manual discounts with the same price derivation rule.
   * @type {number}
   * @memberof PromotionManualTriggerType
   */
  ManualTriggerSequenceAddend: number;
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof PromotionManualTriggerType
   */
  any?: Array<object>;
}

/**
 * @export
 * @enum {string}
 */
export enum PromotionManualTriggerTypePrivilegeTypeEnum {
  AM = 'AM',
  RS = 'RS',
  RP = 'RP',
  PS = 'PS'
}

/**
 * Specifies the price derivation rule to which a line item contributed to.
 * @export
 * @interface PromotionPriceDerivationRuleReferenceType
 */
export interface PromotionPriceDerivationRuleReferenceType {
  /**
   * Identifies a promotion. Positive number.
   * @type {string}
   * @memberof PromotionPriceDerivationRuleReferenceType
   */
  PromotionID: string;
  /**
   * Identifies a price derivation rule. Decimal representation of a 64 bit integer value.
   * @type {string}
   * @memberof PromotionPriceDerivationRuleReferenceType
   */
  PriceDerivationRuleID: string;
  /**
   * The quantity relevant for the applied price derivation rule.
   * @type {number}
   * @memberof PromotionPriceDerivationRuleReferenceType
   */
  ReferenceQuantity: number;
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof PromotionPriceDerivationRuleReferenceType
   */
  any?: Array<object>;
}
/**
 *
 * @export
 * @interface QuantityCommonData
 */
export interface QuantityCommonData {
  /**
   * Must be an integer. The overall quantity is the product of value and units.
   * @type {number}
   * @memberof QuantityCommonData
   */
  value?: number;
  /**
   * May be fractional. Set this to one for piece like items. The overall quantity is the product of value and units.
   * @type {number}
   * @memberof QuantityCommonData
   */
  Units?: number;
  /**
   * Must match with the information specified in the promotions and regular prices. No conversion of unit of measures is done. Uppercase format.
   * @type {string}
   * @memberof QuantityCommonData
   */
  UnitOfMeasureCode?: string;
}
/**
 * Holds response specific information of an ARTSHeader.
 * @export
 * @interface Response
 */
export interface Response {
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof Response
   */
  any?: Array<object>;
  /**
   * Identfier of the request to which this response relates.
   * @type {string}
   * @memberof Response
   */
  RequestID: string;
  /**
   * Timestamp of the request to which this response relates.
   * @type {string}
   * @memberof Response
   */
  ResponseTimestamp?: string;
  /**
   * The list of business errors created during the processing of the corresponding request.
   * @type {Array<BusinessError>}
   * @memberof Response
   */
  BusinessError?: Array<BusinessError>;
  /**
   * Indicates if the message was successful (OK) or not (Rejected).
   * @type {string}
   * @memberof Response
   */
  ResponseCode?: ResponseResponseCodeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum ResponseResponseCodeEnum {
  Rejected = 'Rejected',
  OK = 'OK'
}

/**
 * Contains information about the modification of a sales prices resulting from an applied promotion.
 * @export
 * @interface RetailPriceModifierDomainSpecific
 */
export interface RetailPriceModifierDomainSpecific {
  /**
   * Although this is an array, onyl exactly 1 entry is suppored
   * @type {Array<PriceDerivationRuleBase>}
   * @memberof RetailPriceModifierDomainSpecific
   */
  PriceDerivationRule: Array<PriceDerivationRuleBase>;
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof RetailPriceModifierDomainSpecific
   */
  any?: Array<object>;
  /**
   * The sequence number for the trigger that allows more than one trigger to be assigned to a single RetailPriceModifier. It references the ManualTriggerSequenceNumber of PromotionManualTriggerType that triggered this price modifier.
   * @type {number}
   * @memberof RetailPriceModifierDomainSpecific
   */
  ManualTriggerSequenceNumber?: number;
  /**
   *
   * @type {AmountCommonData}
   * @memberof RetailPriceModifierDomainSpecific
   */
  ExtraAmount?: AmountCommonData;
  /**
   * Determines if this discount was created by an external system. If yes, it must not be changed, but its own modifications with higher sequence may be applied. Default value is false.
   * @type {boolean}
   * @memberof RetailPriceModifierDomainSpecific
   */
  ExternalSystemOriginatorFlag?: boolean;
  /**
   * Identifies this retail price modifier in the corresponding line item.
   * @type {number}
   * @memberof RetailPriceModifierDomainSpecific
   */
  SequenceNumber: number;
  /**
   *
   * @type {Amount}
   * @memberof RetailPriceModifierDomainSpecific
   */
  Amount?: Amount;
  /**
   *
   * @type {Percent}
   * @memberof RetailPriceModifierDomainSpecific
   */
  Percent?: Percent;
  /**
   *
   * @type {PreviousPrice}
   * @memberof RetailPriceModifierDomainSpecific
   */
  PreviousPrice?: PreviousPrice;
  /**
   *
   * @type {NewPrice}
   * @memberof RetailPriceModifierDomainSpecific
   */
  NewPrice?: NewPrice;
  /**
   *
   * @type {PromotionID}
   * @memberof RetailPriceModifierDomainSpecific
   */
  PromotionID?: PromotionID;
  /**
   * The link to the discount line item that triggered the creation of this RetailPriceModifier in order to keep the prorated transaction-related discount for the current line item. Is not used in the context of the modification of the price of a single line item (item-related discount). Although this is an array, it contains at most one entry.
   * @type {Array<number>}
   * @memberof RetailPriceModifierDomainSpecific
   */
  ItemLink?: Array<number>;
  /**
   *
   * @type {QuantityCommonData}
   * @memberof RetailPriceModifierDomainSpecific
   */
  Quantity?: QuantityCommonData;
  /**
   *
   * @type {RoundingCommonData}
   * @memberof RetailPriceModifierDomainSpecific
   */
  Rounding?: RoundingCommonData;
  /**
   *
   * @type {AmountCommonData}
   * @memberof RetailPriceModifierDomainSpecific
   */
  ComputationBaseAmount?: AmountCommonData;
}
/**
 * A flavor of a line item whereby customers return an item that they brought at the same location. ReturnForDelivery is currently not supported.
 * @export
 * @interface ReturnBase
 */
export interface ReturnBase {
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof ReturnBase
   */
  any?: Array<object>;
  /**
   *
   * @type {Array<ItemID>}
   * @memberof ReturnBase
   */
  ItemID?: Array<ItemID>;
  /**
   *
   * @type {Array<MerchandiseHierarchyCommonData>}
   * @memberof ReturnBase
   */
  MerchandiseHierarchy?: Array<MerchandiseHierarchyCommonData>;
  /**
   *
   * @type {UnitPriceCommonData}
   * @memberof ReturnBase
   */
  RegularSalesUnitPrice?: UnitPriceCommonData;
  /**
   *
   * @type {ExtendedAmountType}
   * @memberof ReturnBase
   */
  ExtendedAmount?: ExtendedAmountType;
  /**
   *
   * @type {AmountCommonData}
   * @memberof ReturnBase
   */
  ExtendedDiscountAmount?: AmountCommonData;
  /**
   *
   * @type {Array<QuantityCommonData>}
   * @memberof ReturnBase
   */
  Quantity?: Array<QuantityCommonData>;
  /**
   *
   * @type {Array<RetailPriceModifierDomainSpecific>}
   * @memberof ReturnBase
   */
  RetailPriceModifier?: Array<RetailPriceModifierDomainSpecific>;
  /**
   *
   * @type {Array<ItemLink>}
   * @memberof ReturnBase
   */
  ItemLink?: Array<ItemLink>;
  /**
   *
   * @type {string}
   * @memberof ReturnBase
   */
  ItemType?: string;
  /**
   *
   * @type {boolean}
   * @memberof ReturnBase
   */
  NonDiscountableFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ReturnBase
   */
  FixedPriceFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ReturnBase
   */
  TaxIncludedInPriceFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ReturnBase
   */
  NonPieceGoodFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ReturnBase
   */
  FrequentShopperPointsEligibilityFlag?: boolean;
  /**
   *
   * @type {string}
   * @memberof ReturnBase
   */
  DiscountTypeCode?: string;
  /**
   *
   * @type {string}
   * @memberof ReturnBase
   */
  PriceTypeCode?: string;
  /**
   *
   * @type {boolean}
   * @memberof ReturnBase
   */
  NotConsideredByPriceEngineFlag?: boolean;
  /**
   *
   * @type {Array<FrequentShopperPointsModifierType>}
   * @memberof ReturnBase
   */
  FrequentShopperPointsModifier?: Array<FrequentShopperPointsModifierType>;
  /**
   *
   * @type {Array<PromotionPriceDerivationRuleReferenceType>}
   * @memberof ReturnBase
   */
  PromotionPriceDerivationRuleReference?: Array<
    PromotionPriceDerivationRuleReferenceType
  >;
  /**
   *
   * @type {Array<PromotionManualTriggerType>}
   * @memberof ReturnBase
   */
  PromotionManualTrigger?: Array<PromotionManualTriggerType>;
}
/**
 * A flavor of a line item whereby customers return an item that is to be delivered to a location on a future date and time. ReturnForDelivery is currently not supported.
 * @export
 * @interface ReturnForDeliveryBase
 */
export interface ReturnForDeliveryBase {
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof ReturnForDeliveryBase
   */
  any?: Array<object>;
  /**
   *
   * @type {Array<ItemID>}
   * @memberof ReturnForDeliveryBase
   */
  ItemID?: Array<ItemID>;
  /**
   *
   * @type {Array<MerchandiseHierarchyCommonData>}
   * @memberof ReturnForDeliveryBase
   */
  MerchandiseHierarchy?: Array<MerchandiseHierarchyCommonData>;
  /**
   *
   * @type {UnitPriceCommonData}
   * @memberof ReturnForDeliveryBase
   */
  RegularSalesUnitPrice?: UnitPriceCommonData;
  /**
   *
   * @type {ExtendedAmountType}
   * @memberof ReturnForDeliveryBase
   */
  ExtendedAmount?: ExtendedAmountType;
  /**
   *
   * @type {AmountCommonData}
   * @memberof ReturnForDeliveryBase
   */
  ExtendedDiscountAmount?: AmountCommonData;
  /**
   *
   * @type {Array<QuantityCommonData>}
   * @memberof ReturnForDeliveryBase
   */
  Quantity?: Array<QuantityCommonData>;
  /**
   *
   * @type {Array<RetailPriceModifierDomainSpecific>}
   * @memberof ReturnForDeliveryBase
   */
  RetailPriceModifier?: Array<RetailPriceModifierDomainSpecific>;
  /**
   *
   * @type {Array<ItemLink>}
   * @memberof ReturnForDeliveryBase
   */
  ItemLink?: Array<ItemLink>;
  /**
   *
   * @type {string}
   * @memberof ReturnForDeliveryBase
   */
  ItemType?: string;
  /**
   *
   * @type {boolean}
   * @memberof ReturnForDeliveryBase
   */
  NonDiscountableFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ReturnForDeliveryBase
   */
  FixedPriceFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ReturnForDeliveryBase
   */
  TaxIncludedInPriceFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ReturnForDeliveryBase
   */
  NonPieceGoodFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ReturnForDeliveryBase
   */
  FrequentShopperPointsEligibilityFlag?: boolean;
  /**
   *
   * @type {string}
   * @memberof ReturnForDeliveryBase
   */
  DiscountTypeCode?: string;
  /**
   *
   * @type {string}
   * @memberof ReturnForDeliveryBase
   */
  PriceTypeCode?: string;
  /**
   *
   * @type {boolean}
   * @memberof ReturnForDeliveryBase
   */
  NotConsideredByPriceEngineFlag?: boolean;
  /**
   *
   * @type {Array<FrequentShopperPointsModifierType>}
   * @memberof ReturnForDeliveryBase
   */
  FrequentShopperPointsModifier?: Array<FrequentShopperPointsModifierType>;
  /**
   *
   * @type {Array<PromotionPriceDerivationRuleReferenceType>}
   * @memberof ReturnForDeliveryBase
   */
  PromotionPriceDerivationRuleReference?: Array<
    PromotionPriceDerivationRuleReferenceType
  >;
  /**
   *
   * @type {Array<PromotionManualTriggerType>}
   * @memberof ReturnForDeliveryBase
   */
  PromotionManualTrigger?: Array<PromotionManualTriggerType>;
}
/**
 * A flavor of a line item whereby customers return an item and the store will pick it up from a location on a future date and time. ReturnForPickup is currently not supported.
 * @export
 * @interface ReturnForPickupBase
 */
export interface ReturnForPickupBase {
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof ReturnForPickupBase
   */
  any?: Array<object>;
  /**
   *
   * @type {Array<ItemID>}
   * @memberof ReturnForPickupBase
   */
  ItemID?: Array<ItemID>;
  /**
   *
   * @type {Array<MerchandiseHierarchyCommonData>}
   * @memberof ReturnForPickupBase
   */
  MerchandiseHierarchy?: Array<MerchandiseHierarchyCommonData>;
  /**
   *
   * @type {UnitPriceCommonData}
   * @memberof ReturnForPickupBase
   */
  RegularSalesUnitPrice?: UnitPriceCommonData;
  /**
   *
   * @type {ExtendedAmountType}
   * @memberof ReturnForPickupBase
   */
  ExtendedAmount?: ExtendedAmountType;
  /**
   *
   * @type {AmountCommonData}
   * @memberof ReturnForPickupBase
   */
  ExtendedDiscountAmount?: AmountCommonData;
  /**
   *
   * @type {Array<QuantityCommonData>}
   * @memberof ReturnForPickupBase
   */
  Quantity?: Array<QuantityCommonData>;
  /**
   *
   * @type {Array<RetailPriceModifierDomainSpecific>}
   * @memberof ReturnForPickupBase
   */
  RetailPriceModifier?: Array<RetailPriceModifierDomainSpecific>;
  /**
   *
   * @type {Array<ItemLink>}
   * @memberof ReturnForPickupBase
   */
  ItemLink?: Array<ItemLink>;
  /**
   *
   * @type {string}
   * @memberof ReturnForPickupBase
   */
  ItemType?: string;
  /**
   *
   * @type {boolean}
   * @memberof ReturnForPickupBase
   */
  NonDiscountableFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ReturnForPickupBase
   */
  FixedPriceFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ReturnForPickupBase
   */
  TaxIncludedInPriceFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ReturnForPickupBase
   */
  NonPieceGoodFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ReturnForPickupBase
   */
  FrequentShopperPointsEligibilityFlag?: boolean;
  /**
   *
   * @type {string}
   * @memberof ReturnForPickupBase
   */
  DiscountTypeCode?: string;
  /**
   *
   * @type {string}
   * @memberof ReturnForPickupBase
   */
  PriceTypeCode?: string;
  /**
   *
   * @type {boolean}
   * @memberof ReturnForPickupBase
   */
  NotConsideredByPriceEngineFlag?: boolean;
  /**
   *
   * @type {Array<FrequentShopperPointsModifierType>}
   * @memberof ReturnForPickupBase
   */
  FrequentShopperPointsModifier?: Array<FrequentShopperPointsModifierType>;
  /**
   *
   * @type {Array<PromotionPriceDerivationRuleReferenceType>}
   * @memberof ReturnForPickupBase
   */
  PromotionPriceDerivationRuleReference?: Array<
    PromotionPriceDerivationRuleReferenceType
  >;
  /**
   *
   * @type {Array<PromotionManualTriggerType>}
   * @memberof ReturnForPickupBase
   */
  PromotionManualTrigger?: Array<PromotionManualTriggerType>;
}
/**
 * Contains information about the rounding of discounts.
 * @export
 * @interface RoundingCommonData
 */
export interface RoundingCommonData {
  /**
   *
   * @type {number}
   * @memberof RoundingCommonData
   */
  value?: number;
  /**
   * Uppercase currency is expected in uppercase ISO format.
   * @type {string}
   * @memberof RoundingCommonData
   */
  Currency?: string;
  /**
   * Describes whether the discount was rounded up or down.
   * @type {string}
   * @memberof RoundingCommonData
   */
  RoundingDirection?: RoundingCommonDataRoundingDirectionEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum RoundingCommonDataRoundingDirectionEnum {
  Up = 'Up',
  Down = 'Down'
}

/**
 * Specifies how the regular sales price should be rounded after multiplying the unit price with the provided quantity.
 * @export
 * @interface RoundingRuleType
 */
export interface RoundingRuleType {
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof RoundingRuleType
   */
  any?: Array<object>;
  /**
   * Specifies the rounding direction. Default value is Commercial.
   * @type {string}
   * @memberof RoundingRuleType
   */
  RoundingMethod?: RoundingRuleTypeRoundingMethodEnum;
  /**
   * The rounding result must be an integer multiple of the specified value. Example: If the value to be rounded is 12.345, rounding method is Commercial and Multple is 0.05, then the rounding result is 12.35. Default value is 0.01.
   * @type {number}
   * @memberof RoundingRuleType
   */
  Multiple?: number;
}

/**
 * @export
 * @enum {string}
 */
export enum RoundingRuleTypeRoundingMethodEnum {
  Up = 'Up',
  Down = 'Down',
  Commercial = 'Commercial'
}

/**
 * A flavor of a line item whereby customers purchase an item and takes it out directly. For a description of the properties see CustomerOrderForDeliveryBase.
 * @export
 * @interface SaleBase
 */
export interface SaleBase {
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof SaleBase
   */
  any?: Array<object>;
  /**
   *
   * @type {Array<ItemID>}
   * @memberof SaleBase
   */
  ItemID?: Array<ItemID>;
  /**
   *
   * @type {Array<MerchandiseHierarchyCommonData>}
   * @memberof SaleBase
   */
  MerchandiseHierarchy?: Array<MerchandiseHierarchyCommonData>;
  /**
   *
   * @type {UnitPriceCommonData}
   * @memberof SaleBase
   */
  RegularSalesUnitPrice?: UnitPriceCommonData;
  /**
   *
   * @type {ExtendedAmountType}
   * @memberof SaleBase
   */
  ExtendedAmount?: ExtendedAmountType;
  /**
   *
   * @type {AmountCommonData}
   * @memberof SaleBase
   */
  ExtendedDiscountAmount?: AmountCommonData;
  /**
   *
   * @type {Array<QuantityCommonData>}
   * @memberof SaleBase
   */
  Quantity?: Array<QuantityCommonData>;
  /**
   *
   * @type {Array<RetailPriceModifierDomainSpecific>}
   * @memberof SaleBase
   */
  RetailPriceModifier?: Array<RetailPriceModifierDomainSpecific>;
  /**
   *
   * @type {Array<ItemLink>}
   * @memberof SaleBase
   */
  ItemLink?: Array<ItemLink>;
  /**
   *
   * @type {string}
   * @memberof SaleBase
   */
  ItemType?: string;
  /**
   *
   * @type {boolean}
   * @memberof SaleBase
   */
  NonDiscountableFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof SaleBase
   */
  FixedPriceFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof SaleBase
   */
  TaxIncludedInPriceFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof SaleBase
   */
  NonPieceGoodFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof SaleBase
   */
  FrequentShopperPointsEligibilityFlag?: boolean;
  /**
   *
   * @type {string}
   * @memberof SaleBase
   */
  DiscountTypeCode?: string;
  /**
   *
   * @type {string}
   * @memberof SaleBase
   */
  PriceTypeCode?: string;
  /**
   *
   * @type {boolean}
   * @memberof SaleBase
   */
  NotConsideredByPriceEngineFlag?: boolean;
  /**
   *
   * @type {Array<FrequentShopperPointsModifierType>}
   * @memberof SaleBase
   */
  FrequentShopperPointsModifier?: Array<FrequentShopperPointsModifierType>;
  /**
   *
   * @type {Array<PromotionPriceDerivationRuleReferenceType>}
   * @memberof SaleBase
   */
  PromotionPriceDerivationRuleReference?: Array<
    PromotionPriceDerivationRuleReferenceType
  >;
  /**
   *
   * @type {Array<PromotionManualTriggerType>}
   * @memberof SaleBase
   */
  PromotionManualTrigger?: Array<PromotionManualTriggerType>;
}
/**
 * A flavor of a line item whereby customers purchase an item that will be delivered to a location on a future date and time. SaleForDelivery is currently not supported.
 * @export
 * @interface SaleForDeliveryBase
 */
export interface SaleForDeliveryBase {
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof SaleForDeliveryBase
   */
  any?: Array<object>;
  /**
   *
   * @type {Array<ItemID>}
   * @memberof SaleForDeliveryBase
   */
  ItemID?: Array<ItemID>;
  /**
   *
   * @type {Array<MerchandiseHierarchyCommonData>}
   * @memberof SaleForDeliveryBase
   */
  MerchandiseHierarchy?: Array<MerchandiseHierarchyCommonData>;
  /**
   *
   * @type {UnitPriceCommonData}
   * @memberof SaleForDeliveryBase
   */
  RegularSalesUnitPrice?: UnitPriceCommonData;
  /**
   *
   * @type {ExtendedAmountType}
   * @memberof SaleForDeliveryBase
   */
  ExtendedAmount?: ExtendedAmountType;
  /**
   *
   * @type {AmountCommonData}
   * @memberof SaleForDeliveryBase
   */
  ExtendedDiscountAmount?: AmountCommonData;
  /**
   *
   * @type {Array<QuantityCommonData>}
   * @memberof SaleForDeliveryBase
   */
  Quantity?: Array<QuantityCommonData>;
  /**
   *
   * @type {Array<RetailPriceModifierDomainSpecific>}
   * @memberof SaleForDeliveryBase
   */
  RetailPriceModifier?: Array<RetailPriceModifierDomainSpecific>;
  /**
   *
   * @type {Array<ItemLink>}
   * @memberof SaleForDeliveryBase
   */
  ItemLink?: Array<ItemLink>;
  /**
   *
   * @type {string}
   * @memberof SaleForDeliveryBase
   */
  ItemType?: string;
  /**
   *
   * @type {boolean}
   * @memberof SaleForDeliveryBase
   */
  NonDiscountableFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof SaleForDeliveryBase
   */
  FixedPriceFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof SaleForDeliveryBase
   */
  TaxIncludedInPriceFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof SaleForDeliveryBase
   */
  NonPieceGoodFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof SaleForDeliveryBase
   */
  FrequentShopperPointsEligibilityFlag?: boolean;
  /**
   *
   * @type {string}
   * @memberof SaleForDeliveryBase
   */
  DiscountTypeCode?: string;
  /**
   *
   * @type {string}
   * @memberof SaleForDeliveryBase
   */
  PriceTypeCode?: string;
  /**
   *
   * @type {boolean}
   * @memberof SaleForDeliveryBase
   */
  NotConsideredByPriceEngineFlag?: boolean;
  /**
   *
   * @type {Array<FrequentShopperPointsModifierType>}
   * @memberof SaleForDeliveryBase
   */
  FrequentShopperPointsModifier?: Array<FrequentShopperPointsModifierType>;
  /**
   *
   * @type {Array<PromotionPriceDerivationRuleReferenceType>}
   * @memberof SaleForDeliveryBase
   */
  PromotionPriceDerivationRuleReference?: Array<
    PromotionPriceDerivationRuleReferenceType
  >;
  /**
   *
   * @type {Array<PromotionManualTriggerType>}
   * @memberof SaleForDeliveryBase
   */
  PromotionManualTrigger?: Array<PromotionManualTriggerType>;
}
/**
 * A flavor of a line item whereby customers purchase an item and pick it up from a location on a future date and time. SaleForPickup is currently not supported.
 * @export
 * @interface SaleForPickupBase
 */
export interface SaleForPickupBase {
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof SaleForPickupBase
   */
  any?: Array<object>;
  /**
   *
   * @type {Array<ItemID>}
   * @memberof SaleForPickupBase
   */
  ItemID?: Array<ItemID>;
  /**
   *
   * @type {Array<MerchandiseHierarchyCommonData>}
   * @memberof SaleForPickupBase
   */
  MerchandiseHierarchy?: Array<MerchandiseHierarchyCommonData>;
  /**
   *
   * @type {UnitPriceCommonData}
   * @memberof SaleForPickupBase
   */
  RegularSalesUnitPrice?: UnitPriceCommonData;
  /**
   *
   * @type {ExtendedAmountType}
   * @memberof SaleForPickupBase
   */
  ExtendedAmount?: ExtendedAmountType;
  /**
   *
   * @type {AmountCommonData}
   * @memberof SaleForPickupBase
   */
  ExtendedDiscountAmount?: AmountCommonData;
  /**
   *
   * @type {Array<QuantityCommonData>}
   * @memberof SaleForPickupBase
   */
  Quantity?: Array<QuantityCommonData>;
  /**
   *
   * @type {Array<RetailPriceModifierDomainSpecific>}
   * @memberof SaleForPickupBase
   */
  RetailPriceModifier?: Array<RetailPriceModifierDomainSpecific>;
  /**
   *
   * @type {Array<ItemLink>}
   * @memberof SaleForPickupBase
   */
  ItemLink?: Array<ItemLink>;
  /**
   *
   * @type {string}
   * @memberof SaleForPickupBase
   */
  ItemType?: string;
  /**
   *
   * @type {boolean}
   * @memberof SaleForPickupBase
   */
  NonDiscountableFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof SaleForPickupBase
   */
  FixedPriceFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof SaleForPickupBase
   */
  TaxIncludedInPriceFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof SaleForPickupBase
   */
  NonPieceGoodFlag?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof SaleForPickupBase
   */
  FrequentShopperPointsEligibilityFlag?: boolean;
  /**
   *
   * @type {string}
   * @memberof SaleForPickupBase
   */
  DiscountTypeCode?: string;
  /**
   *
   * @type {string}
   * @memberof SaleForPickupBase
   */
  PriceTypeCode?: string;
  /**
   *
   * @type {boolean}
   * @memberof SaleForPickupBase
   */
  NotConsideredByPriceEngineFlag?: boolean;
  /**
   *
   * @type {Array<FrequentShopperPointsModifierType>}
   * @memberof SaleForPickupBase
   */
  FrequentShopperPointsModifier?: Array<FrequentShopperPointsModifierType>;
  /**
   *
   * @type {Array<PromotionPriceDerivationRuleReferenceType>}
   * @memberof SaleForPickupBase
   */
  PromotionPriceDerivationRuleReference?: Array<
    PromotionPriceDerivationRuleReferenceType
  >;
  /**
   *
   * @type {Array<PromotionManualTriggerType>}
   * @memberof SaleForPickupBase
   */
  PromotionManualTrigger?: Array<PromotionManualTriggerType>;
}
/**
 * The collection of the line items to be processed.
 * @export
 * @interface ShoppingBasketBase
 */
export interface ShoppingBasketBase {
  /**
   * The response might contain more line items than the request due to generated transaction discounts.
   * @type {Array<LineItemDomainSpecific>}
   * @memberof ShoppingBasketBase
   */
  LineItem: Array<LineItemDomainSpecific>;
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof ShoppingBasketBase
   */
  any?: Array<object>;
}
/**
 * Allows the entry of coupons.
 * @export
 * @interface TenderCouponBase
 */
export interface TenderCouponBase {
  /**
   *
   * @type {QuantityCommonData}
   * @memberof TenderCouponBase
   */
  Quantity?: QuantityCommonData;
  /**
   * Must be unique within this request.
   * @type {string}
   * @memberof TenderCouponBase
   */
  PrimaryLabel: string;
  /**
   * Reserved for future use.
   * @type {number}
   * @memberof TenderCouponBase
   */
  RewardValue?: number;
  /**
   * This is currently not supported.
   * @type {Array<object>}
   * @memberof TenderCouponBase
   */
  any?: Array<object>;
  /**
   * Quantity of items for which the provided coupons could be applied.
   * @type {number}
   * @memberof TenderCouponBase
   */
  AppliedQuantity?: number;
  /**
   * Reserved for future use.
   * @type {string}
   * @memberof TenderCouponBase
   */
  RewardType?: string;
}
/**
 * Depending on the usage, this might refer to one single unit or the total quantity of the line item.
 * @export
 * @interface UnitPriceCommonData
 */
export interface UnitPriceCommonData {
  /**
   *
   * @type {number}
   * @memberof UnitPriceCommonData
   */
  value?: number;
  /**
   * Uppercase currency is expected in uppercase ISO format.
   * @type {string}
   * @memberof UnitPriceCommonData
   */
  Currency?: string;
}
/**
 * Could be the identifier of a POS system.
 * @export
 * @interface WorkstationIDCommonData
 */
export interface WorkstationIDCommonData {
  /**
   *
   * @type {string}
   * @memberof WorkstationIDCommonData
   */
  value?: string;
}

/**
 * CalculationApi - axios parameter creator
 * @export
 */
export const CalculationApiAxiosParamCreator = function(
  configuration?: Configuration
) {
  return {
    /**
     * Determines regular prices by applying promotional rules for the provided list of items.
     * @summary Calculates a PriceCalculateTransaction
     * @param {string} tenantName The name of the subdomain in which the service instance/subscription is created. **For the sandbox environment, enter \&#39;oppsapihub\&#39;.**
     * @param {PriceCalculate} priceCalculate The transaction for which the price calculation is to be done
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calculateViaRestWithTenant: async (
      tenantName: string,
      priceCalculate: PriceCalculate,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tenantName' is not null or undefined
      if (tenantName === null || tenantName === undefined) {
        throw new RequiredError(
          'tenantName',
          'Required parameter tenantName was null or undefined when calling calculateViaRestWithTenant.'
        );
      }
      // verify required parameter 'priceCalculate' is not null or undefined
      if (priceCalculate === null || priceCalculate === undefined) {
        throw new RequiredError(
          'priceCalculate',
          'Required parameter priceCalculate was null or undefined when calling calculateViaRestWithTenant.'
        );
      }
      const localVarPath = `/restapi/{tenantName}`.replace(
        `{${'tenantName'}}`,
        encodeURIComponent(String(tenantName))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication calculation_auth required
      // oauth required
      if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue =
          typeof configuration.accessToken === 'function'
            ? configuration.accessToken('calculation_auth', [])
            : configuration.accessToken;
        localVarHeaderParameter['Authorization'] =
          'Bearer ' + localVarAccessTokenValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      // @ts-ignore
      delete localVarUrlObj.search;
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof priceCalculate !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(priceCalculate !== undefined ? priceCalculate : {})
        : priceCalculate || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * CalculationApi - functional programming interface
 * @export
 */
export const CalculationApiFp = function(configuration?: Configuration) {
  return {
    /**
     * Determines regular prices by applying promotional rules for the provided list of items.
     * @summary Calculates a PriceCalculateTransaction
     * @param {string} tenantName The name of the subdomain in which the service instance/subscription is created. **For the sandbox environment, enter \&#39;oppsapihub\&#39;.**
     * @param {PriceCalculate} priceCalculate The transaction for which the price calculation is to be done
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async calculateViaRestWithTenant(
      tenantName: string,
      priceCalculate: PriceCalculate,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PriceCalculateResponse>
    > {
      const localVarAxiosArgs = await CalculationApiAxiosParamCreator(
        configuration
      ).calculateViaRestWithTenant(tenantName, priceCalculate, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }
  };
};

/**
 * CalculationApi - factory interface
 * @export
 */
export const CalculationApiFactory = function(
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * Determines regular prices by applying promotional rules for the provided list of items.
     * @summary Calculates a PriceCalculateTransaction
     * @param {string} tenantName The name of the subdomain in which the service instance/subscription is created. **For the sandbox environment, enter \&#39;oppsapihub\&#39;.**
     * @param {PriceCalculate} priceCalculate The transaction for which the price calculation is to be done
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calculateViaRestWithTenant(
      tenantName: string,
      priceCalculate: PriceCalculate,
      options?: any
    ): AxiosPromise<PriceCalculateResponse> {
      return CalculationApiFp(configuration)
        .calculateViaRestWithTenant(tenantName, priceCalculate, options)
        .then(request => request(axios, basePath));
    }
  };
};

/**
 * CalculationApi - object-oriented interface
 * @export
 * @class CalculationApi
 * @extends {BaseAPI}
 */
export class CalculationApi extends BaseAPI {
  /**
   * Determines regular prices by applying promotional rules for the provided list of items.
   * @summary Calculates a PriceCalculateTransaction
   * @param {string} tenantName The name of the subdomain in which the service instance/subscription is created. **For the sandbox environment, enter \&#39;oppsapihub\&#39;.**
   * @param {PriceCalculate} priceCalculate The transaction for which the price calculation is to be done
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalculationApi
   */
  public calculateViaRestWithTenant(
    tenantName: string,
    priceCalculate: PriceCalculate,
    options?: any
  ) {
    return CalculationApiFp(this.configuration)
      .calculateViaRestWithTenant(tenantName, priceCalculate, options)
      .then(request => request(this.axios, this.basePath));
  }
}
