## Problem:
- Parse is version dependent: parseEdmxV4 parseEdmxV2 with different return types
The read and parsing of the data is the same up th the point when on the root the two different parseEdmxV2 are called in parseEdmxFile.
- Transformation is also version dependent transformServiceMetadata(). The transformation is mainly the same.

The result of parseService() is VdmServiceMetadata. This does not depend on the service.
So perhaps on can get rid of all the intermediate parser-types where all the objects like:
entitySets, functionImports, complexTypes. Potential flow

- You keep ony the real base containing the root entity holding all plain read data longer.
- Then in the transformServiceMetadata()  you build the entites, compexTypes etc. with the right methods. The results do not depend on the version e.g. VdmEntity.
- General the transformServiceMetadata is too large and a lot of stuff is going on. Most of it also the same for both versions. Consider using some pipe to add all version independent content like:
oDataVersion: metadata.edmx.oDataVersion, namespace, originalFileName, directoryName, npmPackageName,  speakingModuleName and then call slimm methods for the rest.
