import { resolve, extname } from 'path';
import { existsSync, lstatSync } from 'fs';
// eslint-disable-next-line import/no-internal-modules
import {
  ParsedOptions,
  Options,
  resolveRequiredPath,
  resolvePath,
  resolveGlob
} from '@sap-cloud-sdk/generator-common/internal';

/**
 * Options to configure the client generation when using the generator programmatically.
 */
export interface GeneratorOptions {
  /**
   * Specify the path to the directory or file containing the OpenAPI service definition(s) to generate clients for.
   * Accepts Swagger and OpenAPI definitions as YAML and JSON files.
   * Throws an error if the path does not exist.
   */
  input: string;
  /**
   * Specify the path to the directory to generate the client(s) in.
   * Each client is generated into a subdirectory within the given output directory.
   * Creates the directory if it does not exist.
   * Customize subdirectory naming through `optionsPerService`.
   */
  outputDir: string;
  /**
   * Specify the path to the prettier config. If not given a default config will be used for the generated sources.
   */
  prettierConfig?: string;
  /**
   * Transpile the generated TypeScript code.
   * When enabled, a default `tsconfig.json` will be generated and used.
   * It emits `.js`, `.js.map`, `.d.ts` and `.d.ts.map` files.
   * To configure transpilation set `tsconfig`.
   */
  transpile?: boolean;
  /**
   * Include files matching the given glob into the root of each generated client directory.
   */
  include?: string;
  /**
   * Allow overwriting files that already exist.
   * This is useful when running the generation regularly.
   */
  overwrite?: boolean;
  /**
   * Remove all files in the output directory before generation.
   * Be cautious when using this option, as it really removes EVERYTHING in the output directory.
   */
  clearOutputDir?: boolean;
  /**
   * By default, the generation fails when there are duplicate or invalid names for operations and/or path parameters after transforming them to camel case.
   * Set this to true to enable unique and valid name generation.
   * The names will then be generated by appending numbers and prepending prefixes.
   */
  skipValidation?: boolean;
  /**
   * Replace the default `tsconfig.json` by passing a path to a custom configuration.
   * By default, a `tsconfig.json` is only generated when transpilation is enabled (`transpile`).
   * If a directory is passed, a `tsconfig.json` file is read from this directory.
   */
  tsconfig?: string;
  /**
   * When enabled, a `package.json` containing dependencies and scripts for transpilation and documentation generation, is generated.
   */
  packageJson?: boolean;
  /**
   * Turn on verbose logging.
   */
  verbose?: boolean;
  /**
   * Set the path to a file containing the options per service.
   * The configuration allows to set a `directoryName` and `packageName` for every service, identified by the path to the original file.
   * It also makes sure that names do not change between generator runs.
   * If a directory is passed, a `options-per-service.json` file is read/created in this directory.
   */
  optionsPerService?: string;
  // TODO remove packageVersion in version 3.0
  /**
   * Internal option used to adjust the version in the generated package.json. Will not be used in the future.
   */
  packageVersion?: string;
  /**
   * Generate default `README.md` files in the client directories.
   */
  readme?: boolean;
  /**
   * Hidden option only for internal usage - generate metadata for API hub integration.
   */
  metadata?: boolean;
}

/**
 * @internal
 * Represents the parsed generator options.
 */
export type ParsedGeneratorOptions = ParsedOptions<typeof cliOptions>;

/**
 * @internal
 */
export const cliOptions = {
  input: {
    alias: 'i',
    describe:
      'Specify the path to the directory or file containing the OpenAPI service definition(s) to generate clients for. Accepts Swagger and OpenAPI definitions as YAML and JSON files. Throws an error if the path does not exist.',
    coerce: resolveRequiredPath,
    type: 'string',
    demandOption: true,
    requiresArg: true
  },
  outputDir: {
    type: 'string',
    alias: 'o',
    describe:
      'Specify the path to the directory to generate the client(s) in. Each client is generated into a subdirectory within the given output directory. Creates the directory if it does not exist. Customize subdirectory naming through `--optionsPerService`.',
    coerce: resolveRequiredPath,
    demandOption: true,
    requiresArg: true
  },
  prettierConfig: {
    type: 'string',
    alias: 'p',
    describe:
      'Specify the path to the prettier config. If not given a default config will be used for the generated sources.',
    coerce: resolvePath,
    requiresArg: true
  },
  transpile: {
    type: 'boolean',
    alias: 't',
    describe:
      'Transpile the generated TypeScript code. When enabled a default `tsconfig.json` will be generated and used. It emits `.js`, `.js.map`, `.d.ts` and `.d.ts.map` files. To configure transpilation set `--tsconfig`.',
    default: false
  },
  include: {
    type: 'string',
    coerce: resolveGlob,
    describe:
      'Include files matching the given glob into the root of each generated client directory.',
    requiresArg: true
  },
  overwrite: {
    type: 'boolean',
    describe:
      'Allow to overwrite files, that already exist. This is useful, when running the generation regularly.',
    default: false
  },
  clearOutputDir: {
    type: 'boolean',
    describe:
      'Remove all files in the output directory before generation. Be cautious when using this option, as it really removes EVERYTHING in the output directory.',
    default: false
  },
  skipValidation: {
    type: 'boolean',
    describe:
      'By default, the generation fails, when there are duplicate or invalid names for operations and/or path parameters after transforming them to camel case. Set this to true to enable unique and valid name generation. The names will then be generated by appending numbers and prepending prefixes.',
    default: false
  },
  tsconfig: {
    type: 'string',
    describe:
      'Replace the default `tsconfig.json` by passing a path to a custom config. By default, a `tsconfig.json` is only generated, when transpilation is enabled (`--transpile`). If a directory is passed, a `tsconfig.json` file is read from this directory.',
    coerce: resolvePath
  },
  packageJson: {
    type: 'boolean',
    describe:
      'When enabled, a `package.json`, that specifies dependencies and scripts for transpilation and documentation generation is generated.',
    default: false
  },
  verbose: {
    type: 'boolean',
    alias: 'v',
    describe: 'Turn on verbose logging.',
    default: false
  },
  optionsPerService: {
    type: 'string',
    describe:
      'Set the path to a file containing the options per service. The configuration allows to set a `directoryName` and `packageName` for every service, identified by the path to the original file. It also makes sure that names do not change between generator runs. If a directory is passed, a `options-per-service.json` file is read/created in this directory.',
    coerce: (input?: string): string | undefined => {
      if (typeof input !== 'undefined') {
        const isFilePath =
          (existsSync(input) && lstatSync(input).isFile()) || !!extname(input);
        return isFilePath
          ? resolve(input)
          : resolve(input, 'options-per-service.json');
      }
    }
  },
  readme: {
    type: 'boolean',
    describe: 'Generate default `README.md` files in the client directories.',
    default: false,
    hidden: true
  },
  metadata: {
    type: 'boolean',
    describe: 'When enabled, metadata for the API hub is generated.',
    default: false,
    hidden: true
  }
} as const satisfies Options<GeneratorOptions>;
