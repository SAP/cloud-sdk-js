{{>licenseInfo}}

import { Configuration } from "./configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import globalAxios, {  AxiosPromise, AxiosInstance } from 'axios';
import axios from 'axios';

export const BASE_PATH = "{{{basePath}}}".replace(/\/+$/, "");

/**
*
* @export
*/
export const COLLECTION_FORMATS = {
csv: ",",
ssv: " ",
tsv: "\t",
pipes: "|",
};

/**
*
* @export
* @interface RequestArgs
*/
export interface RequestArgs {
url: string;
options: any;
}

/**
*
* @export
* @class BaseAPI
*/
export class BaseAPI {
protected configuration: Configuration | undefined;
protected axios:AxiosInstance;
protected basePath:string

constructor(configuration: Configuration) {
const headers = {};
if (configuration.accessToken) {
headers['Authorization'] = `Bearer ${configuration.accessToken}`;
}
if (configuration.username && configuration.password) {
headers['Authorization'] = `Basic ${Buffer.from(`${configuration.username}:${configuration.password}`, 'ascii').toString('base64')}`;
}

const axiosWithAuthAndBase = axios.create({
headers: headers,
baseURL: configuration.basePath
});

this.axios = axiosWithAuthAndBase;
this.basePath = ""
this.configuration = {};
}
}

/**
*
* @export
* @class RequiredError
* @extends {Error}
*/
export class RequiredError extends Error {
name: "RequiredError" = "RequiredError";
constructor(public field: string, msg?: string) {
super(msg);
}
}
