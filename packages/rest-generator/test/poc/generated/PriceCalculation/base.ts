/**
 * Calculation
 * You use the Calculation service for SAP Omnichannel Promotion Pricing in your sales channel application to determine the effective sales prices by applying promotional rules in the relevant customer context. The service can be called for a single product or for an entire shopping cart. The calculation is based on the data you uploaded to the cloud environment, and sends back prices and additional information about customer rewards to the calling application.
 *
 * The version of the OpenAPI document: 1
 * Contact: test@mustache.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// Some imports not used depending on template conditions
// @ts-ignore
import { AxiosInstance } from 'axios';
import axios from 'axios';
import { Configuration } from './configuration';

export const BASE_PATH = 'https://sandbox.api.sap.com/sapomnichannelpromotionpricing/calculation'.replace(
  /\/+$/,
  ''
);

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ',',
  ssv: ' ',
  tsv: '\t',
  pipes: '|'
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration | undefined;
  protected axios: AxiosInstance;
  protected basePath: string;

  constructor(configuration: Configuration) {
    const headers = {};
    if (configuration.accessToken) {
      headers['Authorization'] = `Bearer ${configuration.accessToken}`;
    }
    if (configuration.username && configuration.password) {
      headers['Authorization'] = `Basic ${Buffer.from(
        `${configuration.username}:${configuration.password}`,
        'ascii'
      ).toString('base64')}`;
    }

    const axiosWithAuthAndBase = axios.create({
      headers,
      baseURL: configuration.basePath
    });

    this.axios = axiosWithAuthAndBase;
    this.basePath = '';
    this.configuration = {};
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: 'RequiredError' = 'RequiredError';
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}
