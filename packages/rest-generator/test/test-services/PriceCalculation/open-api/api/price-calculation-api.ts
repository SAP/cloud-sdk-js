// tslint:disable
/**
 * Calculation
 * You use the Calculation service for SAP Omnichannel Promotion Pricing in your sales channel application to determine the effective sales prices by applying promotional rules in the relevant customer context. The service can be called for a single product or for an entire shopping cart. The calculation is based on the data you uploaded to the cloud environment, and sends back prices and additional information about customer rewards to the calling application.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PriceCalculate } from '../model';
// @ts-ignore
import { PriceCalculateResponse } from '../model';
/**
 * PriceCalculationApi - axios parameter creator
 * @export
 */
export const PriceCalculationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Determines regular prices by applying promotional rules for the provided list of items.
         * @summary Calculates a PriceCalculateTransaction
         * @param {string} tenantName The name of the subdomain in which the service instance/subscription is created. **For the sandbox environment, enter \&#39;oppsapihub\&#39;.**
         * @param {PriceCalculate} priceCalculate The transaction for which the price calculation is to be done
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateViaRestWithTenant: async (tenantName: string, priceCalculate: PriceCalculate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantName' is not null or undefined
            if (tenantName === null || tenantName === undefined) {
                throw new RequiredError('tenantName','Required parameter tenantName was null or undefined when calling calculateViaRestWithTenant.');
            }
            // verify required parameter 'priceCalculate' is not null or undefined
            if (priceCalculate === null || priceCalculate === undefined) {
                throw new RequiredError('priceCalculate','Required parameter priceCalculate was null or undefined when calling calculateViaRestWithTenant.');
            }
            const localVarPath = `/restapi/{tenantName}`
                .replace(`{${"tenantName"}}`, encodeURIComponent(String(tenantName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication calculation_auth required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("calculation_auth", [])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof priceCalculate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(priceCalculate !== undefined ? priceCalculate : {}) : (priceCalculate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PriceCalculationApi - functional programming interface
 * @export
 */
export const PriceCalculationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Determines regular prices by applying promotional rules for the provided list of items.
         * @summary Calculates a PriceCalculateTransaction
         * @param {string} tenantName The name of the subdomain in which the service instance/subscription is created. **For the sandbox environment, enter \&#39;oppsapihub\&#39;.**
         * @param {PriceCalculate} priceCalculate The transaction for which the price calculation is to be done
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculateViaRestWithTenant(tenantName: string, priceCalculate: PriceCalculate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PriceCalculateResponse>> {
            const localVarAxiosArgs = await PriceCalculationApiAxiosParamCreator(configuration).calculateViaRestWithTenant(tenantName, priceCalculate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PriceCalculationApi - factory interface
 * @export
 */
export const PriceCalculationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Determines regular prices by applying promotional rules for the provided list of items.
         * @summary Calculates a PriceCalculateTransaction
         * @param {string} tenantName The name of the subdomain in which the service instance/subscription is created. **For the sandbox environment, enter \&#39;oppsapihub\&#39;.**
         * @param {PriceCalculate} priceCalculate The transaction for which the price calculation is to be done
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateViaRestWithTenant(tenantName: string, priceCalculate: PriceCalculate, options?: any): AxiosPromise<PriceCalculateResponse> {
            return PriceCalculationApiFp(configuration).calculateViaRestWithTenant(tenantName, priceCalculate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PriceCalculationApi - object-oriented interface
 * @export
 * @class PriceCalculationApi
 * @extends {BaseAPI}
 */
export class PriceCalculationApi extends BaseAPI {
    /**
     * Determines regular prices by applying promotional rules for the provided list of items.
     * @summary Calculates a PriceCalculateTransaction
     * @param {string} tenantName The name of the subdomain in which the service instance/subscription is created. **For the sandbox environment, enter \&#39;oppsapihub\&#39;.**
     * @param {PriceCalculate} priceCalculate The transaction for which the price calculation is to be done
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PriceCalculationApi
     */
    public calculateViaRestWithTenant(tenantName: string, priceCalculate: PriceCalculate, options?: any) {
        return PriceCalculationApiFp(this.configuration).calculateViaRestWithTenant(tenantName, priceCalculate, options).then((request) => request(this.axios, this.basePath));
    }

}
