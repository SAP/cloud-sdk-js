// tslint:disable
/**
* Calculation
* You use the Calculation service for SAP Omnichannel Promotion Pricing in your sales channel application to determine the effective sales prices by applying promotional rules in the relevant customer context. The service can be called for a single product or for an entire shopping cart. The calculation is based on the data you uploaded to the cloud environment, and sends back prices and additional information about customer rewards to the calling application.
*
* The version of the OpenAPI document: 1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


import { DateTimeCommonData } from './date-time-common-data';
import { IDCommonData } from './idcommon-data';
import { LoyaltyAccountCommonData } from './loyalty-account-common-data';
import { RoundingRuleType } from './rounding-rule-type';
import { ShoppingBasketBase } from './shopping-basket-base';

/**
 * Contains relevant information for the price calculation like the items, date and time, and more.
 * @export
 * @interface PriceCalculateBase
 */
export interface PriceCalculateBase {
    /**
     * 
     * @type {IDCommonData}
     * @memberof PriceCalculateBase
     */
    TransactionID?: IDCommonData;
    /**
     * 
     * @type {DateTimeCommonData}
     * @memberof PriceCalculateBase
     */
    DateTime?: DateTimeCommonData;
    /**
     * Refers to the end customer.
     * @type {Array<LoyaltyAccountCommonData>}
     * @memberof PriceCalculateBase
     */
    Loyalty?: Array<LoyaltyAccountCommonData>;
    /**
     * 
     * @type {ShoppingBasketBase}
     * @memberof PriceCalculateBase
     */
    ShoppingBasket: ShoppingBasketBase;
    /**
     * 
     * @type {RoundingRuleType}
     * @memberof PriceCalculateBase
     */
    RegularSalesUnitPriceRoundingRule?: RoundingRuleType;
    /**
     * This is currently not supported.
     * @type {Array<object>}
     * @memberof PriceCalculateBase
     */
    any?: Array<object>;
    /**
     * Indicates whether in this transaction items are sold or returned.
     * @type {string}
     * @memberof PriceCalculateBase
     */
    TransactionType?: PriceCalculateBaseTransactionTypeEnum;
    /**
     * If set to true, the net regular prices are used for the price calculation. Otherwise, the gross prices are considered.
     * @type {boolean}
     * @memberof PriceCalculateBase
     */
    NetPriceFlag: boolean;
    /**
     * Controls if the items of the ShoppingBasket element are considered as part of a shared basket (\"Basket\") or if they are treated as separate items (\"LineItem\"). If not specified, \"Basket\" is used as default. 
     * @type {string}
     * @memberof PriceCalculateBase
     */
    CalculationMode?: PriceCalculateBaseCalculationModeEnum;
    /**
     * Controls which price derivation rules are used for the price calculation. This is defined by the transaction control break code/price rule control code and the point in time for the application of price derivation rules (immediately or after subtotal).  For the calculation scheme type \'CalcAll\', all transaction control break codes/price rule control codes can be applied (PC, PO, SP, SU). For the calculation scheme type \"CalcForItem\", only rules with transaction control break code/price rule control code PO and SP can be applied. If not specified, \"CalcAll\" is used as default. The calculation scheme is available as of version 4.0. 
     * @type {string}
     * @memberof PriceCalculateBase
     */
    CalculationScheme?: PriceCalculateBaseCalculationSchemeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PriceCalculateBaseTransactionTypeEnum {
    SaleTransaction = 'SaleTransaction'
}
/**
    * @export
    * @enum {string}
    */
export enum PriceCalculateBaseCalculationModeEnum {
    Basket = 'Basket',
    LineItem = 'LineItem'
}
/**
    * @export
    * @enum {string}
    */
export enum PriceCalculateBaseCalculationSchemeEnum {
    CalcAll = 'CalcAll',
    CalcForItem = 'CalcForItem'
}



