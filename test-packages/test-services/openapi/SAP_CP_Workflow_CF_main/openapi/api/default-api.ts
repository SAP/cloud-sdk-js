/* tslint:disable */
/* eslint-disable */
/**
 * Workflow API for Cloud Foundry
 * This API in the SAP Cloud SDK uses the SAP Cloud Platform Workflow service REST API. With the API, you can, for example, start new workflow instances and work with tasks. <br/> For more information on how to obtain the necessary parameters, please see <a href=\"https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/abb1f66b2c3b4983b6b656654cfc3d2b.html\">Determine Service Configuration Parameters</a> in the documentation. The OAuth client you use must have <a href=\"https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/baf2847f6d1c401a83ca3a1427b8ff84.html\">extended scopes</a>.   <br/>Note: The underlying REST APIs are designed for loosely coupled clients. This means:   <ul><li>If workflow service adds fields to responses, the REST API version number does not increase. REST API clients must ignore new fields. These fields become available in the Workflow API in the SAP Cloud SDK only in new versions of the SDK.</li>   <li>The order of fields in responses and of entries in arrays may change. This applies unless the API provides an explicit means to specify the desired order.</li></ul> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AttachmentsContext } from '../model';
// @ts-ignore
import { ConflictError } from '../model';
// @ts-ignore
import { ConsumingWorkflowInstance } from '../model';
// @ts-ignore
import { CustomAttribute } from '../model';
// @ts-ignore
import { FormMetadata } from '../model';
// @ts-ignore
import { FormModel } from '../model';
// @ts-ignore
import { Job } from '../model';
// @ts-ignore
import { SampleContext } from '../model';
// @ts-ignore
import { SendMessagePayload } from '../model';
// @ts-ignore
import { TechnicalError } from '../model';
// @ts-ignore
import { UnauthorizedError } from '../model';
// @ts-ignore
import { WorkflowDefinition } from '../model';
// @ts-ignore
import { WorkflowDefinitionVersion } from '../model';
// @ts-ignore
import { WorkflowInstance } from '../model';
// @ts-ignore
import { WorkflowInstanceErrorMessage } from '../model';
// @ts-ignore
import { WorkflowInstanceExecutionLog } from '../model';
// @ts-ignore
import { WorkflowInstanceRoles } from '../model';
// @ts-ignore
import { WorkflowInstanceRolesUpdatePayload } from '../model';
// @ts-ignore
import { WorkflowInstanceStartPayload } from '../model';
// @ts-ignore
import { WorkflowInstanceUpdatePayload } from '../model';
// @ts-ignore
import { WorkflowInstancesUpdatePayload } from '../model';
// @ts-ignore
import { WorkflowModel } from '../model';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the default start context of the latest version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowInitiator  - Scope: WORKFLOW_DEFINITION_GET_SAMPLE_CONTEXT 
         * @summary Retrieve sample start context of workflow definition by ID
         * @param {string} definitionId The workflow definition ID for which the default start context should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultSampleContext: async (definitionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            if (definitionId === null || definitionId === undefined) {
                throw new RequiredError('definitionId','Required parameter definitionId was null or undefined when calling getDefaultSampleContext.');
            }
            const localVarPath = `/v1/workflow-definitions/{definitionId}/sample-contexts/default-start-context`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the default start context of the specified version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowInitiator  - Scope: WORKFLOW_DEFINITION_GET_SAMPLE_CONTEXT 
         * @summary Retrieve sample start context of workflow definition by ID and version number
         * @param {string} definitionId The workflow definition ID for which the default start context should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {string} versionNumber The version number for which the default start context should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultSampleContextForVersion: async (definitionId: string, versionNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            if (definitionId === null || definitionId === undefined) {
                throw new RequiredError('definitionId','Required parameter definitionId was null or undefined when calling getDefaultSampleContextForVersion.');
            }
            // verify required parameter 'versionNumber' is not null or undefined
            if (versionNumber === null || versionNumber === undefined) {
                throw new RequiredError('versionNumber','Required parameter versionNumber was null or undefined when calling getDefaultSampleContextForVersion.');
            }
            const localVarPath = `/v1/workflow-definitions/{definitionId}/versions/{versionNumber}/sample-contexts/default-start-context`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)))
                .replace(`{${"versionNumber"}}`, encodeURIComponent(String(versionNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the latest version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:   WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve workflow definition by ID
         * @param {string} definitionId The ID of the workflow definition for which the latest version should be retrieved. The ID is at most 64 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinition: async (definitionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            if (definitionId === null || definitionId === undefined) {
                throw new RequiredError('definitionId','Required parameter definitionId was null or undefined when calling getDefinition.');
            }
            const localVarPath = `/v1/workflow-definitions/{definitionId}`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the specified version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve workflow definition by ID and version number
         * @param {string} definitionId The ID of the workflow definition which should be retrieved. The ID is at most 64 characters long.
         * @param {string} versionNumber The version number of the workflow definition that should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinitionVersion: async (definitionId: string, versionNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            if (definitionId === null || definitionId === undefined) {
                throw new RequiredError('definitionId','Required parameter definitionId was null or undefined when calling getDefinitionVersion.');
            }
            // verify required parameter 'versionNumber' is not null or undefined
            if (versionNumber === null || versionNumber === undefined) {
                throw new RequiredError('versionNumber','Required parameter versionNumber was null or undefined when calling getDefinitionVersion.');
            }
            const localVarPath = `/v1/workflow-definitions/{definitionId}/versions/{versionNumber}`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)))
                .replace(`{${"versionNumber"}}`, encodeURIComponent(String(versionNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all deployed versions of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve all versions of workflow definition by ID
         * @param {string} definitionId The ID of the workflow definition for which all versions should be retrieved. The ID is at most 64 characters long.
         * @param {'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc'} [$orderby] Specify the attribute you want to sort by and the order separated by a space. If the order is omitted it is ascending by default. If not specified, the results are sorted by the \&#39;createdAt\&#39; attribute in descending order.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow definition versions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinitionVersions: async (definitionId: string, $orderby?: 'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            if (definitionId === null || definitionId === undefined) {
                throw new RequiredError('definitionId','Required parameter definitionId was null or undefined when calling getDefinitionVersions.');
            }
            const localVarPath = `/v1/workflow-definitions/{definitionId}/versions`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($inlinecount !== undefined) {
                localVarQueryParameter['$inlinecount'] = $inlinecount;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of the latest version of each revision of each deployed form definition. The request can be parameterized.  The results are sorted by the \'createdAt\' attribute in descending order.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: FORM_DEFINITION_GET 
         * @summary Retrieve all form definitions
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the form definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {'start' | 'task'} [type] Specify whether the response should be filtered by the form type. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormDefinitionsMetadata: async ($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', type?: 'start' | 'task', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/forms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($inlinecount !== undefined) {
                localVarQueryParameter['$inlinecount'] = $inlinecount;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the workflow instance with the specified workflow instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET
         * @summary Retrieve workflow instance by ID
         * @param {string} workflowInstanceId The ID of the workflow instance, which should be retrieved. The workflow instance ID is 36 characters long.
         * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance: async (workflowInstanceId: string, $expand?: 'attributes', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling getInstance.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the attachments information for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ATTACHMENTS
         * @summary Retrieve instance attachments
         * @param {string} workflowInstanceId The workflow instance ID for which the attachments should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceAttachments: async (workflowInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling getInstanceAttachments.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/attachments`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves custom workflow attributes for a workflow instance. Labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: WORKFLOW_INSTANCE_GET_ATTRIBUTES 
         * @summary Retrieve custom workflow attributes by workflow instance ID
         * @param {string} workflowInstanceId The ID of the workflow instance for which the custom workflow attributes should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceAttributes: async (workflowInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling getInstanceAttributes.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/attributes`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the workflow context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_CONTEXT
         * @summary Retrieve instance context
         * @param {string} workflowInstanceId The workflow instance ID for which the context should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceContext: async (workflowInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling getInstanceContext.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/context`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves current error messages for a workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowDeveloper, WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ERROR_MESSAGES 
         * @summary Retrieve error messages
         * @param {string} workflowInstanceId The workflow instance ID for which the error messages should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceErrorMessages: async (workflowInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling getInstanceErrorMessages.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/error-messages`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the instance-specific role assignments of the given workflow instance.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ROLES 
         * @summary Retrieve instance roles
         * @param {string} workflowInstanceId The workflow instance ID for which the roles should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceRoles: async (workflowInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling getInstanceRoles.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/roles`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Tracks the status of API requests, which the server executed asynchronously.          Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: JOB_STATUS_GET 
         * @summary Retrieve Job status
         * @param {string} jobId The ID of the job for which you check the status. Typically, the ID has been retrieved from another API request that was processed asynchronously. The ID is at most 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJob: async (jobId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            if (jobId === null || jobId === undefined) {
                throw new RequiredError('jobId','Required parameter jobId was null or undefined when calling getJob.');
            }
            const localVarPath = `/v1/jobs/{jobId}`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the form model with the specified form ID and revision.  Roles permitted to execute this operation:  - Global roles (retrieve start and task forms): WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Global roles (retrieve start forms only): WorkflowInitiator  - Scope: FORM_DEFINITION_GET_MODEL 
         * @summary Retrieve form model by ID and revision.
         * @param {string} formId The ID of the form for which the model should be retrieved.
         * @param {string} revisionId The revision of the form for which the model should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelByIdAndRevision: async (formId: string, revisionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            if (formId === null || formId === undefined) {
                throw new RequiredError('formId','Required parameter formId was null or undefined when calling getModelByIdAndRevision.');
            }
            // verify required parameter 'revisionId' is not null or undefined
            if (revisionId === null || revisionId === undefined) {
                throw new RequiredError('revisionId','Required parameter revisionId was null or undefined when calling getModelByIdAndRevision.');
            }
            const localVarPath = `/v1/forms/{formId}/revisions/{revisionId}/model`
                .replace(`{${"formId"}}`, encodeURIComponent(String(formId)))
                .replace(`{${"revisionId"}}`, encodeURIComponent(String(revisionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the model of the specified version of the specified form definition.    Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin, WorkflowDeveloper   - Scope: FORM_DEFINITION_GET_MODEL 
         * @summary Retrieve form model by ID and version number.
         * @param {string} formId The form ID for which the model should be retrieved. The form definition ID is at most 255 characters long.
         * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelByIdAndVersion: async (formId: string, versionNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            if (formId === null || formId === undefined) {
                throw new RequiredError('formId','Required parameter formId was null or undefined when calling getModelByIdAndVersion.');
            }
            // verify required parameter 'versionNumber' is not null or undefined
            if (versionNumber === null || versionNumber === undefined) {
                throw new RequiredError('versionNumber','Required parameter versionNumber was null or undefined when calling getModelByIdAndVersion.');
            }
            const localVarPath = `/v1/forms/{formId}/versions/{versionNumber}/model`
                .replace(`{${"formId"}}`, encodeURIComponent(String(formId)))
                .replace(`{${"versionNumber"}}`, encodeURIComponent(String(versionNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the model of the latest version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET_MODEL 
         * @summary Retrieve workflow definition model by ID
         * @param {string} definitionId The workflow definition ID for which the latest model should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelForDefinition: async (definitionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            if (definitionId === null || definitionId === undefined) {
                throw new RequiredError('definitionId','Required parameter definitionId was null or undefined when calling getModelForDefinition.');
            }
            const localVarPath = `/v1/workflow-definitions/{definitionId}/model`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the model of the specified version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET_MODEL 
         * @summary Retrieve workflow definition model by ID and version number
         * @param {string} definitionId The workflow definition ID for which the model should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelForDefinitionVersion: async (definitionId: string, versionNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            if (definitionId === null || definitionId === undefined) {
                throw new RequiredError('definitionId','Required parameter definitionId was null or undefined when calling getModelForDefinitionVersion.');
            }
            // verify required parameter 'versionNumber' is not null or undefined
            if (versionNumber === null || versionNumber === undefined) {
                throw new RequiredError('versionNumber','Required parameter versionNumber was null or undefined when calling getModelForDefinitionVersion.');
            }
            const localVarPath = `/v1/workflow-definitions/{definitionId}/versions/{versionNumber}/model`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)))
                .replace(`{${"versionNumber"}}`, encodeURIComponent(String(versionNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Completely erases all workflow definitions, all workflow instances, and all form definitions.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: DATA_PURGE 
         * @summary Purge instances and definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purge: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/purge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of the latest version of each deployed workflow definition. The request can be parameterized.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve all workflow definitions
         * @param {'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc'} [$orderby] Specify the attribute you want to sort by and the order separated by a space. If the order is omitted it is ascending by default. If not specified, the results are sorted by the \&#39;createdAt\&#39; attribute in descending order.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryDefinitions: async ($orderby?: 'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/workflow-definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($inlinecount !== undefined) {
                localVarQueryParameter['$inlinecount'] = $inlinecount;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves execution logs for a given workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_EXECUTION_LOGS 
         * @summary Retrieve execution logs
         * @param {string} workflowInstanceId The workflow instance ID for which the execution logs should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryInstanceExecutionLogs: async (workflowInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling queryInstanceExecutionLogs.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/execution-logs`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves workflow instances by parameters. If no parameters are specified, all RUNNING, or ERRONEOUS instances are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If multiple parameters are specified for the same attribute or a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not given.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET 
         * @summary Retrieve all instances by query parameters
         * @param {'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc'} [$orderby] The attribute and direction by which workflow instances are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. If sort by definitionVersion is enabled, then definitionId is also added to the sorting query. If not specified, the results are sorted by the \&#39;startedAt\&#39; attribute, in descending order.   * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * definitionId asc - Ascending, from A to Z case-sensitive.  * definitionId desc - Descending, from Z to A case-sensitive.  * definitionVersion asc - Ascending, from A to Z case-sensitive.  * definitionVersion desc - Descending, from Z to A case-sensitive.  * startedAt asc - Ascending, from A to Z case-sensitive.  * startedAt desc - Descending, from Z to A case-sensitive.  * completedAt asc - Ascending, workflow instance completion or cancelation time from the oldest to the most recent, not yet COMPLETED workflow instances first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED workflow instance to the oldest ones, not yet COMPLETED workflow instances last.  * startedBy asc - Ascending, from A to Z case-sensitive.  * startedBy desc - Descending, from Z to A case-sensitive.  * subject asc - Ascending, from A to Z case-sensitive, workflow instances without subject first.  * subject desc - Descending, from Z to A case-sensitive, workflow instances without subject last.  * businessKey asc - Ascending, from A to Z case-sensitive, workflow instances without business key first.  * businessKey desc - Descending, from Z to A case-sensitive, workflow instances without business key last.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow instances, which match the search criteria, should be returned as a value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. 
         * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {string} [id] Specify the workflow instance ID. The workflow instance ID is 36 characters long.
         * @param {string} [definitionId] Specify the ID of the workflow definition. The ID is at most 64 characters long.
         * @param {string} [definitionVersion] Specify the version of the workflow definition.
         * @param {'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED'} [status] Specify the status of the workflow instance. The values are not case-sensitive.
         * @param {string} [startedAt] Specify at what time the workflow instance was started. Supports two date formats 1) yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2) yyyyMMddHHmmss.SSS.
         * @param {string} [startedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [startedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [completedAt] Specify at what time the workflow instance was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS 
         * @param {string} [completedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [completedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [startedBy] Specify the user who started the workflow instance, in UTF-8 encoding. The user ID is at most 255 characters long.
         * @param {string} [subject] Specify the subject of the workflow instance, in UTF-8 encoding. The subject of a workflow instance is limited to 255 characters.
         * @param {string} [containsText] Specify the text to search for, in UTF-8 encoding. Searches the id, definitionId, subject, startedBy, and businessKey attributes of the workflow instances. The maximum length of these attributes is 255 characters. 
         * @param {string} [businessKey] Specify the business key of the workflow instance, in UTF-8 encoding. The business key of a workflow instance is limited to 255 characters.
         * @param {string} [rootInstanceId] Specify the workflow root instance ID.  The workflow root instance ID is 36 characters long.
         * @param {string} [parentInstanceId] Specify the workflow parent instance ID.  The workflow parent instance ID is 36 characters long or it can be null.
         * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters workflow instances by the value of the custom workflow attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom workflow attributes with different IDs are present in the URL, only workflow instances which contain all of them with the values specified will be returned as a response to the request. If a query by custom workflow attributes matches too many workflow definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryInstances: async ($orderby?: 'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributes', id?: string, definitionId?: string, definitionVersion?: string, status?: 'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED', startedAt?: string, startedFrom?: string, startedUpTo?: string, completedAt?: string, completedFrom?: string, completedUpTo?: string, startedBy?: string, subject?: string, containsText?: string, businessKey?: string, rootInstanceId?: string, parentInstanceId?: string, attributesExampleCustomAttribute?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/workflow-instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($inlinecount !== undefined) {
                localVarQueryParameter['$inlinecount'] = $inlinecount;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (definitionId !== undefined) {
                localVarQueryParameter['definitionId'] = definitionId;
            }

            if (definitionVersion !== undefined) {
                localVarQueryParameter['definitionVersion'] = definitionVersion;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (startedAt !== undefined) {
                localVarQueryParameter['startedAt'] = startedAt;
            }

            if (startedFrom !== undefined) {
                localVarQueryParameter['startedFrom'] = startedFrom;
            }

            if (startedUpTo !== undefined) {
                localVarQueryParameter['startedUpTo'] = startedUpTo;
            }

            if (completedAt !== undefined) {
                localVarQueryParameter['completedAt'] = completedAt;
            }

            if (completedFrom !== undefined) {
                localVarQueryParameter['completedFrom'] = completedFrom;
            }

            if (completedUpTo !== undefined) {
                localVarQueryParameter['completedUpTo'] = completedUpTo;
            }

            if (startedBy !== undefined) {
                localVarQueryParameter['startedBy'] = startedBy;
            }

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }

            if (containsText !== undefined) {
                localVarQueryParameter['containsText'] = containsText;
            }

            if (businessKey !== undefined) {
                localVarQueryParameter['businessKey'] = businessKey;
            }

            if (rootInstanceId !== undefined) {
                localVarQueryParameter['rootInstanceId'] = rootInstanceId;
            }

            if (parentInstanceId !== undefined) {
                localVarQueryParameter['parentInstanceId'] = parentInstanceId;
            }

            if (attributesExampleCustomAttribute !== undefined) {
                localVarQueryParameter['attributes.ExampleCustomAttribute'] = attributesExampleCustomAttribute;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a message to a set of workflow instances for consumption in intermediate message events. The message is identified by the name specified in the workflow model (request body parameter \'definitionId\')  and parameters identifying the workflow instances that should consume the message.   The message is consumed by the workflow instances that match the following criteria:  * The instance can be a specific match when using its workflow instance ID (request body parameter \'workflowInstanceId\').  Or the instance is a generic match when using the ID of the workflow model together with the business key (request body parameters \'workflowDefinitionId\' respectively \'businessKey\'). You can either use the specific or generic match but not both in the same call.  * The workflow instance is not in the SUSPENDED state.  * The workflow instance currently waits at the intermediate message event referring to the specified message.  The business key of a workflow instance matches if the business key specified in the request body is the same.    Roles permitted to execute this operation:  - Global roles:  WorkflowMessageSender  - Scope: MESSAGE_SEND
         * @summary Send message
         * @param {SendMessagePayload} sendMessagePayload Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage: async (sendMessagePayload: SendMessagePayload, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendMessagePayload' is not null or undefined
            if (sendMessagePayload === null || sendMessagePayload === undefined) {
                throw new RequiredError('sendMessagePayload','Required parameter sendMessagePayload was null or undefined when calling sendMessage.');
            }
            const localVarPath = `/v1/messages/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof sendMessagePayload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(sendMessagePayload !== undefined ? sendMessagePayload : {}) : (sendMessagePayload || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Overrides the attachments information for a workflow instance independent of its status.  Take special care when using this API, because it will override the workflow attachments, that is, it might change the workflow   in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ATTACHMENTS
         * @summary Overwrite instance attachments
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the attachments should be overridden. The workflow instance ID is 36 characters long.
         * @param {AttachmentsContext} attachmentsContext Specify the new information according to the given schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setInstanceAttachments: async (workflowInstanceId: string, attachmentsContext: AttachmentsContext, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling setInstanceAttachments.');
            }
            // verify required parameter 'attachmentsContext' is not null or undefined
            if (attachmentsContext === null || attachmentsContext === undefined) {
                throw new RequiredError('attachmentsContext','Required parameter attachmentsContext was null or undefined when calling setInstanceAttachments.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/attachments`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof attachmentsContext !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(attachmentsContext !== undefined ? attachmentsContext : {}) : (attachmentsContext || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Overrides the context for a workflow instance independent of its status.   Take special care when using this API, because it will override the workflow context, that is, it might change the workflow context  in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.  Refer to PATCH on the parent resource and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
         * @summary Overwrite instance context
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be overridden. The workflow instance ID is 36 characters long.
         * @param {object} body Specify the new context according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setInstanceContext: async (workflowInstanceId: string, body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling setInstanceContext.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling setInstanceContext.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/context`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts a new workflow instance of the provided workflow definition. Specify the ID of the workflow definition in the body. The workflow instance automatically starts based on the latest deployed version of the definition.  Roles permitted to execute this operation:  - Global roles: WorkflowInitiator  - Scope: WORKFLOW_INSTANCE_START 
         * @summary Start a new instance
         * @param {WorkflowInstanceStartPayload} workflowInstanceStartPayload Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startInstance: async (workflowInstanceStartPayload: WorkflowInstanceStartPayload, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceStartPayload' is not null or undefined
            if (workflowInstanceStartPayload === null || workflowInstanceStartPayload === undefined) {
                throw new RequiredError('workflowInstanceStartPayload','Required parameter workflowInstanceStartPayload was null or undefined when calling startInstance.');
            }
            const localVarPath = `/v1/workflow-instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof workflowInstanceStartPayload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(workflowInstanceStartPayload !== undefined ? workflowInstanceStartPayload : {}) : (workflowInstanceStartPayload || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Undeploys all versions of an existing workflow definition and deletes the corresponding workflow instances. Once the undeployment has started, you can no longer start a new workflow instance based on this workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: WORKFLOW_DEFINITION_UNDEPLOY 
         * @summary Delete workflow definition
         * @param {string} definitionId The ID of the workflow definition to be undeployed. The ID is at most 64 characters long.
         * @param {boolean} [cascade] Whether the undeployment of the workflow definition deletes active workflow instances. If the parameter is false or not specified and there are active workflow instances for the specified workflow definition,  the undeployment is rejected. An instance is considered active if it is in status RUNNING, ERRONEOUS, or SUSPENDED. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        undeployDefinition: async (definitionId: string, cascade?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            if (definitionId === null || definitionId === undefined) {
                throw new RequiredError('definitionId','Required parameter definitionId was null or undefined when calling undeployDefinition.');
            }
            const localVarPath = `/v1/workflow-definitions/{definitionId}`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (cascade !== undefined) {
                localVarQueryParameter['cascade'] = cascade;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Undeploys all versions of an existing form.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: FORM_DEFINITION_UNDEPLOY 
         * @summary Delete a form.
         * @param {string} formId The ID of the form you want to undeploy. The ID is at most 255 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        undeployForm: async (formId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            if (formId === null || formId === undefined) {
                throw new RequiredError('formId','Required parameter formId was null or undefined when calling undeployForm.');
            }
            const localVarPath = `/v1/forms/{formId}`
                .replace(`{${"formId"}}`, encodeURIComponent(String(formId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies the properties of a given workflow instance, for example, sets its status to CANCELED or RUNNING.  Status change effects may not take effect immediately, due to asynchronous processing of the request. When you change the status to CANCELED, note the following:  * Workflow instances in CANCELED status are considered final, that is, no further changes are allowed. This is valid as well for other APIs and the processing according to the workflow definition.  * Workflow instances in CANCELED status stop processing as soon as the system allows.  When you are changing the status to SUSPENDED, note the following:  * Status SUSPENDED manually and temporarily suspends processing.  * Workflow instances in SUSPENDED status stop processing as soon as the system allows.  * Workflow instances remain in SUSPENDED status until a status change to RUNNING or CANCELED is requested.  * While the workflow instance status reported by the respective API might change with immediate effect, follow-up actions might only be successful, after asynchronous processing within the workflow instance actually has stopped. To check whether asynchronous processing is ongoing, analyze the execution logs or check the workflow definition structure.  When you are changing the status to RUNNING, note the following:  * For workflow instances in ERRONEOUS status, this retries the failed activities. If these activities continue failing, the workflow instance automatically moves again into ERRONEOUS status.  * If the workflow instance had previously been suspended while in ERRONEOUS status, failed activities, such as service tasks, are retried.   Roles permitted to execute this operation:  - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: WORKFLOW_INSTANCE_CANCEL, WORKFLOW_INSTANCE_RETRY_RESUME, WORKFLOW_INSTANCE_SUSPEND
         * @summary Update instance
         * @param {string} workflowInstanceId The ID of the workflow instance, which should be modified. The workflow instance ID is 36 characters long.
         * @param {WorkflowInstanceUpdatePayload} workflowInstanceUpdatePayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstance: async (workflowInstanceId: string, workflowInstanceUpdatePayload: WorkflowInstanceUpdatePayload, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling updateInstance.');
            }
            // verify required parameter 'workflowInstanceUpdatePayload' is not null or undefined
            if (workflowInstanceUpdatePayload === null || workflowInstanceUpdatePayload === undefined) {
                throw new RequiredError('workflowInstanceUpdatePayload','Required parameter workflowInstanceUpdatePayload was null or undefined when calling updateInstance.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof workflowInstanceUpdatePayload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(workflowInstanceUpdatePayload !== undefined ? workflowInstanceUpdatePayload : {}) : (workflowInstanceUpdatePayload || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies parts of the context for a workflow instance independent of its status.  Take special care when using this API, because it might change the workflow context in ways that are incompatible with the expectations  of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and make sure that  the execution has come to a halt, that is, that no further steps are being added to the execution log. Refer to PATCH on the parent resource  and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
         * @summary Update instance context
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be modified. The workflow instance ID is 36 characters long.
         * @param {object} body Specify the modified parts of the context. Note that the modification is limited by the allowed content length of the request body. The length is restricted to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstanceContext: async (workflowInstanceId: string, body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling updateInstanceContext.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateInstanceContext.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/context`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the instance-specific role assignments of the given workflow instance.  Any of the role assignment properties that is present in the request body will overwrite the existing assignments with the new assignments. Any properties that are either null or not present at all in the request body will leave the corresponding role assignments unchanged.  The maximum number of users and groups that can be assigned to each role is limited to 100.  The use of expressions as part of the role assignments (e.g. ${context.variable}) is only allowed for workflow instances that are not yet COMPLETED or CANCELED.  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ROLES  Examples: - Setting **viewerUsers: \"UserId1, UserId8\"** will remove all existing user assignments of the viewer role and then assign   only the two specified users to the role. - Setting **viewerUsers: \"\"** will remove all existing user assignments of the viewer role. - Specifying any non-null **viewerUsers** in the request body and leaving out **viewerGroups** will update the user   assignments and leave the group assignments unchanged.
         * @summary Update instance roles
         * @param {string} workflowInstanceId The workflow instance ID for which the role assignments should be updated. The workflow instance ID is 36 characters long.
         * @param {WorkflowInstanceRolesUpdatePayload} workflowInstanceRolesUpdatePayload Specify new role assignments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstanceRoles: async (workflowInstanceId: string, workflowInstanceRolesUpdatePayload: WorkflowInstanceRolesUpdatePayload, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling updateInstanceRoles.');
            }
            // verify required parameter 'workflowInstanceRolesUpdatePayload' is not null or undefined
            if (workflowInstanceRolesUpdatePayload === null || workflowInstanceRolesUpdatePayload === undefined) {
                throw new RequiredError('workflowInstanceRolesUpdatePayload','Required parameter workflowInstanceRolesUpdatePayload was null or undefined when calling updateInstanceRoles.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/roles`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof workflowInstanceRolesUpdatePayload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(workflowInstanceRolesUpdatePayload !== undefined ? workflowInstanceRolesUpdatePayload : {}) : (workflowInstanceRolesUpdatePayload || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies the given workflow instances according to the specified operations. Currently, the only operation supported is the deletion of workflow instances. You can at most specify 10000 instances to delete in one API call.  Roles permitted to execute this operation: - Global roles: WorkflowTenantOperator - Scope: WORKFLOW_INSTANCES_UPDATE
         * @summary Delete instance by ID
         * @param {Array<WorkflowInstancesUpdatePayload>} workflowInstancesUpdatePayload Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstances: async (workflowInstancesUpdatePayload: Array<WorkflowInstancesUpdatePayload>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstancesUpdatePayload' is not null or undefined
            if (workflowInstancesUpdatePayload === null || workflowInstancesUpdatePayload === undefined) {
                throw new RequiredError('workflowInstancesUpdatePayload','Required parameter workflowInstancesUpdatePayload was null or undefined when calling updateInstances.');
            }
            const localVarPath = `/v1/workflow-instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof workflowInstancesUpdatePayload !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(workflowInstancesUpdatePayload !== undefined ? workflowInstancesUpdatePayload : {}) : (workflowInstancesUpdatePayload || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieves the default start context of the latest version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowInitiator  - Scope: WORKFLOW_DEFINITION_GET_SAMPLE_CONTEXT 
         * @summary Retrieve sample start context of workflow definition by ID
         * @param {string} definitionId The workflow definition ID for which the default start context should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefaultSampleContext(definitionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SampleContext>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDefaultSampleContext(definitionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the default start context of the specified version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowInitiator  - Scope: WORKFLOW_DEFINITION_GET_SAMPLE_CONTEXT 
         * @summary Retrieve sample start context of workflow definition by ID and version number
         * @param {string} definitionId The workflow definition ID for which the default start context should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {string} versionNumber The version number for which the default start context should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefaultSampleContextForVersion(definitionId: string, versionNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SampleContext>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDefaultSampleContextForVersion(definitionId, versionNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the latest version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:   WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve workflow definition by ID
         * @param {string} definitionId The ID of the workflow definition for which the latest version should be retrieved. The ID is at most 64 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefinition(definitionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowDefinition>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDefinition(definitionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the specified version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve workflow definition by ID and version number
         * @param {string} definitionId The ID of the workflow definition which should be retrieved. The ID is at most 64 characters long.
         * @param {string} versionNumber The version number of the workflow definition that should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefinitionVersion(definitionId: string, versionNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowDefinitionVersion>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDefinitionVersion(definitionId, versionNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all deployed versions of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve all versions of workflow definition by ID
         * @param {string} definitionId The ID of the workflow definition for which all versions should be retrieved. The ID is at most 64 characters long.
         * @param {'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc'} [$orderby] Specify the attribute you want to sort by and the order separated by a space. If the order is omitted it is ascending by default. If not specified, the results are sorted by the \&#39;createdAt\&#39; attribute in descending order.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow definition versions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefinitionVersions(definitionId: string, $orderby?: 'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowDefinitionVersion>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDefinitionVersions(definitionId, $orderby, $skip, $top, $inlinecount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of the latest version of each revision of each deployed form definition. The request can be parameterized.  The results are sorted by the \'createdAt\' attribute in descending order.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: FORM_DEFINITION_GET 
         * @summary Retrieve all form definitions
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the form definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {'start' | 'task'} [type] Specify whether the response should be filtered by the form type. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFormDefinitionsMetadata($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', type?: 'start' | 'task', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FormMetadata>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getFormDefinitionsMetadata($skip, $top, $inlinecount, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the workflow instance with the specified workflow instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET
         * @summary Retrieve workflow instance by ID
         * @param {string} workflowInstanceId The ID of the workflow instance, which should be retrieved. The workflow instance ID is 36 characters long.
         * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstance(workflowInstanceId: string, $expand?: 'attributes', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowInstance>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getInstance(workflowInstanceId, $expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the attachments information for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ATTACHMENTS
         * @summary Retrieve instance attachments
         * @param {string} workflowInstanceId The workflow instance ID for which the attachments should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstanceAttachments(workflowInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttachmentsContext>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getInstanceAttachments(workflowInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves custom workflow attributes for a workflow instance. Labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: WORKFLOW_INSTANCE_GET_ATTRIBUTES 
         * @summary Retrieve custom workflow attributes by workflow instance ID
         * @param {string} workflowInstanceId The ID of the workflow instance for which the custom workflow attributes should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstanceAttributes(workflowInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomAttribute>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getInstanceAttributes(workflowInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the workflow context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_CONTEXT
         * @summary Retrieve instance context
         * @param {string} workflowInstanceId The workflow instance ID for which the context should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstanceContext(workflowInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getInstanceContext(workflowInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves current error messages for a workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowDeveloper, WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ERROR_MESSAGES 
         * @summary Retrieve error messages
         * @param {string} workflowInstanceId The workflow instance ID for which the error messages should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstanceErrorMessages(workflowInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowInstanceErrorMessage>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getInstanceErrorMessages(workflowInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the instance-specific role assignments of the given workflow instance.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ROLES 
         * @summary Retrieve instance roles
         * @param {string} workflowInstanceId The workflow instance ID for which the roles should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInstanceRoles(workflowInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowInstanceRoles>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getInstanceRoles(workflowInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Tracks the status of API requests, which the server executed asynchronously.          Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: JOB_STATUS_GET 
         * @summary Retrieve Job status
         * @param {string} jobId The ID of the job for which you check the status. Typically, the ID has been retrieved from another API request that was processed asynchronously. The ID is at most 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJob(jobId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getJob(jobId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the form model with the specified form ID and revision.  Roles permitted to execute this operation:  - Global roles (retrieve start and task forms): WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Global roles (retrieve start forms only): WorkflowInitiator  - Scope: FORM_DEFINITION_GET_MODEL 
         * @summary Retrieve form model by ID and revision.
         * @param {string} formId The ID of the form for which the model should be retrieved.
         * @param {string} revisionId The revision of the form for which the model should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModelByIdAndRevision(formId: string, revisionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormModel>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getModelByIdAndRevision(formId, revisionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the model of the specified version of the specified form definition.    Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin, WorkflowDeveloper   - Scope: FORM_DEFINITION_GET_MODEL 
         * @summary Retrieve form model by ID and version number.
         * @param {string} formId The form ID for which the model should be retrieved. The form definition ID is at most 255 characters long.
         * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModelByIdAndVersion(formId: string, versionNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormModel>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getModelByIdAndVersion(formId, versionNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the model of the latest version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET_MODEL 
         * @summary Retrieve workflow definition model by ID
         * @param {string} definitionId The workflow definition ID for which the latest model should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModelForDefinition(definitionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowModel>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getModelForDefinition(definitionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the model of the specified version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET_MODEL 
         * @summary Retrieve workflow definition model by ID and version number
         * @param {string} definitionId The workflow definition ID for which the model should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModelForDefinitionVersion(definitionId: string, versionNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowModel>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getModelForDefinitionVersion(definitionId, versionNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Completely erases all workflow definitions, all workflow instances, and all form definitions.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: DATA_PURGE 
         * @summary Purge instances and definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purge(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).purge(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of the latest version of each deployed workflow definition. The request can be parameterized.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve all workflow definitions
         * @param {'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc'} [$orderby] Specify the attribute you want to sort by and the order separated by a space. If the order is omitted it is ascending by default. If not specified, the results are sorted by the \&#39;createdAt\&#39; attribute in descending order.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryDefinitions($orderby?: 'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowDefinition>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).queryDefinitions($orderby, $skip, $top, $inlinecount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves execution logs for a given workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_EXECUTION_LOGS 
         * @summary Retrieve execution logs
         * @param {string} workflowInstanceId The workflow instance ID for which the execution logs should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryInstanceExecutionLogs(workflowInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowInstanceExecutionLog>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).queryInstanceExecutionLogs(workflowInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves workflow instances by parameters. If no parameters are specified, all RUNNING, or ERRONEOUS instances are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If multiple parameters are specified for the same attribute or a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not given.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET 
         * @summary Retrieve all instances by query parameters
         * @param {'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc'} [$orderby] The attribute and direction by which workflow instances are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. If sort by definitionVersion is enabled, then definitionId is also added to the sorting query. If not specified, the results are sorted by the \&#39;startedAt\&#39; attribute, in descending order.   * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * definitionId asc - Ascending, from A to Z case-sensitive.  * definitionId desc - Descending, from Z to A case-sensitive.  * definitionVersion asc - Ascending, from A to Z case-sensitive.  * definitionVersion desc - Descending, from Z to A case-sensitive.  * startedAt asc - Ascending, from A to Z case-sensitive.  * startedAt desc - Descending, from Z to A case-sensitive.  * completedAt asc - Ascending, workflow instance completion or cancelation time from the oldest to the most recent, not yet COMPLETED workflow instances first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED workflow instance to the oldest ones, not yet COMPLETED workflow instances last.  * startedBy asc - Ascending, from A to Z case-sensitive.  * startedBy desc - Descending, from Z to A case-sensitive.  * subject asc - Ascending, from A to Z case-sensitive, workflow instances without subject first.  * subject desc - Descending, from Z to A case-sensitive, workflow instances without subject last.  * businessKey asc - Ascending, from A to Z case-sensitive, workflow instances without business key first.  * businessKey desc - Descending, from Z to A case-sensitive, workflow instances without business key last.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow instances, which match the search criteria, should be returned as a value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. 
         * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {string} [id] Specify the workflow instance ID. The workflow instance ID is 36 characters long.
         * @param {string} [definitionId] Specify the ID of the workflow definition. The ID is at most 64 characters long.
         * @param {string} [definitionVersion] Specify the version of the workflow definition.
         * @param {'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED'} [status] Specify the status of the workflow instance. The values are not case-sensitive.
         * @param {string} [startedAt] Specify at what time the workflow instance was started. Supports two date formats 1) yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2) yyyyMMddHHmmss.SSS.
         * @param {string} [startedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [startedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [completedAt] Specify at what time the workflow instance was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS 
         * @param {string} [completedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [completedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [startedBy] Specify the user who started the workflow instance, in UTF-8 encoding. The user ID is at most 255 characters long.
         * @param {string} [subject] Specify the subject of the workflow instance, in UTF-8 encoding. The subject of a workflow instance is limited to 255 characters.
         * @param {string} [containsText] Specify the text to search for, in UTF-8 encoding. Searches the id, definitionId, subject, startedBy, and businessKey attributes of the workflow instances. The maximum length of these attributes is 255 characters. 
         * @param {string} [businessKey] Specify the business key of the workflow instance, in UTF-8 encoding. The business key of a workflow instance is limited to 255 characters.
         * @param {string} [rootInstanceId] Specify the workflow root instance ID.  The workflow root instance ID is 36 characters long.
         * @param {string} [parentInstanceId] Specify the workflow parent instance ID.  The workflow parent instance ID is 36 characters long or it can be null.
         * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters workflow instances by the value of the custom workflow attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom workflow attributes with different IDs are present in the URL, only workflow instances which contain all of them with the values specified will be returned as a response to the request. If a query by custom workflow attributes matches too many workflow definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryInstances($orderby?: 'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributes', id?: string, definitionId?: string, definitionVersion?: string, status?: 'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED', startedAt?: string, startedFrom?: string, startedUpTo?: string, completedAt?: string, completedFrom?: string, completedUpTo?: string, startedBy?: string, subject?: string, containsText?: string, businessKey?: string, rootInstanceId?: string, parentInstanceId?: string, attributesExampleCustomAttribute?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowInstance>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).queryInstances($orderby, $skip, $top, $inlinecount, $expand, id, definitionId, definitionVersion, status, startedAt, startedFrom, startedUpTo, completedAt, completedFrom, completedUpTo, startedBy, subject, containsText, businessKey, rootInstanceId, parentInstanceId, attributesExampleCustomAttribute, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sends a message to a set of workflow instances for consumption in intermediate message events. The message is identified by the name specified in the workflow model (request body parameter \'definitionId\')  and parameters identifying the workflow instances that should consume the message.   The message is consumed by the workflow instances that match the following criteria:  * The instance can be a specific match when using its workflow instance ID (request body parameter \'workflowInstanceId\').  Or the instance is a generic match when using the ID of the workflow model together with the business key (request body parameters \'workflowDefinitionId\' respectively \'businessKey\'). You can either use the specific or generic match but not both in the same call.  * The workflow instance is not in the SUSPENDED state.  * The workflow instance currently waits at the intermediate message event referring to the specified message.  The business key of a workflow instance matches if the business key specified in the request body is the same.    Roles permitted to execute this operation:  - Global roles:  WorkflowMessageSender  - Scope: MESSAGE_SEND
         * @summary Send message
         * @param {SendMessagePayload} sendMessagePayload Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMessage(sendMessagePayload: SendMessagePayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConsumingWorkflowInstance>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).sendMessage(sendMessagePayload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Overrides the attachments information for a workflow instance independent of its status.  Take special care when using this API, because it will override the workflow attachments, that is, it might change the workflow   in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ATTACHMENTS
         * @summary Overwrite instance attachments
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the attachments should be overridden. The workflow instance ID is 36 characters long.
         * @param {AttachmentsContext} attachmentsContext Specify the new information according to the given schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setInstanceAttachments(workflowInstanceId: string, attachmentsContext: AttachmentsContext, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).setInstanceAttachments(workflowInstanceId, attachmentsContext, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Overrides the context for a workflow instance independent of its status.   Take special care when using this API, because it will override the workflow context, that is, it might change the workflow context  in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.  Refer to PATCH on the parent resource and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
         * @summary Overwrite instance context
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be overridden. The workflow instance ID is 36 characters long.
         * @param {object} body Specify the new context according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setInstanceContext(workflowInstanceId: string, body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).setInstanceContext(workflowInstanceId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Starts a new workflow instance of the provided workflow definition. Specify the ID of the workflow definition in the body. The workflow instance automatically starts based on the latest deployed version of the definition.  Roles permitted to execute this operation:  - Global roles: WorkflowInitiator  - Scope: WORKFLOW_INSTANCE_START 
         * @summary Start a new instance
         * @param {WorkflowInstanceStartPayload} workflowInstanceStartPayload Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startInstance(workflowInstanceStartPayload: WorkflowInstanceStartPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowInstance>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).startInstance(workflowInstanceStartPayload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Undeploys all versions of an existing workflow definition and deletes the corresponding workflow instances. Once the undeployment has started, you can no longer start a new workflow instance based on this workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: WORKFLOW_DEFINITION_UNDEPLOY 
         * @summary Delete workflow definition
         * @param {string} definitionId The ID of the workflow definition to be undeployed. The ID is at most 64 characters long.
         * @param {boolean} [cascade] Whether the undeployment of the workflow definition deletes active workflow instances. If the parameter is false or not specified and there are active workflow instances for the specified workflow definition,  the undeployment is rejected. An instance is considered active if it is in status RUNNING, ERRONEOUS, or SUSPENDED. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async undeployDefinition(definitionId: string, cascade?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).undeployDefinition(definitionId, cascade, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Undeploys all versions of an existing form.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: FORM_DEFINITION_UNDEPLOY 
         * @summary Delete a form.
         * @param {string} formId The ID of the form you want to undeploy. The ID is at most 255 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async undeployForm(formId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).undeployForm(formId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies the properties of a given workflow instance, for example, sets its status to CANCELED or RUNNING.  Status change effects may not take effect immediately, due to asynchronous processing of the request. When you change the status to CANCELED, note the following:  * Workflow instances in CANCELED status are considered final, that is, no further changes are allowed. This is valid as well for other APIs and the processing according to the workflow definition.  * Workflow instances in CANCELED status stop processing as soon as the system allows.  When you are changing the status to SUSPENDED, note the following:  * Status SUSPENDED manually and temporarily suspends processing.  * Workflow instances in SUSPENDED status stop processing as soon as the system allows.  * Workflow instances remain in SUSPENDED status until a status change to RUNNING or CANCELED is requested.  * While the workflow instance status reported by the respective API might change with immediate effect, follow-up actions might only be successful, after asynchronous processing within the workflow instance actually has stopped. To check whether asynchronous processing is ongoing, analyze the execution logs or check the workflow definition structure.  When you are changing the status to RUNNING, note the following:  * For workflow instances in ERRONEOUS status, this retries the failed activities. If these activities continue failing, the workflow instance automatically moves again into ERRONEOUS status.  * If the workflow instance had previously been suspended while in ERRONEOUS status, failed activities, such as service tasks, are retried.   Roles permitted to execute this operation:  - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: WORKFLOW_INSTANCE_CANCEL, WORKFLOW_INSTANCE_RETRY_RESUME, WORKFLOW_INSTANCE_SUSPEND
         * @summary Update instance
         * @param {string} workflowInstanceId The ID of the workflow instance, which should be modified. The workflow instance ID is 36 characters long.
         * @param {WorkflowInstanceUpdatePayload} workflowInstanceUpdatePayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInstance(workflowInstanceId: string, workflowInstanceUpdatePayload: WorkflowInstanceUpdatePayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateInstance(workflowInstanceId, workflowInstanceUpdatePayload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies parts of the context for a workflow instance independent of its status.  Take special care when using this API, because it might change the workflow context in ways that are incompatible with the expectations  of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and make sure that  the execution has come to a halt, that is, that no further steps are being added to the execution log. Refer to PATCH on the parent resource  and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
         * @summary Update instance context
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be modified. The workflow instance ID is 36 characters long.
         * @param {object} body Specify the modified parts of the context. Note that the modification is limited by the allowed content length of the request body. The length is restricted to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInstanceContext(workflowInstanceId: string, body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateInstanceContext(workflowInstanceId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the instance-specific role assignments of the given workflow instance.  Any of the role assignment properties that is present in the request body will overwrite the existing assignments with the new assignments. Any properties that are either null or not present at all in the request body will leave the corresponding role assignments unchanged.  The maximum number of users and groups that can be assigned to each role is limited to 100.  The use of expressions as part of the role assignments (e.g. ${context.variable}) is only allowed for workflow instances that are not yet COMPLETED or CANCELED.  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ROLES  Examples: - Setting **viewerUsers: \"UserId1, UserId8\"** will remove all existing user assignments of the viewer role and then assign   only the two specified users to the role. - Setting **viewerUsers: \"\"** will remove all existing user assignments of the viewer role. - Specifying any non-null **viewerUsers** in the request body and leaving out **viewerGroups** will update the user   assignments and leave the group assignments unchanged.
         * @summary Update instance roles
         * @param {string} workflowInstanceId The workflow instance ID for which the role assignments should be updated. The workflow instance ID is 36 characters long.
         * @param {WorkflowInstanceRolesUpdatePayload} workflowInstanceRolesUpdatePayload Specify new role assignments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInstanceRoles(workflowInstanceId: string, workflowInstanceRolesUpdatePayload: WorkflowInstanceRolesUpdatePayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateInstanceRoles(workflowInstanceId, workflowInstanceRolesUpdatePayload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies the given workflow instances according to the specified operations. Currently, the only operation supported is the deletion of workflow instances. You can at most specify 10000 instances to delete in one API call.  Roles permitted to execute this operation: - Global roles: WorkflowTenantOperator - Scope: WORKFLOW_INSTANCES_UPDATE
         * @summary Delete instance by ID
         * @param {Array<WorkflowInstancesUpdatePayload>} workflowInstancesUpdatePayload Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInstances(workflowInstancesUpdatePayload: Array<WorkflowInstancesUpdatePayload>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateInstances(workflowInstancesUpdatePayload, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieves the default start context of the latest version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowInitiator  - Scope: WORKFLOW_DEFINITION_GET_SAMPLE_CONTEXT 
         * @summary Retrieve sample start context of workflow definition by ID
         * @param {string} definitionId The workflow definition ID for which the default start context should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultSampleContext(definitionId: string, options?: any): AxiosPromise<SampleContext> {
            return DefaultApiFp(configuration).getDefaultSampleContext(definitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the default start context of the specified version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowInitiator  - Scope: WORKFLOW_DEFINITION_GET_SAMPLE_CONTEXT 
         * @summary Retrieve sample start context of workflow definition by ID and version number
         * @param {string} definitionId The workflow definition ID for which the default start context should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {string} versionNumber The version number for which the default start context should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultSampleContextForVersion(definitionId: string, versionNumber: string, options?: any): AxiosPromise<SampleContext> {
            return DefaultApiFp(configuration).getDefaultSampleContextForVersion(definitionId, versionNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the latest version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:   WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve workflow definition by ID
         * @param {string} definitionId The ID of the workflow definition for which the latest version should be retrieved. The ID is at most 64 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinition(definitionId: string, options?: any): AxiosPromise<WorkflowDefinition> {
            return DefaultApiFp(configuration).getDefinition(definitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the specified version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve workflow definition by ID and version number
         * @param {string} definitionId The ID of the workflow definition which should be retrieved. The ID is at most 64 characters long.
         * @param {string} versionNumber The version number of the workflow definition that should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinitionVersion(definitionId: string, versionNumber: string, options?: any): AxiosPromise<WorkflowDefinitionVersion> {
            return DefaultApiFp(configuration).getDefinitionVersion(definitionId, versionNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all deployed versions of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve all versions of workflow definition by ID
         * @param {string} definitionId The ID of the workflow definition for which all versions should be retrieved. The ID is at most 64 characters long.
         * @param {'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc'} [$orderby] Specify the attribute you want to sort by and the order separated by a space. If the order is omitted it is ascending by default. If not specified, the results are sorted by the \&#39;createdAt\&#39; attribute in descending order.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow definition versions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinitionVersions(definitionId: string, $orderby?: 'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', options?: any): AxiosPromise<Array<WorkflowDefinitionVersion>> {
            return DefaultApiFp(configuration).getDefinitionVersions(definitionId, $orderby, $skip, $top, $inlinecount, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of the latest version of each revision of each deployed form definition. The request can be parameterized.  The results are sorted by the \'createdAt\' attribute in descending order.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: FORM_DEFINITION_GET 
         * @summary Retrieve all form definitions
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the form definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {'start' | 'task'} [type] Specify whether the response should be filtered by the form type. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormDefinitionsMetadata($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', type?: 'start' | 'task', options?: any): AxiosPromise<Array<FormMetadata>> {
            return DefaultApiFp(configuration).getFormDefinitionsMetadata($skip, $top, $inlinecount, type, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the workflow instance with the specified workflow instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET
         * @summary Retrieve workflow instance by ID
         * @param {string} workflowInstanceId The ID of the workflow instance, which should be retrieved. The workflow instance ID is 36 characters long.
         * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstance(workflowInstanceId: string, $expand?: 'attributes', options?: any): AxiosPromise<WorkflowInstance> {
            return DefaultApiFp(configuration).getInstance(workflowInstanceId, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the attachments information for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ATTACHMENTS
         * @summary Retrieve instance attachments
         * @param {string} workflowInstanceId The workflow instance ID for which the attachments should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceAttachments(workflowInstanceId: string, options?: any): AxiosPromise<AttachmentsContext> {
            return DefaultApiFp(configuration).getInstanceAttachments(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves custom workflow attributes for a workflow instance. Labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: WORKFLOW_INSTANCE_GET_ATTRIBUTES 
         * @summary Retrieve custom workflow attributes by workflow instance ID
         * @param {string} workflowInstanceId The ID of the workflow instance for which the custom workflow attributes should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceAttributes(workflowInstanceId: string, options?: any): AxiosPromise<Array<CustomAttribute>> {
            return DefaultApiFp(configuration).getInstanceAttributes(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the workflow context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_CONTEXT
         * @summary Retrieve instance context
         * @param {string} workflowInstanceId The workflow instance ID for which the context should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceContext(workflowInstanceId: string, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).getInstanceContext(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves current error messages for a workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowDeveloper, WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ERROR_MESSAGES 
         * @summary Retrieve error messages
         * @param {string} workflowInstanceId The workflow instance ID for which the error messages should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceErrorMessages(workflowInstanceId: string, options?: any): AxiosPromise<Array<WorkflowInstanceErrorMessage>> {
            return DefaultApiFp(configuration).getInstanceErrorMessages(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the instance-specific role assignments of the given workflow instance.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ROLES 
         * @summary Retrieve instance roles
         * @param {string} workflowInstanceId The workflow instance ID for which the roles should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInstanceRoles(workflowInstanceId: string, options?: any): AxiosPromise<WorkflowInstanceRoles> {
            return DefaultApiFp(configuration).getInstanceRoles(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Tracks the status of API requests, which the server executed asynchronously.          Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: JOB_STATUS_GET 
         * @summary Retrieve Job status
         * @param {string} jobId The ID of the job for which you check the status. Typically, the ID has been retrieved from another API request that was processed asynchronously. The ID is at most 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJob(jobId: string, options?: any): AxiosPromise<Job> {
            return DefaultApiFp(configuration).getJob(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the form model with the specified form ID and revision.  Roles permitted to execute this operation:  - Global roles (retrieve start and task forms): WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Global roles (retrieve start forms only): WorkflowInitiator  - Scope: FORM_DEFINITION_GET_MODEL 
         * @summary Retrieve form model by ID and revision.
         * @param {string} formId The ID of the form for which the model should be retrieved.
         * @param {string} revisionId The revision of the form for which the model should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelByIdAndRevision(formId: string, revisionId: string, options?: any): AxiosPromise<FormModel> {
            return DefaultApiFp(configuration).getModelByIdAndRevision(formId, revisionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the model of the specified version of the specified form definition.    Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin, WorkflowDeveloper   - Scope: FORM_DEFINITION_GET_MODEL 
         * @summary Retrieve form model by ID and version number.
         * @param {string} formId The form ID for which the model should be retrieved. The form definition ID is at most 255 characters long.
         * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelByIdAndVersion(formId: string, versionNumber: string, options?: any): AxiosPromise<FormModel> {
            return DefaultApiFp(configuration).getModelByIdAndVersion(formId, versionNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the model of the latest version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET_MODEL 
         * @summary Retrieve workflow definition model by ID
         * @param {string} definitionId The workflow definition ID for which the latest model should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelForDefinition(definitionId: string, options?: any): AxiosPromise<WorkflowModel> {
            return DefaultApiFp(configuration).getModelForDefinition(definitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the model of the specified version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET_MODEL 
         * @summary Retrieve workflow definition model by ID and version number
         * @param {string} definitionId The workflow definition ID for which the model should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelForDefinitionVersion(definitionId: string, versionNumber: string, options?: any): AxiosPromise<WorkflowModel> {
            return DefaultApiFp(configuration).getModelForDefinitionVersion(definitionId, versionNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Completely erases all workflow definitions, all workflow instances, and all form definitions.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: DATA_PURGE 
         * @summary Purge instances and definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purge(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).purge(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of the latest version of each deployed workflow definition. The request can be parameterized.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve all workflow definitions
         * @param {'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc'} [$orderby] Specify the attribute you want to sort by and the order separated by a space. If the order is omitted it is ascending by default. If not specified, the results are sorted by the \&#39;createdAt\&#39; attribute in descending order.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryDefinitions($orderby?: 'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', options?: any): AxiosPromise<Array<WorkflowDefinition>> {
            return DefaultApiFp(configuration).queryDefinitions($orderby, $skip, $top, $inlinecount, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves execution logs for a given workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_EXECUTION_LOGS 
         * @summary Retrieve execution logs
         * @param {string} workflowInstanceId The workflow instance ID for which the execution logs should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryInstanceExecutionLogs(workflowInstanceId: string, options?: any): AxiosPromise<Array<WorkflowInstanceExecutionLog>> {
            return DefaultApiFp(configuration).queryInstanceExecutionLogs(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves workflow instances by parameters. If no parameters are specified, all RUNNING, or ERRONEOUS instances are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If multiple parameters are specified for the same attribute or a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not given.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET 
         * @summary Retrieve all instances by query parameters
         * @param {'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc'} [$orderby] The attribute and direction by which workflow instances are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. If sort by definitionVersion is enabled, then definitionId is also added to the sorting query. If not specified, the results are sorted by the \&#39;startedAt\&#39; attribute, in descending order.   * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * definitionId asc - Ascending, from A to Z case-sensitive.  * definitionId desc - Descending, from Z to A case-sensitive.  * definitionVersion asc - Ascending, from A to Z case-sensitive.  * definitionVersion desc - Descending, from Z to A case-sensitive.  * startedAt asc - Ascending, from A to Z case-sensitive.  * startedAt desc - Descending, from Z to A case-sensitive.  * completedAt asc - Ascending, workflow instance completion or cancelation time from the oldest to the most recent, not yet COMPLETED workflow instances first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED workflow instance to the oldest ones, not yet COMPLETED workflow instances last.  * startedBy asc - Ascending, from A to Z case-sensitive.  * startedBy desc - Descending, from Z to A case-sensitive.  * subject asc - Ascending, from A to Z case-sensitive, workflow instances without subject first.  * subject desc - Descending, from Z to A case-sensitive, workflow instances without subject last.  * businessKey asc - Ascending, from A to Z case-sensitive, workflow instances without business key first.  * businessKey desc - Descending, from Z to A case-sensitive, workflow instances without business key last.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow instances, which match the search criteria, should be returned as a value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. 
         * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {string} [id] Specify the workflow instance ID. The workflow instance ID is 36 characters long.
         * @param {string} [definitionId] Specify the ID of the workflow definition. The ID is at most 64 characters long.
         * @param {string} [definitionVersion] Specify the version of the workflow definition.
         * @param {'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED'} [status] Specify the status of the workflow instance. The values are not case-sensitive.
         * @param {string} [startedAt] Specify at what time the workflow instance was started. Supports two date formats 1) yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2) yyyyMMddHHmmss.SSS.
         * @param {string} [startedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [startedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [completedAt] Specify at what time the workflow instance was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS 
         * @param {string} [completedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [completedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [startedBy] Specify the user who started the workflow instance, in UTF-8 encoding. The user ID is at most 255 characters long.
         * @param {string} [subject] Specify the subject of the workflow instance, in UTF-8 encoding. The subject of a workflow instance is limited to 255 characters.
         * @param {string} [containsText] Specify the text to search for, in UTF-8 encoding. Searches the id, definitionId, subject, startedBy, and businessKey attributes of the workflow instances. The maximum length of these attributes is 255 characters. 
         * @param {string} [businessKey] Specify the business key of the workflow instance, in UTF-8 encoding. The business key of a workflow instance is limited to 255 characters.
         * @param {string} [rootInstanceId] Specify the workflow root instance ID.  The workflow root instance ID is 36 characters long.
         * @param {string} [parentInstanceId] Specify the workflow parent instance ID.  The workflow parent instance ID is 36 characters long or it can be null.
         * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters workflow instances by the value of the custom workflow attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom workflow attributes with different IDs are present in the URL, only workflow instances which contain all of them with the values specified will be returned as a response to the request. If a query by custom workflow attributes matches too many workflow definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryInstances($orderby?: 'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributes', id?: string, definitionId?: string, definitionVersion?: string, status?: 'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED', startedAt?: string, startedFrom?: string, startedUpTo?: string, completedAt?: string, completedFrom?: string, completedUpTo?: string, startedBy?: string, subject?: string, containsText?: string, businessKey?: string, rootInstanceId?: string, parentInstanceId?: string, attributesExampleCustomAttribute?: string, options?: any): AxiosPromise<Array<WorkflowInstance>> {
            return DefaultApiFp(configuration).queryInstances($orderby, $skip, $top, $inlinecount, $expand, id, definitionId, definitionVersion, status, startedAt, startedFrom, startedUpTo, completedAt, completedFrom, completedUpTo, startedBy, subject, containsText, businessKey, rootInstanceId, parentInstanceId, attributesExampleCustomAttribute, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a message to a set of workflow instances for consumption in intermediate message events. The message is identified by the name specified in the workflow model (request body parameter \'definitionId\')  and parameters identifying the workflow instances that should consume the message.   The message is consumed by the workflow instances that match the following criteria:  * The instance can be a specific match when using its workflow instance ID (request body parameter \'workflowInstanceId\').  Or the instance is a generic match when using the ID of the workflow model together with the business key (request body parameters \'workflowDefinitionId\' respectively \'businessKey\'). You can either use the specific or generic match but not both in the same call.  * The workflow instance is not in the SUSPENDED state.  * The workflow instance currently waits at the intermediate message event referring to the specified message.  The business key of a workflow instance matches if the business key specified in the request body is the same.    Roles permitted to execute this operation:  - Global roles:  WorkflowMessageSender  - Scope: MESSAGE_SEND
         * @summary Send message
         * @param {SendMessagePayload} sendMessagePayload Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage(sendMessagePayload: SendMessagePayload, options?: any): AxiosPromise<Array<ConsumingWorkflowInstance>> {
            return DefaultApiFp(configuration).sendMessage(sendMessagePayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Overrides the attachments information for a workflow instance independent of its status.  Take special care when using this API, because it will override the workflow attachments, that is, it might change the workflow   in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ATTACHMENTS
         * @summary Overwrite instance attachments
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the attachments should be overridden. The workflow instance ID is 36 characters long.
         * @param {AttachmentsContext} attachmentsContext Specify the new information according to the given schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setInstanceAttachments(workflowInstanceId: string, attachmentsContext: AttachmentsContext, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).setInstanceAttachments(workflowInstanceId, attachmentsContext, options).then((request) => request(axios, basePath));
        },
        /**
         * Overrides the context for a workflow instance independent of its status.   Take special care when using this API, because it will override the workflow context, that is, it might change the workflow context  in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.  Refer to PATCH on the parent resource and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
         * @summary Overwrite instance context
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be overridden. The workflow instance ID is 36 characters long.
         * @param {object} body Specify the new context according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setInstanceContext(workflowInstanceId: string, body: object, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).setInstanceContext(workflowInstanceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Starts a new workflow instance of the provided workflow definition. Specify the ID of the workflow definition in the body. The workflow instance automatically starts based on the latest deployed version of the definition.  Roles permitted to execute this operation:  - Global roles: WorkflowInitiator  - Scope: WORKFLOW_INSTANCE_START 
         * @summary Start a new instance
         * @param {WorkflowInstanceStartPayload} workflowInstanceStartPayload Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startInstance(workflowInstanceStartPayload: WorkflowInstanceStartPayload, options?: any): AxiosPromise<WorkflowInstance> {
            return DefaultApiFp(configuration).startInstance(workflowInstanceStartPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Undeploys all versions of an existing workflow definition and deletes the corresponding workflow instances. Once the undeployment has started, you can no longer start a new workflow instance based on this workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: WORKFLOW_DEFINITION_UNDEPLOY 
         * @summary Delete workflow definition
         * @param {string} definitionId The ID of the workflow definition to be undeployed. The ID is at most 64 characters long.
         * @param {boolean} [cascade] Whether the undeployment of the workflow definition deletes active workflow instances. If the parameter is false or not specified and there are active workflow instances for the specified workflow definition,  the undeployment is rejected. An instance is considered active if it is in status RUNNING, ERRONEOUS, or SUSPENDED. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        undeployDefinition(definitionId: string, cascade?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).undeployDefinition(definitionId, cascade, options).then((request) => request(axios, basePath));
        },
        /**
         * Undeploys all versions of an existing form.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: FORM_DEFINITION_UNDEPLOY 
         * @summary Delete a form.
         * @param {string} formId The ID of the form you want to undeploy. The ID is at most 255 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        undeployForm(formId: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).undeployForm(formId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies the properties of a given workflow instance, for example, sets its status to CANCELED or RUNNING.  Status change effects may not take effect immediately, due to asynchronous processing of the request. When you change the status to CANCELED, note the following:  * Workflow instances in CANCELED status are considered final, that is, no further changes are allowed. This is valid as well for other APIs and the processing according to the workflow definition.  * Workflow instances in CANCELED status stop processing as soon as the system allows.  When you are changing the status to SUSPENDED, note the following:  * Status SUSPENDED manually and temporarily suspends processing.  * Workflow instances in SUSPENDED status stop processing as soon as the system allows.  * Workflow instances remain in SUSPENDED status until a status change to RUNNING or CANCELED is requested.  * While the workflow instance status reported by the respective API might change with immediate effect, follow-up actions might only be successful, after asynchronous processing within the workflow instance actually has stopped. To check whether asynchronous processing is ongoing, analyze the execution logs or check the workflow definition structure.  When you are changing the status to RUNNING, note the following:  * For workflow instances in ERRONEOUS status, this retries the failed activities. If these activities continue failing, the workflow instance automatically moves again into ERRONEOUS status.  * If the workflow instance had previously been suspended while in ERRONEOUS status, failed activities, such as service tasks, are retried.   Roles permitted to execute this operation:  - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: WORKFLOW_INSTANCE_CANCEL, WORKFLOW_INSTANCE_RETRY_RESUME, WORKFLOW_INSTANCE_SUSPEND
         * @summary Update instance
         * @param {string} workflowInstanceId The ID of the workflow instance, which should be modified. The workflow instance ID is 36 characters long.
         * @param {WorkflowInstanceUpdatePayload} workflowInstanceUpdatePayload 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstance(workflowInstanceId: string, workflowInstanceUpdatePayload: WorkflowInstanceUpdatePayload, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateInstance(workflowInstanceId, workflowInstanceUpdatePayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies parts of the context for a workflow instance independent of its status.  Take special care when using this API, because it might change the workflow context in ways that are incompatible with the expectations  of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and make sure that  the execution has come to a halt, that is, that no further steps are being added to the execution log. Refer to PATCH on the parent resource  and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
         * @summary Update instance context
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be modified. The workflow instance ID is 36 characters long.
         * @param {object} body Specify the modified parts of the context. Note that the modification is limited by the allowed content length of the request body. The length is restricted to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstanceContext(workflowInstanceId: string, body: object, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateInstanceContext(workflowInstanceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the instance-specific role assignments of the given workflow instance.  Any of the role assignment properties that is present in the request body will overwrite the existing assignments with the new assignments. Any properties that are either null or not present at all in the request body will leave the corresponding role assignments unchanged.  The maximum number of users and groups that can be assigned to each role is limited to 100.  The use of expressions as part of the role assignments (e.g. ${context.variable}) is only allowed for workflow instances that are not yet COMPLETED or CANCELED.  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ROLES  Examples: - Setting **viewerUsers: \"UserId1, UserId8\"** will remove all existing user assignments of the viewer role and then assign   only the two specified users to the role. - Setting **viewerUsers: \"\"** will remove all existing user assignments of the viewer role. - Specifying any non-null **viewerUsers** in the request body and leaving out **viewerGroups** will update the user   assignments and leave the group assignments unchanged.
         * @summary Update instance roles
         * @param {string} workflowInstanceId The workflow instance ID for which the role assignments should be updated. The workflow instance ID is 36 characters long.
         * @param {WorkflowInstanceRolesUpdatePayload} workflowInstanceRolesUpdatePayload Specify new role assignments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstanceRoles(workflowInstanceId: string, workflowInstanceRolesUpdatePayload: WorkflowInstanceRolesUpdatePayload, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateInstanceRoles(workflowInstanceId, workflowInstanceRolesUpdatePayload, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies the given workflow instances according to the specified operations. Currently, the only operation supported is the deletion of workflow instances. You can at most specify 10000 instances to delete in one API call.  Roles permitted to execute this operation: - Global roles: WorkflowTenantOperator - Scope: WORKFLOW_INSTANCES_UPDATE
         * @summary Delete instance by ID
         * @param {Array<WorkflowInstancesUpdatePayload>} workflowInstancesUpdatePayload Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstances(workflowInstancesUpdatePayload: Array<WorkflowInstancesUpdatePayload>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateInstances(workflowInstancesUpdatePayload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Retrieves the default start context of the latest version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowInitiator  - Scope: WORKFLOW_DEFINITION_GET_SAMPLE_CONTEXT 
     * @summary Retrieve sample start context of workflow definition by ID
     * @param {string} definitionId The workflow definition ID for which the default start context should be retrieved. The workflow definition ID is at most 64 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDefaultSampleContext(definitionId: string, options?: any) {
        return DefaultApiFp(this.configuration).getDefaultSampleContext(definitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the default start context of the specified version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowInitiator  - Scope: WORKFLOW_DEFINITION_GET_SAMPLE_CONTEXT 
     * @summary Retrieve sample start context of workflow definition by ID and version number
     * @param {string} definitionId The workflow definition ID for which the default start context should be retrieved. The workflow definition ID is at most 64 characters long.
     * @param {string} versionNumber The version number for which the default start context should be retrieved. The version number consists of 1 - 10 digits.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDefaultSampleContextForVersion(definitionId: string, versionNumber: string, options?: any) {
        return DefaultApiFp(this.configuration).getDefaultSampleContextForVersion(definitionId, versionNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the latest version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:   WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
     * @summary Retrieve workflow definition by ID
     * @param {string} definitionId The ID of the workflow definition for which the latest version should be retrieved. The ID is at most 64 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDefinition(definitionId: string, options?: any) {
        return DefaultApiFp(this.configuration).getDefinition(definitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the specified version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
     * @summary Retrieve workflow definition by ID and version number
     * @param {string} definitionId The ID of the workflow definition which should be retrieved. The ID is at most 64 characters long.
     * @param {string} versionNumber The version number of the workflow definition that should be retrieved. The version number consists of 1 - 10 digits.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDefinitionVersion(definitionId: string, versionNumber: string, options?: any) {
        return DefaultApiFp(this.configuration).getDefinitionVersion(definitionId, versionNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all deployed versions of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
     * @summary Retrieve all versions of workflow definition by ID
     * @param {string} definitionId The ID of the workflow definition for which all versions should be retrieved. The ID is at most 64 characters long.
     * @param {'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc'} [$orderby] Specify the attribute you want to sort by and the order separated by a space. If the order is omitted it is ascending by default. If not specified, the results are sorted by the \&#39;createdAt\&#39; attribute in descending order.
     * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
     * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
     * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow definition versions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDefinitionVersions(definitionId: string, $orderby?: 'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', options?: any) {
        return DefaultApiFp(this.configuration).getDefinitionVersions(definitionId, $orderby, $skip, $top, $inlinecount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of the latest version of each revision of each deployed form definition. The request can be parameterized.  The results are sorted by the \'createdAt\' attribute in descending order.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: FORM_DEFINITION_GET 
     * @summary Retrieve all form definitions
     * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
     * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
     * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the form definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
     * @param {'start' | 'task'} [type] Specify whether the response should be filtered by the form type. The values are case-sensitive.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFormDefinitionsMetadata($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', type?: 'start' | 'task', options?: any) {
        return DefaultApiFp(this.configuration).getFormDefinitionsMetadata($skip, $top, $inlinecount, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the workflow instance with the specified workflow instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET
     * @summary Retrieve workflow instance by ID
     * @param {string} workflowInstanceId The ID of the workflow instance, which should be retrieved. The workflow instance ID is 36 characters long.
     * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getInstance(workflowInstanceId: string, $expand?: 'attributes', options?: any) {
        return DefaultApiFp(this.configuration).getInstance(workflowInstanceId, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the attachments information for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ATTACHMENTS
     * @summary Retrieve instance attachments
     * @param {string} workflowInstanceId The workflow instance ID for which the attachments should be retrieved. The workflow instance ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getInstanceAttachments(workflowInstanceId: string, options?: any) {
        return DefaultApiFp(this.configuration).getInstanceAttachments(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves custom workflow attributes for a workflow instance. Labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: WORKFLOW_INSTANCE_GET_ATTRIBUTES 
     * @summary Retrieve custom workflow attributes by workflow instance ID
     * @param {string} workflowInstanceId The ID of the workflow instance for which the custom workflow attributes should be retrieved. The ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getInstanceAttributes(workflowInstanceId: string, options?: any) {
        return DefaultApiFp(this.configuration).getInstanceAttributes(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the workflow context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_CONTEXT
     * @summary Retrieve instance context
     * @param {string} workflowInstanceId The workflow instance ID for which the context should be retrieved. The workflow instance ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getInstanceContext(workflowInstanceId: string, options?: any) {
        return DefaultApiFp(this.configuration).getInstanceContext(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves current error messages for a workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowDeveloper, WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ERROR_MESSAGES 
     * @summary Retrieve error messages
     * @param {string} workflowInstanceId The workflow instance ID for which the error messages should be retrieved. The workflow instance ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getInstanceErrorMessages(workflowInstanceId: string, options?: any) {
        return DefaultApiFp(this.configuration).getInstanceErrorMessages(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the instance-specific role assignments of the given workflow instance.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ROLES 
     * @summary Retrieve instance roles
     * @param {string} workflowInstanceId The workflow instance ID for which the roles should be retrieved. The workflow instance ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getInstanceRoles(workflowInstanceId: string, options?: any) {
        return DefaultApiFp(this.configuration).getInstanceRoles(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tracks the status of API requests, which the server executed asynchronously.          Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: JOB_STATUS_GET 
     * @summary Retrieve Job status
     * @param {string} jobId The ID of the job for which you check the status. Typically, the ID has been retrieved from another API request that was processed asynchronously. The ID is at most 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getJob(jobId: string, options?: any) {
        return DefaultApiFp(this.configuration).getJob(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the form model with the specified form ID and revision.  Roles permitted to execute this operation:  - Global roles (retrieve start and task forms): WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Global roles (retrieve start forms only): WorkflowInitiator  - Scope: FORM_DEFINITION_GET_MODEL 
     * @summary Retrieve form model by ID and revision.
     * @param {string} formId The ID of the form for which the model should be retrieved.
     * @param {string} revisionId The revision of the form for which the model should be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getModelByIdAndRevision(formId: string, revisionId: string, options?: any) {
        return DefaultApiFp(this.configuration).getModelByIdAndRevision(formId, revisionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the model of the specified version of the specified form definition.    Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin, WorkflowDeveloper   - Scope: FORM_DEFINITION_GET_MODEL 
     * @summary Retrieve form model by ID and version number.
     * @param {string} formId The form ID for which the model should be retrieved. The form definition ID is at most 255 characters long.
     * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getModelByIdAndVersion(formId: string, versionNumber: string, options?: any) {
        return DefaultApiFp(this.configuration).getModelByIdAndVersion(formId, versionNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the model of the latest version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET_MODEL 
     * @summary Retrieve workflow definition model by ID
     * @param {string} definitionId The workflow definition ID for which the latest model should be retrieved. The workflow definition ID is at most 64 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getModelForDefinition(definitionId: string, options?: any) {
        return DefaultApiFp(this.configuration).getModelForDefinition(definitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the model of the specified version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET_MODEL 
     * @summary Retrieve workflow definition model by ID and version number
     * @param {string} definitionId The workflow definition ID for which the model should be retrieved. The workflow definition ID is at most 64 characters long.
     * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getModelForDefinitionVersion(definitionId: string, versionNumber: string, options?: any) {
        return DefaultApiFp(this.configuration).getModelForDefinitionVersion(definitionId, versionNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Completely erases all workflow definitions, all workflow instances, and all form definitions.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: DATA_PURGE 
     * @summary Purge instances and definitions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public purge(options?: any) {
        return DefaultApiFp(this.configuration).purge(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of the latest version of each deployed workflow definition. The request can be parameterized.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
     * @summary Retrieve all workflow definitions
     * @param {'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc'} [$orderby] Specify the attribute you want to sort by and the order separated by a space. If the order is omitted it is ascending by default. If not specified, the results are sorted by the \&#39;createdAt\&#39; attribute in descending order.
     * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
     * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
     * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public queryDefinitions($orderby?: 'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', options?: any) {
        return DefaultApiFp(this.configuration).queryDefinitions($orderby, $skip, $top, $inlinecount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves execution logs for a given workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_EXECUTION_LOGS 
     * @summary Retrieve execution logs
     * @param {string} workflowInstanceId The workflow instance ID for which the execution logs should be retrieved. The workflow instance ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public queryInstanceExecutionLogs(workflowInstanceId: string, options?: any) {
        return DefaultApiFp(this.configuration).queryInstanceExecutionLogs(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves workflow instances by parameters. If no parameters are specified, all RUNNING, or ERRONEOUS instances are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If multiple parameters are specified for the same attribute or a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not given.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET 
     * @summary Retrieve all instances by query parameters
     * @param {'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc'} [$orderby] The attribute and direction by which workflow instances are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. If sort by definitionVersion is enabled, then definitionId is also added to the sorting query. If not specified, the results are sorted by the \&#39;startedAt\&#39; attribute, in descending order.   * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * definitionId asc - Ascending, from A to Z case-sensitive.  * definitionId desc - Descending, from Z to A case-sensitive.  * definitionVersion asc - Ascending, from A to Z case-sensitive.  * definitionVersion desc - Descending, from Z to A case-sensitive.  * startedAt asc - Ascending, from A to Z case-sensitive.  * startedAt desc - Descending, from Z to A case-sensitive.  * completedAt asc - Ascending, workflow instance completion or cancelation time from the oldest to the most recent, not yet COMPLETED workflow instances first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED workflow instance to the oldest ones, not yet COMPLETED workflow instances last.  * startedBy asc - Ascending, from A to Z case-sensitive.  * startedBy desc - Descending, from Z to A case-sensitive.  * subject asc - Ascending, from A to Z case-sensitive, workflow instances without subject first.  * subject desc - Descending, from Z to A case-sensitive, workflow instances without subject last.  * businessKey asc - Ascending, from A to Z case-sensitive, workflow instances without business key first.  * businessKey desc - Descending, from Z to A case-sensitive, workflow instances without business key last.
     * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
     * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
     * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow instances, which match the search criteria, should be returned as a value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. 
     * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
     * @param {string} [id] Specify the workflow instance ID. The workflow instance ID is 36 characters long.
     * @param {string} [definitionId] Specify the ID of the workflow definition. The ID is at most 64 characters long.
     * @param {string} [definitionVersion] Specify the version of the workflow definition.
     * @param {'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED'} [status] Specify the status of the workflow instance. The values are not case-sensitive.
     * @param {string} [startedAt] Specify at what time the workflow instance was started. Supports two date formats 1) yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2) yyyyMMddHHmmss.SSS.
     * @param {string} [startedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
     * @param {string} [startedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
     * @param {string} [completedAt] Specify at what time the workflow instance was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS 
     * @param {string} [completedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
     * @param {string} [completedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
     * @param {string} [startedBy] Specify the user who started the workflow instance, in UTF-8 encoding. The user ID is at most 255 characters long.
     * @param {string} [subject] Specify the subject of the workflow instance, in UTF-8 encoding. The subject of a workflow instance is limited to 255 characters.
     * @param {string} [containsText] Specify the text to search for, in UTF-8 encoding. Searches the id, definitionId, subject, startedBy, and businessKey attributes of the workflow instances. The maximum length of these attributes is 255 characters. 
     * @param {string} [businessKey] Specify the business key of the workflow instance, in UTF-8 encoding. The business key of a workflow instance is limited to 255 characters.
     * @param {string} [rootInstanceId] Specify the workflow root instance ID.  The workflow root instance ID is 36 characters long.
     * @param {string} [parentInstanceId] Specify the workflow parent instance ID.  The workflow parent instance ID is 36 characters long or it can be null.
     * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters workflow instances by the value of the custom workflow attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom workflow attributes with different IDs are present in the URL, only workflow instances which contain all of them with the values specified will be returned as a response to the request. If a query by custom workflow attributes matches too many workflow definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public queryInstances($orderby?: 'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributes', id?: string, definitionId?: string, definitionVersion?: string, status?: 'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED', startedAt?: string, startedFrom?: string, startedUpTo?: string, completedAt?: string, completedFrom?: string, completedUpTo?: string, startedBy?: string, subject?: string, containsText?: string, businessKey?: string, rootInstanceId?: string, parentInstanceId?: string, attributesExampleCustomAttribute?: string, options?: any) {
        return DefaultApiFp(this.configuration).queryInstances($orderby, $skip, $top, $inlinecount, $expand, id, definitionId, definitionVersion, status, startedAt, startedFrom, startedUpTo, completedAt, completedFrom, completedUpTo, startedBy, subject, containsText, businessKey, rootInstanceId, parentInstanceId, attributesExampleCustomAttribute, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a message to a set of workflow instances for consumption in intermediate message events. The message is identified by the name specified in the workflow model (request body parameter \'definitionId\')  and parameters identifying the workflow instances that should consume the message.   The message is consumed by the workflow instances that match the following criteria:  * The instance can be a specific match when using its workflow instance ID (request body parameter \'workflowInstanceId\').  Or the instance is a generic match when using the ID of the workflow model together with the business key (request body parameters \'workflowDefinitionId\' respectively \'businessKey\'). You can either use the specific or generic match but not both in the same call.  * The workflow instance is not in the SUSPENDED state.  * The workflow instance currently waits at the intermediate message event referring to the specified message.  The business key of a workflow instance matches if the business key specified in the request body is the same.    Roles permitted to execute this operation:  - Global roles:  WorkflowMessageSender  - Scope: MESSAGE_SEND
     * @summary Send message
     * @param {SendMessagePayload} sendMessagePayload Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendMessage(sendMessagePayload: SendMessagePayload, options?: any) {
        return DefaultApiFp(this.configuration).sendMessage(sendMessagePayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Overrides the attachments information for a workflow instance independent of its status.  Take special care when using this API, because it will override the workflow attachments, that is, it might change the workflow   in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ATTACHMENTS
     * @summary Overwrite instance attachments
     * @param {string} workflowInstanceId Specify the workflow instance ID for which the attachments should be overridden. The workflow instance ID is 36 characters long.
     * @param {AttachmentsContext} attachmentsContext Specify the new information according to the given schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setInstanceAttachments(workflowInstanceId: string, attachmentsContext: AttachmentsContext, options?: any) {
        return DefaultApiFp(this.configuration).setInstanceAttachments(workflowInstanceId, attachmentsContext, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Overrides the context for a workflow instance independent of its status.   Take special care when using this API, because it will override the workflow context, that is, it might change the workflow context  in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.  Refer to PATCH on the parent resource and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
     * @summary Overwrite instance context
     * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be overridden. The workflow instance ID is 36 characters long.
     * @param {object} body Specify the new context according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setInstanceContext(workflowInstanceId: string, body: object, options?: any) {
        return DefaultApiFp(this.configuration).setInstanceContext(workflowInstanceId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Starts a new workflow instance of the provided workflow definition. Specify the ID of the workflow definition in the body. The workflow instance automatically starts based on the latest deployed version of the definition.  Roles permitted to execute this operation:  - Global roles: WorkflowInitiator  - Scope: WORKFLOW_INSTANCE_START 
     * @summary Start a new instance
     * @param {WorkflowInstanceStartPayload} workflowInstanceStartPayload Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public startInstance(workflowInstanceStartPayload: WorkflowInstanceStartPayload, options?: any) {
        return DefaultApiFp(this.configuration).startInstance(workflowInstanceStartPayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Undeploys all versions of an existing workflow definition and deletes the corresponding workflow instances. Once the undeployment has started, you can no longer start a new workflow instance based on this workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: WORKFLOW_DEFINITION_UNDEPLOY 
     * @summary Delete workflow definition
     * @param {string} definitionId The ID of the workflow definition to be undeployed. The ID is at most 64 characters long.
     * @param {boolean} [cascade] Whether the undeployment of the workflow definition deletes active workflow instances. If the parameter is false or not specified and there are active workflow instances for the specified workflow definition,  the undeployment is rejected. An instance is considered active if it is in status RUNNING, ERRONEOUS, or SUSPENDED. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public undeployDefinition(definitionId: string, cascade?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).undeployDefinition(definitionId, cascade, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Undeploys all versions of an existing form.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: FORM_DEFINITION_UNDEPLOY 
     * @summary Delete a form.
     * @param {string} formId The ID of the form you want to undeploy. The ID is at most 255 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public undeployForm(formId: string, options?: any) {
        return DefaultApiFp(this.configuration).undeployForm(formId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies the properties of a given workflow instance, for example, sets its status to CANCELED or RUNNING.  Status change effects may not take effect immediately, due to asynchronous processing of the request. When you change the status to CANCELED, note the following:  * Workflow instances in CANCELED status are considered final, that is, no further changes are allowed. This is valid as well for other APIs and the processing according to the workflow definition.  * Workflow instances in CANCELED status stop processing as soon as the system allows.  When you are changing the status to SUSPENDED, note the following:  * Status SUSPENDED manually and temporarily suspends processing.  * Workflow instances in SUSPENDED status stop processing as soon as the system allows.  * Workflow instances remain in SUSPENDED status until a status change to RUNNING or CANCELED is requested.  * While the workflow instance status reported by the respective API might change with immediate effect, follow-up actions might only be successful, after asynchronous processing within the workflow instance actually has stopped. To check whether asynchronous processing is ongoing, analyze the execution logs or check the workflow definition structure.  When you are changing the status to RUNNING, note the following:  * For workflow instances in ERRONEOUS status, this retries the failed activities. If these activities continue failing, the workflow instance automatically moves again into ERRONEOUS status.  * If the workflow instance had previously been suspended while in ERRONEOUS status, failed activities, such as service tasks, are retried.   Roles permitted to execute this operation:  - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: WORKFLOW_INSTANCE_CANCEL, WORKFLOW_INSTANCE_RETRY_RESUME, WORKFLOW_INSTANCE_SUSPEND
     * @summary Update instance
     * @param {string} workflowInstanceId The ID of the workflow instance, which should be modified. The workflow instance ID is 36 characters long.
     * @param {WorkflowInstanceUpdatePayload} workflowInstanceUpdatePayload 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateInstance(workflowInstanceId: string, workflowInstanceUpdatePayload: WorkflowInstanceUpdatePayload, options?: any) {
        return DefaultApiFp(this.configuration).updateInstance(workflowInstanceId, workflowInstanceUpdatePayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies parts of the context for a workflow instance independent of its status.  Take special care when using this API, because it might change the workflow context in ways that are incompatible with the expectations  of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and make sure that  the execution has come to a halt, that is, that no further steps are being added to the execution log. Refer to PATCH on the parent resource  and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
     * @summary Update instance context
     * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be modified. The workflow instance ID is 36 characters long.
     * @param {object} body Specify the modified parts of the context. Note that the modification is limited by the allowed content length of the request body. The length is restricted to ensure optimal operation of the service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateInstanceContext(workflowInstanceId: string, body: object, options?: any) {
        return DefaultApiFp(this.configuration).updateInstanceContext(workflowInstanceId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the instance-specific role assignments of the given workflow instance.  Any of the role assignment properties that is present in the request body will overwrite the existing assignments with the new assignments. Any properties that are either null or not present at all in the request body will leave the corresponding role assignments unchanged.  The maximum number of users and groups that can be assigned to each role is limited to 100.  The use of expressions as part of the role assignments (e.g. ${context.variable}) is only allowed for workflow instances that are not yet COMPLETED or CANCELED.  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ROLES  Examples: - Setting **viewerUsers: \"UserId1, UserId8\"** will remove all existing user assignments of the viewer role and then assign   only the two specified users to the role. - Setting **viewerUsers: \"\"** will remove all existing user assignments of the viewer role. - Specifying any non-null **viewerUsers** in the request body and leaving out **viewerGroups** will update the user   assignments and leave the group assignments unchanged.
     * @summary Update instance roles
     * @param {string} workflowInstanceId The workflow instance ID for which the role assignments should be updated. The workflow instance ID is 36 characters long.
     * @param {WorkflowInstanceRolesUpdatePayload} workflowInstanceRolesUpdatePayload Specify new role assignments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateInstanceRoles(workflowInstanceId: string, workflowInstanceRolesUpdatePayload: WorkflowInstanceRolesUpdatePayload, options?: any) {
        return DefaultApiFp(this.configuration).updateInstanceRoles(workflowInstanceId, workflowInstanceRolesUpdatePayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies the given workflow instances according to the specified operations. Currently, the only operation supported is the deletion of workflow instances. You can at most specify 10000 instances to delete in one API call.  Roles permitted to execute this operation: - Global roles: WorkflowTenantOperator - Scope: WORKFLOW_INSTANCES_UPDATE
     * @summary Delete instance by ID
     * @param {Array<WorkflowInstancesUpdatePayload>} workflowInstancesUpdatePayload Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateInstances(workflowInstancesUpdatePayload: Array<WorkflowInstancesUpdatePayload>, options?: any) {
        return DefaultApiFp(this.configuration).updateInstances(workflowInstancesUpdatePayload, options).then((request) => request(this.axios, this.basePath));
    }
}
