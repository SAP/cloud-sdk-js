{
  "openapi": "3.0.0",
  "info": {
    "title": "Test API",
    "description": "Test API",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "entity",
      "description": "entity tag"
    },
    {
      "name": "test case",
      "description": "test case tag"
    },
    {
      "name": "default",
      "description": "default tag"
    }
  ],
  "paths": {
    "/entities": {
      "head": {
        "tags": ["entity"],
        "summary": "Head request of entities",
        "description": "Head request of entities",
        "operationId": "headEntities",
        "responses": {
          "204": {
            "description": "no content"
          }
        }
      },
      "get": {
        "tags": ["entity"],
        "summary": "Get entities",
        "description": "Get all entities",
        "operationId": "getAllEntities",
        "parameters": [
          {
            "name": "stringParameter",
            "in": "query",
            "description": "A parameter of type string",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 50,
              "minimum": 0,
              "type": "string"
            }
          },
          {
            "name": "integerParameter",
            "in": "query",
            "description": "A parameter of type integer",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 50,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$dollarParameter",
            "in": "query",
            "description": "A parameter that contains $",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dot.parameter",
            "in": "query",
            "description": "A parameter that contains . in the middle",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enumStringParameter",
            "in": "query",
            "description": "A parameter of type enum with string",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["value1", "value2", "valueWith'Quote"]
            }
          },
          {
            "name": "enumInt32Parameter",
            "in": "query",
            "description": "A parameter of type enum with int 32",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "enum": [1, 2]
            }
          },
          {
            "name": "enumDoubleParameter",
            "in": "query",
            "description": "A parameter of type enum with double",
            "required": false,
            "schema": {
              "type": "number",
              "format": "double",
              "enum": [1, 2]
            }
          },
          {
            "name": "enumBooleanParameter",
            "in": "query",
            "description": "A parameter of type enum with boolean",
            "required": false,
            "schema": {
              "type": "boolean",
              "enum": ["true", "false"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "entities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestEntity"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      },
      "post": {
        "tags": ["entity"],
        "summary": "Create entity",
        "description": "Create entity",
        "operationId": "createEntity",
        "requestBody": {
          "description": "Entity to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestEntity"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "entity created"
          },
          "400": {
            "description": "bad input"
          },
          "409": {
            "description": "entity already exists"
          }
        }
      },
      "patch": {
        "tags": ["entity"],
        "operationId": "updateEntity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "entity updated"
          }
        }
      },
      "delete": {
        "tags": ["entity"],
        "operationId": "deleteEntity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "entity deleted"
          }
        }
      },
      "put": {
        "tags": ["entity"],
        "operationId": "updateEntityWithPut",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TestEntity"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "entity updated"
          }
        }
      }
    },
    "/entities/{entityId}": {
      "get": {
        "tags": ["entity"],
        "summary": "Get entity by id",
        "description": "Get entity by id",
        "operationId": "getEntityByKey",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "Key property of the entity",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "entity",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TestEntity"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/entities/count": {
      "get": {
        "tags": ["entity"],
        "summary": "Count entities",
        "description": "Count entities",
        "operationId": "countEntities",
        "responses": {
          "200": {
            "description": "entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      }
    },
    "/test-cases/parameters/required-parameters/{requiredPathItemPathParam}": {
      "parameters": [
        {
          "name": "optionalPathItemQueryParam",
          "in": "query",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "requiredPathItemQueryParam",
          "in": "query",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "requiredPathItemPathParam",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": ["test case"],
        "operationId": "testCaseGetRequiredParameters",
        "parameters": [
          {
            "name": "optionalQueryParam",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requiredQueryParam",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "optionalPathItemQueryParam",
            "description": "Overrides original path item query parameter.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleTestEntity"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "no content"
          }
        }
      },
      "post": {
        "tags": ["test case"],
        "operationId": "testCasePostRequiredParameters",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleTestEntity"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "optionalQueryParam",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "requiredQueryParam",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "no content"
          }
        }
      }
    },
    "/test-cases/parameters/{duplicateParam}": {
      "get": {
        "tags": ["test case"],
        "operationId": "testCaseGetDuplicateParameters",
        "parameters": [
          {
            "name": "duplicateParam",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "duplicateParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "no content"
          }
        }
      }
    },
    "/test-cases/no-operation-id": {
      "get": {
        "tags": ["test case"],
        "responses": {
          "201": {
            "description": "no content"
          }
        }
      }
    },
    "/test-cases/duplicate-operation-ids": {
      "get": {
        "tags": ["test case"],
        "operationId": "duplicateOperationId",
        "responses": {
          "201": {
            "description": "no content"
          }
        }
      },
      "post": {
        "tags": ["test case"],
        "operationId": "duplicateOperationId",
        "responses": {
          "201": {
            "description": "no content"
          }
        }
      },
      "put": {
        "tags": ["test case"],
        "operationId": "duplicateOperationId_1",
        "responses": {
          "201": {
            "description": "no content"
          }
        }
      },
      "patch": {
        "tags": ["test case"],
        "operationId": "duplicateOperationId1",
        "responses": {
          "201": {
            "description": "no content"
          }
        }
      }
    },
    "/test-cases/reserved-keywords/{const}": {
      "get": {
        "tags": ["test case"],
        "operationId": "export",
        "parameters": [
          {
            "name": "const",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "const",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "no content"
          }
        }
      }
    },
    "/test-cases/special-tag": {
      "get": {
        "operationId": "tag with dot",
        "tags": ["tag.dot"],
        "responses": {
          "201": {
            "description": "no content"
          }
        }
      },
      "post": {
        "operationId": "tag with space",
        "tags": ["tag space"],
        "responses": {
          "201": {
            "description": "no content"
          }
        }
      }
    },
    "/test-cases/default-tag": {
      "get": {
        "operationId": "noTag",
        "responses": {
          "201": {
            "description": "no content"
          }
        }
      },
      "post": {
        "tags": ["default"],
        "operationId": "defaultTag",
        "responses": {
          "201": {
            "description": "no content"
          }
        }
      }
    },
    "/test-cases/extension": {
      "x-sap-cloud-sdk-api-name": "extension",
      "get": {
        "x-sap-cloud-sdk-operation-name": "niceGetFunction",
        "responses": {
          "201": {
            "description": "no content"
          }
        }
      },
      "post": {
        "x-sap-cloud-sdk-operation-name": "nicePostFunction",
        "tags": ["default"],
        "operationId": "testCasesExtensionPost",
        "responses": {
          "201": {
            "description": "no content"
          }
        }
      }
    },
    "/test-cases/complex-schemas": {
      "get": {
        "tags": ["test case"],
        "operationId": "complexSchemas",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComplexTestEntity"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "no content"
          }
        }
      },
      "post": {
        "tags": ["test case"],
        "operationId": "useNameWithSymbols",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/simple-test-entity«WITH_Symbols»"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "no content"
          }
        }
      }
    },
    "/test-cases/schema-name-integer": {
      "get": {
        "tags": ["test case"],
        "operationId": "schemaNameInteger",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/123456"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "no content"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "123456": {
        "type": "object",
        "properties": {
          "someProperty": {
            "type": "string",
            "example": "Schema name only integers"
          }
        }
      },
      "TestEntity": {
        "type": "object",
        "required": ["keyProperty"],
        "properties": {
          "keyProperty": {
            "type": "string",
            "format": "uuid",
            "example": "d290f1ee-6c54-4b01-90e6-d701748f0851"
          },
          "stringProperty": {
            "type": "string",
            "example": "Example string"
          },
          "dateProperty": {
            "type": "string",
            "format": "date",
            "example": "2016-08-29"
          },
          "dateTimeProperty": {
            "type": "string",
            "format": "date-time",
            "example": "2016-08-29T09:12:33.001Z"
          },
          "int32Property": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "int64Property": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "floatProperty": {
            "type": "number",
            "format": "float",
            "example": 1
          },
          "doubleProperty": {
            "type": "number",
            "format": "double",
            "example": 1
          },
          "linkedSimpleTestEntity": {
            "$ref": "#/components/schemas/SimpleTestEntity"
          },
          "linkedSimpleTestEntityCollection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimpleTestEntity"
            }
          }
        },
        "description": "TestEntity schema"
      },
      "SimpleTestEntity": {
        "type": "object",
        "required": ["stringProperty"],
        "properties": {
          "stringProperty": {
            "type": "string",
            "example": "Example string"
          }
        },
        "description": "SimpleTestEntity schema"
      },
      "OtherSimpleTestEntity": {
        "$ref": "#/components/schemas/SimpleTestEntity"
      },
      "simple-test-entity«WITH_Symbols»": {
        "$ref": "#/components/schemas/SimpleTestEntity"
      },
      "simple-test-entity<WITH_Symbols>": {
        "$ref": "#/components/schemas/SimpleTestEntity"
      },
      "ComplexTestEntity": {
        "properties": {
          "referenceProperty": {
            "$ref": "#/components/schemas/SimpleTestEntity"
          },
          "arrayProperty": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "item": { "type": "string" }
              }
            }
          },
          "uniqueItemsProperty": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          },
          "requiredPropertiesProperty": {
            "type": "object",
            "properties": {
              "optionalProperty": { "type": "string" },
              "requiredProperty": { "type": "string" }
            },
            "required": ["requiredProperty"]
          },
          "enumProperty": {
            "type": "string",
            "enum": ["one", "two"]
          },
          "oneOfProperty": {
            "oneOf": [
              { "$ref": "#/components/schemas/SimpleTestEntity" },
              { "$ref": "#/components/schemas/TestEntity" }
            ]
          },
          "allOfProperty": {
            "allOf": [
              { "$ref": "#/components/schemas/SimpleTestEntity" },
              {
                "type": "object",
                "properties": {
                  "additionalProperty": { "type": "string" }
                }
              }
            ]
          },
          "anyOfProperty": {
            "anyOf": [
              { "$ref": "#/components/schemas/SimpleTestEntity" },
              {
                "type": "object",
                "properties": {
                  "additionalProperty": { "type": "string" }
                }
              }
            ]
          },
          "notProperty": {
            "not": {
              "type": "integer"
            }
          },
          "objectPropertyWithNoAdditionalProperties": {
            "properties": {
              "specifiedProperty": { "type": "string" }
            },
            "additionalProperties": false
          },
          "objectPropertyWithAdditionalProperties": {
            "properties": {
              "specifiedProperty": { "type": "string" }
            },
            "additionalProperties": true
          },
          "objectPropertyWithNumberAdditionalProperties": {
            "properties": {
              "specifiedProperty": { "type": "string" }
            },
            "additionalProperties": {
              "type": "number"
            }
          }
        }
      },
      "CyclicParent": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/CyclicChild" }
          }
        }
      },
      "CyclicChild": {
        "type": "object",
        "properties": {
          "parent": { "$ref": "#/components/schemas/CyclicParent" }
        }
      }
    }
  }
}
